{"id":"debace95d57a34961df282d31aa6c023","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"contracts/interfaces/IPaycrest.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {SharedStructs} from \"../libraries/SharedStructs.sol\";\n\n/**\n * @title IPaycrest\n * @dev Interface for the Paycrest contract.\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /**\n     * @dev Emitted when a deposit is made.\n     * @param token The address of the deposited token.\n     * @param amount The amount of the deposit.\n     * @param orderId The ID of the order.\n     * @param rate The rate at which the deposit is made.\n     * @param institutionCode The code of the institution.\n     * @param label The label of the deposit.\n     * @param messageHash The hash of the message.\n     */\n    event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\n\n    /**\n     * @dev Emitted when an aggregator settles a transaction.\n     * @param splitOrderId The ID of the split order.\n     * @param orderId The ID of the order.\n     * @param label The label of the transaction.\n     * @param liquidityProvider The address of the liquidity provider.\n     * @param settlePercent The percentage at which the transaction is settled.\n     */\n    event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\n\n    /**\n     * @dev Emitted when an aggregator refunds a transaction.\n     * @param fee The fee deducted from the refund amount.\n     * @param orderId The ID of the order.\n     * @param label The label of the transaction.\n     */\n    event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label);\n\n    /**\n     * @dev Emitted when the sender's fee is transferred.\n     * @param sender The address of the sender.\n     * @param amount The amount of the fee transferred.\n     */\n    event SenderFeeTransferred(address indexed sender, uint256 indexed amount);\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    /**\n     * @dev Struct representing transaction metadata.\n     * @param identifier The identifier of the transaction.\n     * @param institution The institution of the transaction.\n     * @param name The name of the transaction.\n     * @param currency The currency of the transaction.\n     * @param liquidityProviderID The ID of the liquidity provider.\n     */\n    struct TransactionMetadata {\n        bytes8 identifier;\n        bytes8 institution;\n        bytes8 name;\n        bytes8 currency;\n        uint256 liquidityProviderID;\n    }\n\n    /**\n     * @dev Struct representing an order.\n     * @param seller The address of the seller.\n     * @param token The address of the token.\n     * @param senderFeeRecipient The address of the sender fee recipient.\n     * @param senderFee The fee to be paid to the sender fee recipient.\n     * @param protocolFee The protocol fee to be paid.\n     * @param rate The rate at which the order is made.\n     * @param isFulfilled Whether the order is fulfilled.\n     * @param refundAddress The address to which the refund is made.\n     * @param currentBPS The current basis points.\n     * @param amount The amount of the order.\n     */\n    struct Order {\n        address seller;\n        address token;\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint256 protocolFee;\n        uint96 rate;\n        bool isFulfilled;\n        address refundAddress;\n        uint96 currentBPS;\n        uint256 amount;\n    }\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /**\n     * @notice Locks the sender's amount of token into Paycrest.\n     * @dev Requirements:\n     * - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n     * - `_token` must be an acceptable token. See {isTokenSupported}.\n     * - `amount` must be greater than minimum.\n     * - `_refundable` refundable address must not be zero address.\n     * @param _token The address of the token.\n     * @param _amount The amount in the decimal of `_token` to be locked.\n     * @param _institutionCode The institution code of the sender.\n     * @param _label The reference of the sender.\n     * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\n     * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token` when there is a need to refund.\n     * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.\n     * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\n     * @param messageHash The hash of the message.\n     * @return _orderId The ID of the order.\n     */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    ) external returns(bytes32 _orderId);\n\n    /**\n     * @notice Settles a transaction and distributes rewards accordingly.\n     * @dev Requirements:\n     * - Only aggregators can call this function.\n     * - `_orderId` must be less than total IDs.\n     * - `_orderId` must be an open ID.\n     * - `_primaryValidator` must have stake on the Paycrest staking platform.\n     * - `_secondaryValidators` must have stake on the Paycrest staking platform.\n     * - `amount` must be greater than minimum.\n     * - `_refundable` refundable address must not be zero address.\n     * @param _orderId The ID of the transaction.\n     * @param _label The reference of the sender.\n     * @param _liquidityProvider The address of the liquidity provider.\n     * @param _settlePercent The rate at which the transaction is settled.\n     * @return _orderId The ID of the order.\n     * @return _liquidityProvider The address of the liquidity provider.\n     */\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) external returns(bytes32, address);\n\n    /**\n     * @notice Refunds to the specified refundable address.\n     * @dev Requirements:\n     * - Only aggregators can call this function.\n     * - `_orderId` must be less than total IDs.\n     * - `_orderId` must be an open ID.\n     * - `isFulfilled` must be false.\n     * @param _fee The amount to be deducted from the amount to be refunded.\n     * @param _orderId The ID of the transaction.\n     * @param _label The reference of the sender.\n     * @return Whether the refund is successful.\n     */\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external returns(bool);\n\n    /**\n     * @notice Checks if a token is supported by Paycrest.\n     * @param _token The address of the token to check.\n     * @return Whether the token is supported.\n     */\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /**\n     * @notice Gets the details of an order.\n     * @param _orderId The ID of the order.\n     * @return return The order details.\n     */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /**\n     * @notice Gets the fee details of Paycrest.\n     * @return protocolReward The protocol reward amount.\n     * @return max_bps The maximum basis points.\n     */\n    function getFeeDetails() external view returns(uint64 protocolReward, uint256 max_bps);\n\n    /**\n     * @notice Gets the aggregator's public key.\n     * @return return The aggregator's public key.\n     */\n    function getAggregator() external view returns(bytes memory);\n\n    /**\n     * @notice Gets the details of a supported institution by code.\n     * @param _code The institution code.\n     * @return return The institution details.\n     */\n    function getSupportedInstitutionByCode(bytes32 _code) external view returns(SharedStructs.InstitutionByCode memory);\n\n    /**\n     * @notice Gets the details of supported institutions by currency.\n     * @param _currency The currency code.\n     * @return return An array of institutions.\n     */ \n    function getSupportedInstitutions(bytes32 _currency) external view returns(SharedStructs.Institution[] memory);\n}\n"},"contracts/libraries/SharedStructs.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nlibrary SharedStructs {\n    /**\n     * @dev Struct representing an institution.\n     * @param code The code of the institution.\n     * @param name The name of the institution.\n     */\n    struct Institution {\n        bytes32 code;\n        bytes32 name;\n    }\n\n    /**\n     * @dev Struct representing an institution by code.\n     * @param name The name of the institution.\n     * @param currency The currency of the institution.\n     */\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n}"},"contracts/Paycrest.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrest, IERC20} from \"./interfaces/IPaycrest.sol\";\nimport {SharedStructs} from \"./libraries/SharedStructs.sol\";\n\n/**\n * @title Paycrest\n * @dev Paycrest contract for handling orders and settlements.\n */\ncontract Paycrest is IPaycrest, PaycrestSettingManager, PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n    }\n\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    uint256[50] private __gap;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initialize function.\n     */\n    function initialize() external initializer {\n        MAX_BPS = 100_000;\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    /**\n     * @dev Modifier that allows only the aggregator to call a function.\n     */\n    modifier onlyAggregator {\n        require(msg.sender == _aggregatorAddress, \"OnlyAggregator\");\n        _;\n    }\n\n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    /**\n     * @dev Pause the contract.\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount,\n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    ) external whenNotPaused() returns(bytes32 orderId) {\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _institutionCode);\n\n        // validate messageHash\n        require(bytes(messageHash).length > 0, \"InvalidMessageHash\");\n\n        // transfer token from msg.sender to contract\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount + _senderFee);\n\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n\n\n        // update transaction\n        uint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            protocolFee: _protocolFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint64(MAX_BPS),\n            amount: _amount - _protocolFee\n        });\n\n        // emit deposit event\n        emit OrderCreated(_token, order[orderId].amount, _protocolFee, orderId, _rate, _institutionCode, _label, messageHash);\n    }\n\n    /**\n     * @dev Internal function to handle order creation.\n     * @param _token The address of the token being traded.\n     * @param _amount The amount of tokens being traded.\n     * @param _refundAddress The address to refund the tokens in case of cancellation.\n     * @param _senderFeeRecipient The address of the recipient for the sender fee.\n     * @param _senderFee The amount of the sender fee.\n     * @param _institutionCode The code of the institution associated with the order.\n     */\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, bytes32 _institutionCode) internal view {\n        require(_isTokenSupported[_token], \"TokenNotSupported\");\n        require(_amount > 0, \"AmountIsZero\");\n        require(_refundAddress != address(0), \"ThrowZeroAddress\");\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \"InvalidInstitutionCode\");\n\n        if (_senderFee > 0) {\n            require(_senderFeeRecipient != address(0), \"InvalidSenderFeeRecipient\");\n        }\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _splitOrderId,\n        bytes32 _orderId, \n        bytes32 _label,\n        address _liquidityProvider, \n        uint64 _settlePercent\n    ) external onlyAggregator() returns(bytes32, address) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n\n        // load the token into memory\n        address token = order[_orderId].token;\n\n        // subtract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n\n            if (order[_orderId].senderFee > 0) {\n                // transfer sender fee\n                _transferSenderFee(_orderId); \n            }\n\n            if (order[_orderId].protocolFee > 0) {\n                // transfer protocol fee\n                IERC20(token).transfer(treasuryAddress, order[_orderId].protocolFee);\n            }\n        }\n\n        // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, order[_orderId].amount);\n\n        // emit event\n        emit OrderSettled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\n        return (_orderId, token);\n    }\n\n    /**\n     * @dev Internal function to transfer the sender fee.\n     * @param _orderId The ID of the order.\n     */\n    function _transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit SenderFeeTransferred(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n\n        // deduct fee from order amount\n        uint256 refundAmount = order[_orderId].amount - _fee;\n        IERC20(order[_orderId].token).transfer(treasuryAddress, _fee);\n\n        // reset state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n    \n        // transfer to sender and emit event\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, refundAmount);\n        emit OrderRefunded(_fee, _orderId, _label);\n\n        return true;\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionByCode-IPaycrest}. */\n    function getSupportedInstitutionByCode(bytes32 _code) external view returns(SharedStructs.InstitutionByCode memory) {\n        return supportedInstitutionsByCode[_code];\n    }\n\n    /** @dev See {getSupportedInstitutions-IPaycrest}. */\n    function getSupportedInstitutions(bytes32 _currency) external view returns(SharedStructs.Institution[] memory) {\n        SharedStructs.Institution[] memory institutions = supportedInstitutions[_currency];\n        uint256 length = institutions.length;\n        SharedStructs.Institution[] memory result = new SharedStructs.Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint64, \n        uint256\n    ) {\n        return(protocolFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getAggregator-IPaycrest}. */\n    function getAggregator() external view returns(bytes memory) {\n        return _aggregator;\n    } \n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\n/**\n * @title PaycrestSettingManager\n * @dev This contract manages the settings and configurations for the Paycrest protocol.\n */\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport {SharedStructs} from \"./libraries/SharedStructs.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    uint256 internal MAX_BPS;\n    uint64 internal protocolFeePercent;\n    address internal treasuryAddress;\n    address internal _aggregatorAddress;\n    bytes internal _aggregator;\n    \n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\n    uint256[50] private __gap;\n\n    mapping(address => bool) internal _isTokenSupported;\n\n    mapping(bytes32 => SharedStructs.Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => SharedStructs.InstitutionByCode) internal supportedInstitutionsByCode;\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event ProtocolFeesUpdated(uint64 protocolFee);\n    event ProtocolAddressesUpdated(address treasuryAddress);\n    event SetAggregator(bytes aggregator);\n    event SetFeeRecipient(address treasuryAddress);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n\n    /**\n     * @dev Sets the boolean value for a specific setting.\n     * @param what The setting to be updated.\n     * @param value The address or value associated with the setting.\n     * @param status The boolean value to be set.\n     * Requirements:\n     * - The value must not be a zero address.\n     */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"token\") _isTokenSupported[value] = status;\n\n        emit SettingManagerBool(what, value, status);\n    }\n\n    /**\n     * @dev Sets the supported institutions for a specific currency.\n     * @param currency The currency for which the institutions are being set.\n     * @param institutions The array of institutions to be set.\n     */\n    function setSupportedInstitutions(bytes32 currency, SharedStructs.Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = SharedStructs.InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * @dev Updates the protocol fees percentage.\n     * @param _protocolFeePercent The new protocol fees percentage to be set.\n     */\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        emit ProtocolFeesUpdated(_protocolFeePercent);\n    }\n\n    /**\n     * @dev Updates the protocol addresses.\n     * @param what The address type to be updated (treasury or aggregator).\n     * @param value The new address to be set.\n     * Requirements:\n     * - The value must not be a zero address.\n     */\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"treasury\") treasuryAddress = value;\n        if (what == \"aggregator\") _aggregatorAddress = value;\n        emit ProtocolAddressesUpdated(treasuryAddress);\n    }\n\n    /**\n     * @dev Updates the protocol aggregator.\n     * @param aggregator The new aggregator to be set.\n     */\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\n        _aggregator = aggregator;\n        emit SetAggregator(aggregator);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1300],"Initializable":[301],"OwnableUpgradeable":[132]},"id":133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":1301,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":302,"src":"169:63:0","symbolAliases":[{"foreign":{"id":3,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"177:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6,"name":"Initializable","nameLocations":["769:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":301,"src":"769:13:0"},"id":7,"nodeType":"InheritanceSpecifier","src":"769:13:0"},{"baseName":{"id":8,"name":"ContextUpgradeable","nameLocations":["784:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1300,"src":"784:18:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"784:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"234:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":132,"linearizedBaseContracts":[132,1300,301],"name":"OwnableUpgradeable","nameLocation":"747:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":11,"mutability":"mutable","name":"_owner","nameLocation":"825:6:0","nodeType":"VariableDeclaration","scope":132,"src":"809:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":17,"name":"OwnershipTransferred","nameLocation":"844:20:0","nodeType":"EventDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"881:13:0","nodeType":"VariableDeclaration","scope":17,"src":"865:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"865:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":15,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"912:8:0","nodeType":"VariableDeclaration","scope":17,"src":"896:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"864:57:0"},"src":"838:84:0"},{"body":{"id":26,"nodeType":"Block","src":"1076:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":23,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1086:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1086:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25,"nodeType":"ExpressionStatement","src":"1086:26:0"}]},"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"928:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":21,"kind":"modifierInvocation","modifierName":{"id":20,"name":"onlyInitializing","nameLocations":["1059:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"1059:16:0"},"nodeType":"ModifierInvocation","src":"1059:16:0"}],"name":"__Ownable_init","nameLocation":"1033:14:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"1047:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"1076:0:0"},"scope":132,"src":"1024:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":37,"nodeType":"Block","src":"1187:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":33,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"1216:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":32,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1197:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":36,"nodeType":"ExpressionStatement","src":"1197:32:0"}]},"id":38,"implemented":true,"kind":"function","modifiers":[{"id":30,"kind":"modifierInvocation","modifierName":{"id":29,"name":"onlyInitializing","nameLocations":["1170:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"1170:16:0"},"nodeType":"ModifierInvocation","src":"1170:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1134:24:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"1158:2:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"1187:0:0"},"scope":132,"src":"1125:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":45,"nodeType":"Block","src":"1345:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":41,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"1355:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":43,"nodeType":"ExpressionStatement","src":"1355:13:0"},{"id":44,"nodeType":"PlaceholderStatement","src":"1378:1:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"1242:77:0","text":" @dev Throws if called by any account other than the owner."},"id":46,"name":"onlyOwner","nameLocation":"1333:9:0","nodeType":"ModifierDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"1342:2:0"},"src":"1324:62:0","virtual":false,"visibility":"internal"},{"body":{"id":54,"nodeType":"Block","src":"1517:30:0","statements":[{"expression":{"id":52,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":51,"id":53,"nodeType":"Return","src":"1527:13:0"}]},"documentation":{"id":47,"nodeType":"StructuredDocumentation","src":"1392:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":55,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1471:5:0","nodeType":"FunctionDefinition","parameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"1476:2:0"},"returnParameters":{"id":51,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":55,"src":"1508:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1507:9:0"},"scope":132,"src":"1462:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":68,"nodeType":"Block","src":"1665:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":60,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"1683:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":62,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"1694:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1683:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1708:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":59,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1675:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67,"nodeType":"ExpressionStatement","src":"1675:68:0"}]},"documentation":{"id":56,"nodeType":"StructuredDocumentation","src":"1553:62:0","text":" @dev Throws if the sender is not the owner."},"id":69,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1629:11:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1640:2:0"},"returnParameters":{"id":58,"nodeType":"ParameterList","parameters":[],"src":"1665:0:0"},"scope":132,"src":"1620:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":82,"nodeType":"Block","src":"2139:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":77,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2168:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":76,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:0","typeDescriptions":{}}},"id":79,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":75,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2149:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":80,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2149:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":81,"nodeType":"ExpressionStatement","src":"2149:30:0"}]},"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"1756:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":83,"implemented":true,"kind":"function","modifiers":[{"id":73,"kind":"modifierInvocation","modifierName":{"id":72,"name":"onlyOwner","nameLocations":["2129:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"2129:9:0"},"nodeType":"ModifierInvocation","src":"2129:9:0"}],"name":"renounceOwnership","nameLocation":"2094:17:0","nodeType":"FunctionDefinition","parameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"2111:2:0"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"2139:0:0"},"scope":132,"src":"2085:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":105,"nodeType":"Block","src":"2405:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":92,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"2423:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":94,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2435:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2435:7:0","typeDescriptions":{}}},"id":96,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2435:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2423:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":98,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2447:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":91,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2415:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":100,"nodeType":"ExpressionStatement","src":"2415:73:0"},{"expression":{"arguments":[{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"2517:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":101,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2498:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":104,"nodeType":"ExpressionStatement","src":"2498:28:0"}]},"documentation":{"id":84,"nodeType":"StructuredDocumentation","src":"2192:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":106,"implemented":true,"kind":"function","modifiers":[{"id":89,"kind":"modifierInvocation","modifierName":{"id":88,"name":"onlyOwner","nameLocations":["2395:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"2395:9:0"},"nodeType":"ModifierInvocation","src":"2395:9:0"}],"name":"transferOwnership","nameLocation":"2344:17:0","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"newOwner","nameLocation":"2370:8:0","nodeType":"VariableDeclaration","scope":106,"src":"2362:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2361:18:0"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[],"src":"2405:0:0"},"scope":132,"src":"2335:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2750:124:0","statements":[{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"oldOwner","nameLocation":"2768:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2760:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"2760:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":115,"initialValue":{"id":114,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2779:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2760:25:0"},{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":116,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2795:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":117,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2804:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2795:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":119,"nodeType":"ExpressionStatement","src":"2795:17:0"},{"eventCall":{"arguments":[{"id":121,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"2848:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2858:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":120,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"2827:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"EmitStatement","src":"2822:45:0"}]},"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"2539:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":126,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2696:18:0","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"newOwner","nameLocation":"2723:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2715:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2714:18:0"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2750:0:0"},"scope":132,"src":"2687:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2880:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":131,"mutability":"mutable","name":"__gap","nameLocation":"3159:5:0","nodeType":"VariableDeclaration","scope":132,"src":"3139:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"3139:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":130,"length":{"hexValue":"3439","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3139:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":133,"src":"729:2438:0","usedErrors":[]}],"src":"102:3066:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1249],"Initializable":[301]},"id":302,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":134,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":302,"sourceUnit":1250,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":301,"linearizedBaseContracts":[301],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":139,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":301,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":138,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":140,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":142,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":301,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":141,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":147,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":147,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":144,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":202,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[151],"declarations":[{"constant":false,"id":151,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":202,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":150,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":154,"initialValue":{"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":152,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":157,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":161,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":166,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$301","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$301","typeString":"contract Initializable"}],"id":165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":162,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1249_$","typeString":"type(library AddressUpgradeable)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":937,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":170,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":155,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":178,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":179,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":182,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":183,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":189,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":188,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":184,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":190,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":191,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":201,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":200,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":192,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":195,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":196,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":203,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":235,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":209,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":212,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":208,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":218,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":219,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":221,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":222,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":225,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":226,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":227,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":230,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":232,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":231,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":234,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":204,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":236,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":236,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":205,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":245,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":240,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":243,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":244,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":246,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":281,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":251,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":255,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":256,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":258,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":257,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":280,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":279,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":263,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":265,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":264,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":270,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":273,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":272,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":271,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":282,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":249,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":301,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":288,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":287,"id":289,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":291,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":285,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":301,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":299,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":297,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":296,"id":298,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":300,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":300,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":294,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":301,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":302,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1300],"Initializable":[301],"PausableUpgradeable":[429]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":303,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":430,"sourceUnit":1301,"src":"130:41:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":430,"sourceUnit":302,"src":"172:63:2","symbolAliases":[{"foreign":{"id":305,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"180:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":308,"name":"Initializable","nameLocations":["718:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":301,"src":"718:13:2"},"id":309,"nodeType":"InheritanceSpecifier","src":"718:13:2"},{"baseName":{"id":310,"name":"ContextUpgradeable","nameLocations":["733:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":1300,"src":"733:18:2"},"id":311,"nodeType":"InheritanceSpecifier","src":"733:18:2"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"237:439:2","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":429,"linearizedBaseContracts":[429,1300,301],"name":"PausableUpgradeable","nameLocation":"695:19:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":312,"nodeType":"StructuredDocumentation","src":"758:73:2","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":316,"name":"Paused","nameLocation":"842:6:2","nodeType":"EventDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"857:7:2","nodeType":"VariableDeclaration","scope":316,"src":"849:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":313,"name":"address","nodeType":"ElementaryTypeName","src":"849:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"848:17:2"},"src":"836:30:2"},{"anonymous":false,"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"872:70:2","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":321,"name":"Unpaused","nameLocation":"953:8:2","nodeType":"EventDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"970:7:2","nodeType":"VariableDeclaration","scope":321,"src":"962:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"962:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"961:17:2"},"src":"947:32:2"},{"constant":false,"id":323,"mutability":"mutable","name":"_paused","nameLocation":"998:7:2","nodeType":"VariableDeclaration","scope":429,"src":"985:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":322,"name":"bool","nodeType":"ElementaryTypeName","src":"985:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":332,"nodeType":"Block","src":"1137:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":329,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"1147:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1147:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"ExpressionStatement","src":"1147:27:2"}]},"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"1012:67:2","text":" @dev Initializes the contract in unpaused state."},"id":333,"implemented":true,"kind":"function","modifiers":[{"id":327,"kind":"modifierInvocation","modifierName":{"id":326,"name":"onlyInitializing","nameLocations":["1120:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"1120:16:2"},"nodeType":"ModifierInvocation","src":"1120:16:2"}],"name":"__Pausable_init","nameLocation":"1093:15:2","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[],"src":"1108:2:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[],"src":"1137:0:2"},"scope":429,"src":"1084:97:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":342,"nodeType":"Block","src":"1250:32:2","statements":[{"expression":{"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":338,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"1260:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1270:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1260:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":341,"nodeType":"ExpressionStatement","src":"1260:15:2"}]},"id":343,"implemented":true,"kind":"function","modifiers":[{"id":336,"kind":"modifierInvocation","modifierName":{"id":335,"name":"onlyInitializing","nameLocations":["1233:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"1233:16:2"},"nodeType":"ModifierInvocation","src":"1233:16:2"}],"name":"__Pausable_init_unchained","nameLocation":"1196:25:2","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[],"src":"1221:2:2"},"returnParameters":{"id":337,"nodeType":"ParameterList","parameters":[],"src":"1250:0:2"},"scope":429,"src":"1187:95:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"1493:47:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":346,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1503:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1503:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"1503:19:2"},{"id":349,"nodeType":"PlaceholderStatement","src":"1532:1:2"}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"1288:175:2","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":351,"name":"whenNotPaused","nameLocation":"1477:13:2","nodeType":"ModifierDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"1490:2:2"},"src":"1468:72:2","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"1740:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":354,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"1750:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":356,"nodeType":"ExpressionStatement","src":"1750:16:2"},{"id":357,"nodeType":"PlaceholderStatement","src":"1776:1:2"}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"1546:167:2","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":359,"name":"whenPaused","nameLocation":"1727:10:2","nodeType":"ModifierDefinition","parameters":{"id":353,"nodeType":"ParameterList","parameters":[],"src":"1737:2:2"},"src":"1718:66:2","virtual":false,"visibility":"internal"},{"body":{"id":367,"nodeType":"Block","src":"1932:31:2","statements":[{"expression":{"id":365,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"1949:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":364,"id":366,"nodeType":"Return","src":"1942:14:2"}]},"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"1790:84:2","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":368,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1888:6:2","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"1894:2:2"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":368,"src":"1926:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":362,"name":"bool","nodeType":"ElementaryTypeName","src":"1926:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1925:6:2"},"scope":429,"src":"1879:84:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":379,"nodeType":"Block","src":"2082:55:2","statements":[{"expression":{"arguments":[{"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2100:9:2","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":373,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2101:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2101:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2111:18:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":372,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2092:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":378,"nodeType":"ExpressionStatement","src":"2092:38:2"}]},"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"1969:57:2","text":" @dev Throws if the contract is paused."},"id":380,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2040:17:2","nodeType":"FunctionDefinition","parameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"2057:2:2"},"returnParameters":{"id":371,"nodeType":"ParameterList","parameters":[],"src":"2082:0:2"},"scope":429,"src":"2031:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":390,"nodeType":"Block","src":"2257:58:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":385,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2275:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2285:22:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2267:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":389,"nodeType":"ExpressionStatement","src":"2267:41:2"}]},"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"2143:61:2","text":" @dev Throws if the contract is not paused."},"id":391,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2218:14:2","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[],"src":"2232:2:2"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[],"src":"2257:0:2"},"scope":429,"src":"2209:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":406,"nodeType":"Block","src":"2499:66:2","statements":[{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":397,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"2509:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2519:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2509:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"2509:14:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":402,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"2545:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":401,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"2538:6:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2538:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"EmitStatement","src":"2533:25:2"}]},"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2321:124:2","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":407,"implemented":true,"kind":"function","modifiers":[{"id":395,"kind":"modifierInvocation","modifierName":{"id":394,"name":"whenNotPaused","nameLocations":["2485:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":351,"src":"2485:13:2"},"nodeType":"ModifierInvocation","src":"2485:13:2"}],"name":"_pause","nameLocation":"2459:6:2","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[],"src":"2465:2:2"},"returnParameters":{"id":396,"nodeType":"ParameterList","parameters":[],"src":"2499:0:2"},"scope":429,"src":"2450:115:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":422,"nodeType":"Block","src":"2745:69:2","statements":[{"expression":{"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":413,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"2755:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2765:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2755:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":416,"nodeType":"ExpressionStatement","src":"2755:15:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":418,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"2794:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":417,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"2785:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2785:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"EmitStatement","src":"2780:27:2"}]},"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"2571:121:2","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":423,"implemented":true,"kind":"function","modifiers":[{"id":411,"kind":"modifierInvocation","modifierName":{"id":410,"name":"whenPaused","nameLocations":["2734:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2734:10:2"},"nodeType":"ModifierInvocation","src":"2734:10:2"}],"name":"_unpause","nameLocation":"2706:8:2","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"2714:2:2"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[],"src":"2745:0:2"},"scope":429,"src":"2697:117:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"2820:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":428,"mutability":"mutable","name":"__gap","nameLocation":"3099:5:2","nodeType":"VariableDeclaration","scope":429,"src":"3079:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3079:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":427,"length":{"hexValue":"3439","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3087:2:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3079:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":430,"src":"677:2430:2","usedErrors":[]}],"src":"105:3003:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[507]},"id":508,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":431,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"131:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":507,"linearizedBaseContracts":[507],"name":"IERC20Upgradeable","nameLocation":"212:17:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"236:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":441,"name":"Transfer","nameLocation":"405:8:3","nodeType":"EventDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:3","nodeType":"VariableDeclaration","scope":441,"src":"414:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:3","nodeType":"VariableDeclaration","scope":441,"src":"436:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":436,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":439,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:3","nodeType":"VariableDeclaration","scope":441,"src":"456:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:3"},"src":"399:72:3"},{"anonymous":false,"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"477:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":450,"name":"Approval","nameLocation":"636:8:3","nodeType":"EventDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:3","nodeType":"VariableDeclaration","scope":450,"src":"645:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":446,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:3","nodeType":"VariableDeclaration","scope":450,"src":"668:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":445,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":448,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:3","nodeType":"VariableDeclaration","scope":450,"src":"693:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":447,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:3"},"src":"630:78:3"},{"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"714:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":456,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:3","nodeType":"FunctionDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[],"src":"805:2:3"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":456,"src":"831:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:3"},"scope":507,"src":"785:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"846:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":464,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:3","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"account","nameLocation":"950:7:3","nodeType":"VariableDeclaration","scope":464,"src":"942:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:3"},"returnParameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":464,"src":"982:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:3"},"scope":507,"src":"923:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"997:202:3","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":474,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:3","nodeType":"FunctionDefinition","parameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"to","nameLocation":"1230:2:3","nodeType":"VariableDeclaration","scope":474,"src":"1222:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":466,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"amount","nameLocation":"1242:6:3","nodeType":"VariableDeclaration","scope":474,"src":"1234:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:3"},"returnParameters":{"id":473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":474,"src":"1268:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":471,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:3"},"scope":507,"src":"1204:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"1280:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":484,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:3","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"owner","nameLocation":"1576:5:3","nodeType":"VariableDeclaration","scope":484,"src":"1568:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"spender","nameLocation":"1591:7:3","nodeType":"VariableDeclaration","scope":484,"src":"1583:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:3"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"1623:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:3"},"scope":507,"src":"1549:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"1638:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":494,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:3","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"spender","nameLocation":"2310:7:3","nodeType":"VariableDeclaration","scope":494,"src":"2302:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":486,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"amount","nameLocation":"2327:6:3","nodeType":"VariableDeclaration","scope":494,"src":"2319:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:3"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":494,"src":"2353:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":491,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:3"},"scope":507,"src":"2285:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"2365:287:3","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":506,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:3","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":506,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":496,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":499,"mutability":"mutable","name":"to","nameLocation":"2701:2:3","nodeType":"VariableDeclaration","scope":506,"src":"2693:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":498,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"amount","nameLocation":"2713:6:3","nodeType":"VariableDeclaration","scope":506,"src":"2705:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:3"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":506,"src":"2739:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":503,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:3"},"scope":507,"src":"2657:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":508,"src":"202:2545:3","usedErrors":[]}],"src":"106:2642:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[543]},"id":544,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":509,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"148:1963:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":543,"linearizedBaseContracts":[543],"name":"IERC20PermitUpgradeable","nameLocation":"2122:23:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":511,"nodeType":"StructuredDocumentation","src":"2152:850:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":528,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3016:6:4","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"owner","nameLocation":"3040:5:4","nodeType":"VariableDeclaration","scope":528,"src":"3032:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"3032:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"spender","nameLocation":"3063:7:4","nodeType":"VariableDeclaration","scope":528,"src":"3055:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"value","nameLocation":"3088:5:4","nodeType":"VariableDeclaration","scope":528,"src":"3080:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"3080:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"deadline","nameLocation":"3111:8:4","nodeType":"VariableDeclaration","scope":528,"src":"3103:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"v","nameLocation":"3135:1:4","nodeType":"VariableDeclaration","scope":528,"src":"3129:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":520,"name":"uint8","nodeType":"ElementaryTypeName","src":"3129:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"r","nameLocation":"3154:1:4","nodeType":"VariableDeclaration","scope":528,"src":"3146:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3146:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"s","nameLocation":"3173:1:4","nodeType":"VariableDeclaration","scope":528,"src":"3165:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3165:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3022:158:4"},"returnParameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"3189:0:4"},"scope":543,"src":"3007:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":529,"nodeType":"StructuredDocumentation","src":"3196:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":536,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3504:6:4","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":531,"mutability":"mutable","name":"owner","nameLocation":"3519:5:4","nodeType":"VariableDeclaration","scope":536,"src":"3511:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"3511:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3510:15:4"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":536,"src":"3549:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":533,"name":"uint256","nodeType":"ElementaryTypeName","src":"3549:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3548:9:4"},"scope":543,"src":"3495:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"3564:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":542,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3759:16:4","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[],"src":"3775:2:4"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":542,"src":"3801:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":539,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3801:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3800:9:4"},"scope":543,"src":"3750:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":544,"src":"2112:1700:4","usedErrors":[]}],"src":"123:3690:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1249],"IERC20PermitUpgradeable":[543],"IERC20Upgradeable":[507],"SafeERC20Upgradeable":[919]},"id":920,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":545,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":920,"sourceUnit":508,"src":"140:34:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":920,"sourceUnit":544,"src":"175:51:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":920,"sourceUnit":1250,"src":"227:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"276:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":919,"linearizedBaseContracts":[919],"name":"SafeERC20Upgradeable","nameLocation":"742:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":552,"libraryName":{"id":550,"name":"AddressUpgradeable","nameLocations":["775:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1249,"src":"775:18:5"},"nodeType":"UsingForDirective","src":"769:37:5","typeName":{"id":551,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":575,"nodeType":"Block","src":"1079:103:5","statements":[{"expression":{"arguments":[{"id":564,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"1109:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":567,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"1139:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:5","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":474,"src":"1139:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":570,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"1164:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"1168:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":565,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":563,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"1089:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":574,"nodeType":"ExpressionStatement","src":"1089:86:5"}]},"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"812:179:5","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":576,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:5","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":556,"mutability":"mutable","name":"token","nameLocation":"1036:5:5","nodeType":"VariableDeclaration","scope":576,"src":"1018:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":555,"nodeType":"UserDefinedTypeName","pathNode":{"id":554,"name":"IERC20Upgradeable","nameLocations":["1018:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"1018:17:5"},"referencedDeclaration":507,"src":"1018:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"to","nameLocation":"1051:2:5","nodeType":"VariableDeclaration","scope":576,"src":"1043:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"value","nameLocation":"1063:5:5","nodeType":"VariableDeclaration","scope":576,"src":"1055:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:5"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"1079:0:5"},"scope":919,"src":"996:186:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":602,"nodeType":"Block","src":"1522:113:5","statements":[{"expression":{"arguments":[{"id":590,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"1552:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":593,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"1582:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:5","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":506,"src":"1582:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":596,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"1611:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":597,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"1617:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"1621:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":591,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":589,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"1532:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":601,"nodeType":"ExpressionStatement","src":"1532:96:5"}]},"documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"1188:228:5","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":603,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:5","nodeType":"FunctionDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"token","nameLocation":"1465:5:5","nodeType":"VariableDeclaration","scope":603,"src":"1447:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":579,"nodeType":"UserDefinedTypeName","pathNode":{"id":578,"name":"IERC20Upgradeable","nameLocations":["1447:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"1447:17:5"},"referencedDeclaration":507,"src":"1447:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"from","nameLocation":"1480:4:5","nodeType":"VariableDeclaration","scope":603,"src":"1472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":581,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"to","nameLocation":"1494:2:5","nodeType":"VariableDeclaration","scope":603,"src":"1486:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"value","nameLocation":"1506:5:5","nodeType":"VariableDeclaration","scope":603,"src":"1498:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:5"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[],"src":"1522:0:5"},"scope":919,"src":"1421:214:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"1982:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2231:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":623,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}],"id":622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":621,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:5","typeDescriptions":{}}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":625,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2278:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":619,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2247:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":484,"src":"2247:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":633,"nodeType":"ExpressionStatement","src":"2209:163:5"},{"expression":{"arguments":[{"id":635,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2402:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":638,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2432:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":494,"src":"2432:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":641,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2456:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2465:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":636,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":634,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2382:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":645,"nodeType":"ExpressionStatement","src":"2382:90:5"}]},"documentation":{"id":604,"nodeType":"StructuredDocumentation","src":"1641:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:5","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"token","nameLocation":"1934:5:5","nodeType":"VariableDeclaration","scope":647,"src":"1916:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":606,"nodeType":"UserDefinedTypeName","pathNode":{"id":605,"name":"IERC20Upgradeable","nameLocations":["1916:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"1916:17:5"},"referencedDeclaration":507,"src":"1916:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"spender","nameLocation":"1949:7:5","nodeType":"VariableDeclaration","scope":647,"src":"1941:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"value","nameLocation":"1966:5:5","nodeType":"VariableDeclaration","scope":647,"src":"1958:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:5"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[],"src":"1982:0:5"},"scope":919,"src":"1895:584:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":683,"nodeType":"Block","src":"2767:194:5","statements":[{"assignments":[659],"declarations":[{"constant":false,"id":659,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:5","nodeType":"VariableDeclaration","scope":683,"src":"2777:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":668,"initialValue":{"arguments":[{"arguments":[{"id":664,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}],"id":663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:5","typeDescriptions":{}}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":666,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"2831:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":660,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2800:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":484,"src":"2800:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:5"},{"expression":{"arguments":[{"id":670,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2869:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":673,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":494,"src":"2899:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":676,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"2923:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":677,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"2932:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"2947:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":671,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":669,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2849:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":682,"nodeType":"ExpressionStatement","src":"2849:105:5"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"2485:180:5","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":684,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:5","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"token","nameLocation":"2719:5:5","nodeType":"VariableDeclaration","scope":684,"src":"2701:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":650,"nodeType":"UserDefinedTypeName","pathNode":{"id":649,"name":"IERC20Upgradeable","nameLocations":["2701:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"2701:17:5"},"referencedDeclaration":507,"src":"2701:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"spender","nameLocation":"2734:7:5","nodeType":"VariableDeclaration","scope":684,"src":"2726:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"value","nameLocation":"2751:5:5","nodeType":"VariableDeclaration","scope":684,"src":"2743:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":654,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:5"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"2767:0:5"},"scope":919,"src":"2670:291:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":728,"nodeType":"Block","src":"3249:321:5","statements":[{"id":727,"nodeType":"UncheckedBlock","src":"3259:305:5","statements":[{"assignments":[696],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:5","nodeType":"VariableDeclaration","scope":727,"src":"3283:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":695,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":705,"initialValue":{"arguments":[{"arguments":[{"id":701,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$919","typeString":"library SafeERC20Upgradeable"}],"id":700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:5","typeDescriptions":{}}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":703,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3337:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":697,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3306:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":484,"src":"3306:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":707,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"3367:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3383:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":706,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":712,"nodeType":"ExpressionStatement","src":"3359:75:5"},{"expression":{"arguments":[{"id":714,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3468:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":717,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3498:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":494,"src":"3498:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:5","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":720,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3522:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":721,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"3531:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":722,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3546:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":715,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":713,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"3448:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":726,"nodeType":"ExpressionStatement","src":"3448:105:5"}]}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"2967:180:5","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":729,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:5","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"token","nameLocation":"3201:5:5","nodeType":"VariableDeclaration","scope":729,"src":"3183:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":687,"nodeType":"UserDefinedTypeName","pathNode":{"id":686,"name":"IERC20Upgradeable","nameLocations":["3183:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"3183:17:5"},"referencedDeclaration":507,"src":"3183:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"spender","nameLocation":"3216:7:5","nodeType":"VariableDeclaration","scope":729,"src":"3208:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"value","nameLocation":"3233:5:5","nodeType":"VariableDeclaration","scope":729,"src":"3225:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:5"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"3249:0:5"},"scope":919,"src":"3152:418:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":775,"nodeType":"Block","src":"3977:333:5","statements":[{"assignments":[741],"declarations":[{"constant":false,"id":741,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:5","nodeType":"VariableDeclaration","scope":775,"src":"3987:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":740,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":750,"initialValue":{"arguments":[{"expression":{"expression":{"id":744,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4038:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":494,"src":"4038:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":747,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4062:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4071:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":742,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:5"},{"condition":{"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:5","subExpression":{"arguments":[{"id":752,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4117:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"id":753,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4124:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":751,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"4093:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":774,"nodeType":"IfStatement","src":"4088:216:5","trueBody":{"id":773,"nodeType":"Block","src":"4139:165:5","statements":[{"expression":{"arguments":[{"id":757,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4173:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":760,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4203:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":494,"src":"4203:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":763,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4227:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":758,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":756,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"4153:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"4153:86:5"},{"expression":{"arguments":[{"id":769,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4273:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},{"id":770,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4280:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":768,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"4253:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$507_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"ExpressionStatement","src":"4253:40:5"}]}}]},"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"3576:308:5","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":776,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:5","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"token","nameLocation":"3929:5:5","nodeType":"VariableDeclaration","scope":776,"src":"3911:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":732,"nodeType":"UserDefinedTypeName","pathNode":{"id":731,"name":"IERC20Upgradeable","nameLocations":["3911:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"3911:17:5"},"referencedDeclaration":507,"src":"3911:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"spender","nameLocation":"3944:7:5","nodeType":"VariableDeclaration","scope":776,"src":"3936:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":734,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"value","nameLocation":"3961:5:5","nodeType":"VariableDeclaration","scope":776,"src":"3953:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:5"},"returnParameters":{"id":739,"nodeType":"ParameterList","parameters":[],"src":"3977:0:5"},"scope":919,"src":"3889:421:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":832,"nodeType":"Block","src":"4688:257:5","statements":[{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:5","nodeType":"VariableDeclaration","scope":832,"src":"4698:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":803,"initialValue":{"arguments":[{"id":801,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4733:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":799,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4720:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$543","typeString":"contract IERC20PermitUpgradeable"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":536,"src":"4720:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:5"},{"expression":{"arguments":[{"id":807,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4762:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":808,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"4769:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4778:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":810,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"4785:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":811,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"4795:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":812,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"4798:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":813,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"4801:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":804,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4749:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$543","typeString":"contract IERC20PermitUpgradeable"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:5","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":528,"src":"4749:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":815,"nodeType":"ExpressionStatement","src":"4749:54:5"},{"assignments":[817],"declarations":[{"constant":false,"id":817,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:5","nodeType":"VariableDeclaration","scope":832,"src":"4813:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":822,"initialValue":{"arguments":[{"id":820,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"4847:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":818,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4834:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$543","typeString":"contract IERC20PermitUpgradeable"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":536,"src":"4834:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"4871:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":825,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"4885:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":823,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"4863:75:5"}]},"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"4316:141:5","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":833,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:5","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"token","nameLocation":"4515:5:5","nodeType":"VariableDeclaration","scope":833,"src":"4491:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$543","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":779,"nodeType":"UserDefinedTypeName","pathNode":{"id":778,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:5"],"nodeType":"IdentifierPath","referencedDeclaration":543,"src":"4491:23:5"},"referencedDeclaration":543,"src":"4491:23:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$543","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"owner","nameLocation":"4538:5:5","nodeType":"VariableDeclaration","scope":833,"src":"4530:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"spender","nameLocation":"4561:7:5","nodeType":"VariableDeclaration","scope":833,"src":"4553:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"value","nameLocation":"4586:5:5","nodeType":"VariableDeclaration","scope":833,"src":"4578:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":788,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:5","nodeType":"VariableDeclaration","scope":833,"src":"4601:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"v","nameLocation":"4633:1:5","nodeType":"VariableDeclaration","scope":833,"src":"4627:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":789,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"r","nameLocation":"4652:1:5","nodeType":"VariableDeclaration","scope":833,"src":"4644:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"s","nameLocation":"4671:1:5","nodeType":"VariableDeclaration","scope":833,"src":"4663:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:5"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[],"src":"4688:0:5"},"scope":919,"src":"4462:483:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":869,"nodeType":"Block","src":"5409:572:5","statements":[{"assignments":[843],"declarations":[{"constant":false,"id":843,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:5","nodeType":"VariableDeclaration","scope":869,"src":"5758:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":842,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":852,"initialValue":{"arguments":[{"id":849,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"5812:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":846,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"5792:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}],"id":845,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:5","typeDescriptions":{}}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:5","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"5784:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":854,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"5871:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:5","memberName":"length","nodeType":"MemberAccess","src":"5871:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":860,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"5908:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":861,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:5","typeDescriptions":{}}}],"id":863,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":858,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:5","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"ExpressionStatement","src":"5863:111:5"}]},"documentation":{"id":834,"nodeType":"StructuredDocumentation","src":"4951:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":870,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:5","nodeType":"FunctionDefinition","parameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"token","nameLocation":"5375:5:5","nodeType":"VariableDeclaration","scope":870,"src":"5357:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":836,"nodeType":"UserDefinedTypeName","pathNode":{"id":835,"name":"IERC20Upgradeable","nameLocations":["5357:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"5357:17:5"},"referencedDeclaration":507,"src":"5357:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"data","nameLocation":"5395:4:5","nodeType":"VariableDeclaration","scope":870,"src":"5382:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":838,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:5"},"returnParameters":{"id":841,"nodeType":"ParameterList","parameters":[],"src":"5409:0:5"},"scope":919,"src":"5328:653:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":917,"nodeType":"Block","src":"6582:516:5","statements":[{"assignments":[882,884],"declarations":[{"constant":false,"id":882,"mutability":"mutable","name":"success","nameLocation":"6883:7:5","nodeType":"VariableDeclaration","scope":917,"src":"6878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":881,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:5","nodeType":"VariableDeclaration","scope":917,"src":"6892:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":883,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":892,"initialValue":{"arguments":[{"id":890,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"6939:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":887,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6927:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}],"id":886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:5","typeDescriptions":{}}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:5","memberName":"call","nodeType":"MemberAccess","src":"6919:19:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":893,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"6973:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":894,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"6985:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:5","memberName":"length","nodeType":"MemberAccess","src":"6985:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":900,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"7022:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":901,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:5","typeDescriptions":{}}}],"id":903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":898,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:5","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":906,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":912,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"7084:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}],"id":911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:5","typeDescriptions":{}}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":908,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"7046:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1249_$","typeString":"type(library AddressUpgradeable)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":937,"src":"7046:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":880,"id":916,"nodeType":"Return","src":"6954:137:5"}]},"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"5987:490:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":918,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:5","nodeType":"FunctionDefinition","parameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"token","nameLocation":"6533:5:5","nodeType":"VariableDeclaration","scope":918,"src":"6515:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"},"typeName":{"id":873,"nodeType":"UserDefinedTypeName","pathNode":{"id":872,"name":"IERC20Upgradeable","nameLocations":["6515:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":507,"src":"6515:17:5"},"referencedDeclaration":507,"src":"6515:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$507","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"data","nameLocation":"6553:4:5","nodeType":"VariableDeclaration","scope":918,"src":"6540:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":875,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:5"},"returnParameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":918,"src":"6576:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":878,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:5"},"scope":919,"src":"6482:616:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":920,"src":"734:6366:5","usedErrors":[]}],"src":"115:6986:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1249]},"id":1250,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":921,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1249,"linearizedBaseContracts":[1249],"name":"AddressUpgradeable","nameLocation":"202:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":936,"nodeType":"Block","src":"1489:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":930,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:6","memberName":"code","nodeType":"MemberAccess","src":"1713:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:6","memberName":"length","nodeType":"MemberAccess","src":"1713:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":929,"id":935,"nodeType":"Return","src":"1706:30:6"}]},"documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"227:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":937,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:6","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":925,"mutability":"mutable","name":"account","nameLocation":"1451:7:6","nodeType":"VariableDeclaration","scope":937,"src":"1443:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:6"},"returnParameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":937,"src":"1483:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":927,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:6"},"scope":1249,"src":"1423:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":970,"nodeType":"Block","src":"2729:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":948,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1249","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1249","typeString":"library AddressUpgradeable"}],"id":947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:6","typeDescriptions":{}}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":951,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"2772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":945,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":955,"nodeType":"ExpressionStatement","src":"2739:73:6"},{"assignments":[957,null],"declarations":[{"constant":false,"id":957,"mutability":"mutable","name":"success","nameLocation":"2829:7:6","nodeType":"VariableDeclaration","scope":970,"src":"2824:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":956,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":964,"initialValue":{"arguments":[{"hexValue":"","id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":958,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2842:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:6","memberName":"call","nodeType":"MemberAccess","src":"2842:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":960,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"2864:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:6"},{"expression":{"arguments":[{"id":966,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"2893:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":965,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":969,"nodeType":"ExpressionStatement","src":"2885:78:6"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"1749:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":971,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:6","nodeType":"FunctionDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:6","nodeType":"VariableDeclaration","scope":971,"src":"2677:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"amount","nameLocation":"2712:6:6","nodeType":"VariableDeclaration","scope":971,"src":"2704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:6"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":1249,"src":"2658:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":988,"nodeType":"Block","src":"3801:96:6","statements":[{"expression":{"arguments":[{"id":982,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3840:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":983,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"3848:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":981,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1029,1073],"referencedDeclaration":1073,"src":"3818:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":980,"id":987,"nodeType":"Return","src":"3811:79:6"}]},"documentation":{"id":972,"nodeType":"StructuredDocumentation","src":"2976:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":989,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:6","nodeType":"FunctionDefinition","parameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"target","nameLocation":"3742:6:6","nodeType":"VariableDeclaration","scope":989,"src":"3734:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":973,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"data","nameLocation":"3763:4:6","nodeType":"VariableDeclaration","scope":989,"src":"3750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":975,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:6"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":989,"src":"3787:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":978,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:6"},"scope":1249,"src":"3712:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"4266:76:6","statements":[{"expression":{"arguments":[{"id":1002,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"4305:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1003,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1005,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"4322:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1001,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1029,1073],"referencedDeclaration":1073,"src":"4283:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1000,"id":1007,"nodeType":"Return","src":"4276:59:6"}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"3903:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:6","nodeType":"FunctionDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"target","nameLocation":"4158:6:6","nodeType":"VariableDeclaration","scope":1009,"src":"4150:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"data","nameLocation":"4187:4:6","nodeType":"VariableDeclaration","scope":1009,"src":"4174:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":993,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:6","nodeType":"VariableDeclaration","scope":1009,"src":"4201:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":995,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:6"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1009,"src":"4252:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":998,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:6"},"scope":1249,"src":"4119:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1028,"nodeType":"Block","src":"4817:111:6","statements":[{"expression":{"arguments":[{"id":1022,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4856:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1023,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1024,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"4870:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1021,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1029,1073],"referencedDeclaration":1073,"src":"4834:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1020,"id":1027,"nodeType":"Return","src":"4827:94:6"}]},"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"4348:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1029,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:6","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"target","nameLocation":"4743:6:6","nodeType":"VariableDeclaration","scope":1029,"src":"4735:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"data","nameLocation":"4764:4:6","nodeType":"VariableDeclaration","scope":1029,"src":"4751:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1013,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"value","nameLocation":"4778:5:6","nodeType":"VariableDeclaration","scope":1029,"src":"4770:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1015,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:6"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1029,"src":"4803:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1018,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:6"},"scope":1249,"src":"4704:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1072,"nodeType":"Block","src":"5355:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1046,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1249","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1249","typeString":"library AddressUpgradeable"}],"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1044,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:6","typeDescriptions":{}}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1049,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"5398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1053,"nodeType":"ExpressionStatement","src":"5365:81:6"},{"assignments":[1055,1057],"declarations":[{"constant":false,"id":1055,"mutability":"mutable","name":"success","nameLocation":"5462:7:6","nodeType":"VariableDeclaration","scope":1072,"src":"5457:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1054,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:6","nodeType":"VariableDeclaration","scope":1072,"src":"5471:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1056,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1064,"initialValue":{"arguments":[{"id":1062,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5524:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1058,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5498:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:6","memberName":"call","nodeType":"MemberAccess","src":"5498:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"5517:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:6"},{"expression":{"arguments":[{"id":1066,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"5573:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1067,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"5581:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1068,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"5590:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1069,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"5602:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1065,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"5546:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1042,"id":1071,"nodeType":"Return","src":"5539:76:6"}]},"documentation":{"id":1030,"nodeType":"StructuredDocumentation","src":"4934:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1073,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:6","nodeType":"FunctionDefinition","parameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"target","nameLocation":"5224:6:6","nodeType":"VariableDeclaration","scope":1073,"src":"5216:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"data","nameLocation":"5253:4:6","nodeType":"VariableDeclaration","scope":1073,"src":"5240:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1033,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"value","nameLocation":"5275:5:6","nodeType":"VariableDeclaration","scope":1073,"src":"5267:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1035,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1038,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:6","nodeType":"VariableDeclaration","scope":1073,"src":"5290:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1037,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:6"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1073,"src":"5341:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:6"},"scope":1249,"src":"5176:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1089,"nodeType":"Block","src":"5899:97:6","statements":[{"expression":{"arguments":[{"id":1084,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"5935:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1085,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"5943:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1083,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1090,1119],"referencedDeclaration":1119,"src":"5916:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1082,"id":1088,"nodeType":"Return","src":"5909:80:6"}]},"documentation":{"id":1074,"nodeType":"StructuredDocumentation","src":"5628:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1090,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:6","nodeType":"FunctionDefinition","parameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"target","nameLocation":"5835:6:6","nodeType":"VariableDeclaration","scope":1090,"src":"5827:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1075,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1078,"mutability":"mutable","name":"data","nameLocation":"5856:4:6","nodeType":"VariableDeclaration","scope":1090,"src":"5843:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1077,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:6"},"returnParameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1090,"src":"5885:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1080,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:6"},"scope":1249,"src":"5799:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"6338:168:6","statements":[{"assignments":[1103,1105],"declarations":[{"constant":false,"id":1103,"mutability":"mutable","name":"success","nameLocation":"6354:7:6","nodeType":"VariableDeclaration","scope":1118,"src":"6349:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1102,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:6","nodeType":"VariableDeclaration","scope":1118,"src":"6363:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1104,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1110,"initialValue":{"arguments":[{"id":1108,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"6408:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1106,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"6390:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:6"},{"expression":{"arguments":[{"id":1112,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"6457:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1113,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"6465:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1114,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"6474:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1115,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"6486:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1111,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"6430:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1101,"id":1117,"nodeType":"Return","src":"6423:76:6"}]},"documentation":{"id":1091,"nodeType":"StructuredDocumentation","src":"6002:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:6","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"target","nameLocation":"6225:6:6","nodeType":"VariableDeclaration","scope":1119,"src":"6217:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"data","nameLocation":"6254:4:6","nodeType":"VariableDeclaration","scope":1119,"src":"6241:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1094,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:6","nodeType":"VariableDeclaration","scope":1119,"src":"6268:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1096,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:6"},"returnParameters":{"id":1101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1119,"src":"6324:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1099,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:6"},"scope":1249,"src":"6180:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"6782:101:6","statements":[{"expression":{"arguments":[{"id":1130,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6820:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1131,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"6828:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1129,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1136,1165],"referencedDeclaration":1165,"src":"6799:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1128,"id":1134,"nodeType":"Return","src":"6792:84:6"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"6512:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:6","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"target","nameLocation":"6723:6:6","nodeType":"VariableDeclaration","scope":1136,"src":"6715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"data","nameLocation":"6744:4:6","nodeType":"VariableDeclaration","scope":1136,"src":"6731:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:6"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1136,"src":"6768:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:6"},"scope":1249,"src":"6685:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1164,"nodeType":"Block","src":"7224:170:6","statements":[{"assignments":[1149,1151],"declarations":[{"constant":false,"id":1149,"mutability":"mutable","name":"success","nameLocation":"7240:7:6","nodeType":"VariableDeclaration","scope":1164,"src":"7235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1148,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:6","nodeType":"VariableDeclaration","scope":1164,"src":"7249:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1150,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1156,"initialValue":{"arguments":[{"id":1154,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1152,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7276:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:6"},{"expression":{"arguments":[{"id":1158,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"7345:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"7353:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1160,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7362:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1161,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"7374:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1157,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"7318:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1147,"id":1163,"nodeType":"Return","src":"7311:76:6"}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"6889:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1165,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:6","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"target","nameLocation":"7116:6:6","nodeType":"VariableDeclaration","scope":1165,"src":"7108:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"data","nameLocation":"7145:4:6","nodeType":"VariableDeclaration","scope":1165,"src":"7132:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1140,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:6","nodeType":"VariableDeclaration","scope":1165,"src":"7159:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1142,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:6"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1165,"src":"7210:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1145,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:6"},"scope":1249,"src":"7069:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"7876:434:6","statements":[{"condition":{"id":1179,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"7890:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1201,"nodeType":"Block","src":"8246:58:6","statements":[{"expression":{"arguments":[{"id":1197,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"8268:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1198,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"8280:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1196,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"8260:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"ExpressionStatement","src":"8260:33:6"}]},"id":1202,"nodeType":"IfStatement","src":"7886:418:6","trueBody":{"id":1195,"nodeType":"Block","src":"7899:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1180,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"7917:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:6","memberName":"length","nodeType":"MemberAccess","src":"7917:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1192,"nodeType":"IfStatement","src":"7913:286:6","trueBody":{"id":1191,"nodeType":"Block","src":"7941:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1186,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8143:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1185,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"8132:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1184,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1190,"nodeType":"ExpressionStatement","src":"8124:60:6"}]}},{"expression":{"id":1193,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"8219:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1178,"id":1194,"nodeType":"Return","src":"8212:17:6"}]}}]},"documentation":{"id":1166,"nodeType":"StructuredDocumentation","src":"7400:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:6","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"target","nameLocation":"7735:6:6","nodeType":"VariableDeclaration","scope":1204,"src":"7727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"success","nameLocation":"7756:7:6","nodeType":"VariableDeclaration","scope":1204,"src":"7751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:6","nodeType":"VariableDeclaration","scope":1204,"src":"7773:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1171,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:6","nodeType":"VariableDeclaration","scope":1204,"src":"7806:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1173,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:6"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1204,"src":"7862:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1176,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:6"},"scope":1249,"src":"7682:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1227,"nodeType":"Block","src":"8691:135:6","statements":[{"condition":{"id":1216,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"8705:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1225,"nodeType":"Block","src":"8762:58:6","statements":[{"expression":{"arguments":[{"id":1221,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"8784:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1222,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"8796:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1220,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"8776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1224,"nodeType":"ExpressionStatement","src":"8776:33:6"}]},"id":1226,"nodeType":"IfStatement","src":"8701:119:6","trueBody":{"id":1219,"nodeType":"Block","src":"8714:42:6","statements":[{"expression":{"id":1217,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"8735:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1215,"id":1218,"nodeType":"Return","src":"8728:17:6"}]}}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"8316:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1228,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:6","nodeType":"FunctionDefinition","parameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"success","nameLocation":"8571:7:6","nodeType":"VariableDeclaration","scope":1228,"src":"8566:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1206,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:6","nodeType":"VariableDeclaration","scope":1228,"src":"8588:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1208,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:6","nodeType":"VariableDeclaration","scope":1228,"src":"8621:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1210,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:6"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1228,"src":"8677:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1213,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:6"},"scope":1249,"src":"8531:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1247,"nodeType":"Block","src":"8915:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1235,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"8991:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:6","memberName":"length","nodeType":"MemberAccess","src":"8991:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1245,"nodeType":"Block","src":"9321:45:6","statements":[{"expression":{"arguments":[{"id":1242,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"9342:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1241,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1244,"nodeType":"ExpressionStatement","src":"9335:20:6"}]},"id":1246,"nodeType":"IfStatement","src":"8987:379:6","trueBody":{"id":1240,"nodeType":"Block","src":"9014:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:6"},"nodeType":"YulFunctionCall","src":"9213:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:6"},"nodeType":"YulFunctionCall","src":"9254:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:6"},"nodeType":"YulFunctionCall","src":"9247:44:6"},"nodeType":"YulExpressionStatement","src":"9247:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1230,"isOffset":false,"isSlot":false,"src":"9219:10:6","valueSize":1},{"declaration":1230,"isOffset":false,"isSlot":false,"src":"9262:10:6","valueSize":1}],"id":1239,"nodeType":"InlineAssembly","src":"9163:142:6"}]}}]},"id":1248,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:6","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:6","nodeType":"VariableDeclaration","scope":1248,"src":"8849:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1229,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:6","nodeType":"VariableDeclaration","scope":1248,"src":"8874:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1231,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:6"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"8915:0:6"},"scope":1249,"src":"8832:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1250,"src":"194:9180:6","usedErrors":[]}],"src":"101:9274:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1300],"Initializable":[301]},"id":1301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1251,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1253,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1301,"sourceUnit":302,"src":"125:63:7","symbolAliases":[{"foreign":{"id":1252,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"133:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1255,"name":"Initializable","nameLocations":["727:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":301,"src":"727:13:7"},"id":1256,"nodeType":"InheritanceSpecifier","src":"727:13:7"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"190:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1300,"linearizedBaseContracts":[1300,301],"name":"ContextUpgradeable","nameLocation":"705:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1261,"nodeType":"Block","src":"799:7:7","statements":[]},"id":1262,"implemented":true,"kind":"function","modifiers":[{"id":1259,"kind":"modifierInvocation","modifierName":{"id":1258,"name":"onlyInitializing","nameLocations":["782:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"782:16:7"},"nodeType":"ModifierInvocation","src":"782:16:7"}],"name":"__Context_init","nameLocation":"756:14:7","nodeType":"FunctionDefinition","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[],"src":"770:2:7"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[],"src":"799:0:7"},"scope":1300,"src":"747:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1267,"nodeType":"Block","src":"874:7:7","statements":[]},"id":1268,"implemented":true,"kind":"function","modifiers":[{"id":1265,"kind":"modifierInvocation","modifierName":{"id":1264,"name":"onlyInitializing","nameLocations":["857:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":246,"src":"857:16:7"},"nodeType":"ModifierInvocation","src":"857:16:7"}],"name":"__Context_init_unchained","nameLocation":"821:24:7","nodeType":"FunctionDefinition","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[],"src":"845:2:7"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[],"src":"874:0:7"},"scope":1300,"src":"812:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"948:34:7","statements":[{"expression":{"expression":{"id":1273,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"969:6:7","memberName":"sender","nodeType":"MemberAccess","src":"965:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1272,"id":1275,"nodeType":"Return","src":"958:17:7"}]},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:7","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[],"src":"905:2:7"},"returnParameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1277,"src":"939:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1270,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:7"},"scope":1300,"src":"886:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1285,"nodeType":"Block","src":"1055:32:7","statements":[{"expression":{"expression":{"id":1282,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:4:7","memberName":"data","nodeType":"MemberAccess","src":"1072:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1281,"id":1284,"nodeType":"Return","src":"1065:15:7"}]},"id":1286,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:7","nodeType":"FunctionDefinition","parameters":{"id":1278,"nodeType":"ParameterList","parameters":[],"src":"1005:2:7"},"returnParameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1286,"src":"1039:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:7"},"scope":1300,"src":"988:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1293,"nodeType":"Block","src":"1165:25:7","statements":[{"expression":{"hexValue":"30","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1290,"id":1292,"nodeType":"Return","src":"1175:8:7"}]},"id":1294,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:7","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"1122:2:7"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1294,"src":"1156:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:7"},"scope":1300,"src":"1093:97:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1295,"nodeType":"StructuredDocumentation","src":"1196:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1299,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:7","nodeType":"VariableDeclaration","scope":1300,"src":"1455:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1298,"length":{"hexValue":"3530","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1301,"src":"687:796:7","usedErrors":[]}],"src":"101:1383:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2761],"SignedMathUpgradeable":[2866],"StringsUpgradeable":[1529]},"id":1530,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1530,"sourceUnit":2762,"src":"126:36:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1530,"sourceUnit":2867,"src":"163:42:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"207:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1529,"linearizedBaseContracts":[1529],"name":"StringsUpgradeable","nameLocation":"250:18:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1308,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:8","nodeType":"VariableDeclaration","scope":1529,"src":"275:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1306,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1311,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:8","nodeType":"VariableDeclaration","scope":1529,"src":"335:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1309,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1358,"nodeType":"Block","src":"551:636:8","statements":[{"id":1357,"nodeType":"UncheckedBlock","src":"561:620:8","statements":[{"assignments":[1320],"declarations":[{"constant":false,"id":1320,"mutability":"mutable","name":"length","nameLocation":"593:6:8","nodeType":"VariableDeclaration","scope":1357,"src":"585:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1327,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"624:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1321,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"602:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2761_$","typeString":"type(library MathUpgradeable)"}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2598,"src":"602:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:8"},{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"buffer","nameLocation":"662:6:8","nodeType":"VariableDeclaration","scope":1357,"src":"648:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1328,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1334,"initialValue":{"arguments":[{"id":1332,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"682:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1330,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:8"},{"assignments":[1336],"declarations":[{"constant":false,"id":1336,"mutability":"mutable","name":"ptr","nameLocation":"711:3:8","nodeType":"VariableDeclaration","scope":1357,"src":"703:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1337,"nodeType":"VariableDeclarationStatement","src":"703:11:8"},{"AST":{"nodeType":"YulBlock","src":"784:67:8","statements":[{"nodeType":"YulAssignment","src":"802:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:8"},"nodeType":"YulFunctionCall","src":"821:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:8"},"nodeType":"YulFunctionCall","src":"809:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1329,"isOffset":false,"isSlot":false,"src":"813:6:8","valueSize":1},{"declaration":1320,"isOffset":false,"isSlot":false,"src":"829:6:8","valueSize":1},{"declaration":1336,"isOffset":false,"isSlot":false,"src":"802:3:8","valueSize":1}],"id":1338,"nodeType":"InlineAssembly","src":"775:76:8"},{"body":{"id":1353,"nodeType":"Block","src":"877:267:8","statements":[{"expression":{"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:8","subExpression":{"id":1340,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"895:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1342,"nodeType":"ExpressionStatement","src":"895:5:8"},{"AST":{"nodeType":"YulBlock","src":"978:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:8"},"nodeType":"YulFunctionCall","src":"1018:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:8"},"nodeType":"YulFunctionCall","src":"1013:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:8"},"nodeType":"YulFunctionCall","src":"1000:44:8"},"nodeType":"YulExpressionStatement","src":"1000:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1308,"isOffset":false,"isSlot":false,"src":"1034:8:8","valueSize":1},{"declaration":1336,"isOffset":false,"isSlot":false,"src":"1008:3:8","valueSize":1},{"declaration":1314,"isOffset":false,"isSlot":false,"src":"1022:5:8","valueSize":1}],"id":1343,"nodeType":"InlineAssembly","src":"969:93:8"},{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"1079:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1347,"nodeType":"ExpressionStatement","src":"1079:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"1112:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1352,"nodeType":"IfStatement","src":"1108:21:8","trueBody":{"id":1351,"nodeType":"Break","src":"1124:5:8"}}]},"condition":{"hexValue":"74727565","id":1339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1354,"nodeType":"WhileStatement","src":"864:280:8"},{"expression":{"id":1355,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"1164:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1318,"id":1356,"nodeType":"Return","src":"1157:13:8"}]}]},"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"385:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1359,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:8","nodeType":"FunctionDefinition","parameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"value","nameLocation":"506:5:8","nodeType":"VariableDeclaration","scope":1359,"src":"498:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:8"},"returnParameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1359,"src":"536:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1316,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:8"},"scope":1529,"src":"480:707:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1386,"nodeType":"Block","src":"1357:114:8","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"1398:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:8","trueExpression":{"hexValue":"2d","id":1374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"1455:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1378,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"1429:21:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2866_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:8","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2865,"src":"1429:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1377,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1359,1387],"referencedDeclaration":1359,"src":"1420:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1369,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1367,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:8","typeDescriptions":{}}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1366,"id":1385,"nodeType":"Return","src":"1367:97:8"}]},"documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"1193:89:8","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1387,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:8","nodeType":"FunctionDefinition","parameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"value","nameLocation":"1312:5:8","nodeType":"VariableDeclaration","scope":1387,"src":"1305:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1361,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:8"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1387,"src":"1342:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1364,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:8"},"scope":1529,"src":"1287:184:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"1650:111:8","statements":[{"id":1405,"nodeType":"UncheckedBlock","src":"1660:95:8","statements":[{"expression":{"arguments":[{"id":1396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"1703:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"1733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1397,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"1710:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2761_$","typeString":"type(library MathUpgradeable)"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2721,"src":"1710:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1395,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1407,1483,1503],"referencedDeclaration":1483,"src":"1691:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1394,"id":1404,"nodeType":"Return","src":"1684:60:8"}]}]},"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"1477:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:8","nodeType":"FunctionDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"value","nameLocation":"1605:5:8","nodeType":"VariableDeclaration","scope":1407,"src":"1597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:8"},"returnParameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"1635:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1392,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:8"},"scope":1529,"src":"1576:185:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1482,"nodeType":"Block","src":"1974:347:8","statements":[{"assignments":[1418],"declarations":[{"constant":false,"id":1418,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:8","nodeType":"VariableDeclaration","scope":1482,"src":"1984:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1417,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1427,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1422,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"2020:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1419,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:8"},{"expression":{"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1428,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2041:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1430,"indexExpression":{"hexValue":"30","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1433,"nodeType":"ExpressionStatement","src":"2041:15:8"},{"expression":{"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1434,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2066:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1436,"indexExpression":{"hexValue":"31","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1439,"nodeType":"ExpressionStatement","src":"2066:15:8"},{"body":{"id":1468,"nodeType":"Block","src":"2136:83:8","statements":[{"expression":{"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1454,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2150:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1456,"indexExpression":{"id":1455,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"2157:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1457,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"2162:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1461,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2171:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1463,"nodeType":"ExpressionStatement","src":"2150:33:8"},{"expression":{"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2197:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1467,"nodeType":"ExpressionStatement","src":"2197:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1448,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"2124:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1469,"initializationExpression":{"assignments":[1441],"declarations":[{"constant":false,"id":1441,"mutability":"mutable","name":"i","nameLocation":"2104:1:8","nodeType":"VariableDeclaration","scope":1469,"src":"2096:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1440,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1447,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1443,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"2112:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:8"},"loopExpression":{"expression":{"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:8","subExpression":{"id":1451,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"2133:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1453,"nodeType":"ExpressionStatement","src":"2131:3:8"},"nodeType":"ForStatement","src":"2091:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2236:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1470,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1476,"nodeType":"ExpressionStatement","src":"2228:55:8"},{"expression":{"arguments":[{"id":1479,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1477,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:8","typeDescriptions":{}}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1416,"id":1481,"nodeType":"Return","src":"2293:21:8"}]},"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"1767:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:8","nodeType":"FunctionDefinition","parameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"value","nameLocation":"1913:5:8","nodeType":"VariableDeclaration","scope":1483,"src":"1905:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"length","nameLocation":"1928:6:8","nodeType":"VariableDeclaration","scope":1483,"src":"1920:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:8"},"returnParameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1483,"src":"1959:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1414,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:8"},"scope":1529,"src":"1884:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1502,"nodeType":"Block","src":"2546:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1496,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2591:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1494,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:8","typeDescriptions":{}}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1492,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:8","typeDescriptions":{}}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1499,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2599:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1491,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1407,1483,1503],"referencedDeclaration":1483,"src":"2563:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1490,"id":1501,"nodeType":"Return","src":"2556:59:8"}]},"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"2327:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1503,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:8","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"addr","nameLocation":"2502:4:8","nodeType":"VariableDeclaration","scope":1503,"src":"2494:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:8"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1503,"src":"2531:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1488,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:8"},"scope":1529,"src":"2473:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1527,"nodeType":"Block","src":"2777:66:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1516,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"2810:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1514,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:8","typeDescriptions":{}}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1513,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1522,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"2833:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1520,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:8","typeDescriptions":{}}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1519,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1512,"id":1526,"nodeType":"Return","src":"2787:49:8"}]},"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"2628:66:8","text":" @dev Returns true if the two strings are equal."},"id":1528,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:8","nodeType":"FunctionDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"a","nameLocation":"2728:1:8","nodeType":"VariableDeclaration","scope":1528,"src":"2714:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1505,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"b","nameLocation":"2745:1:8","nodeType":"VariableDeclaration","scope":1528,"src":"2731:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1507,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:8"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1528,"src":"2771:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1510,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:8"},"scope":1529,"src":"2699:144:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1530,"src":"242:2603:8","usedErrors":[]}],"src":"101:2745:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1895],"MathUpgradeable":[2761],"SignedMathUpgradeable":[2866],"StringsUpgradeable":[1529]},"id":1896,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1531,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1896,"sourceUnit":1530,"src":"137:35:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"174:205:9","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1895,"linearizedBaseContracts":[1895],"name":"ECDSAUpgradeable","nameLocation":"388:16:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1539,"members":[{"id":1534,"name":"NoError","nameLocation":"439:7:9","nodeType":"EnumValue","src":"439:7:9"},{"id":1535,"name":"InvalidSignature","nameLocation":"456:16:9","nodeType":"EnumValue","src":"456:16:9"},{"id":1536,"name":"InvalidSignatureLength","nameLocation":"482:22:9","nodeType":"EnumValue","src":"482:22:9"},{"id":1537,"name":"InvalidSignatureS","nameLocation":"514:17:9","nodeType":"EnumValue","src":"514:17:9"},{"id":1538,"name":"InvalidSignatureV","nameLocation":"541:17:9","nodeType":"EnumValue","src":"541:17:9"}],"name":"RecoverError","nameLocation":"416:12:9","nodeType":"EnumDefinition","src":"411:175:9"},{"body":{"id":1582,"nodeType":"Block","src":"646:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"660:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1546,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"669:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1534,"src":"669:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1551,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"756:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1552,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"765:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1535,"src":"765:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1560,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"865:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1561,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"874:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1536,"src":"874:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1569,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"987:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1570,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"996:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1537,"src":"996:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1578,"nodeType":"IfStatement","src":"983:114:9","trueBody":{"id":1577,"nodeType":"Block","src":"1028:69:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1573,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"1042:44:9"}]}},"id":1579,"nodeType":"IfStatement","src":"861:236:9","trueBody":{"id":1568,"nodeType":"Block","src":"911:66:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1564,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1567,"nodeType":"ExpressionStatement","src":"925:41:9"}]}},"id":1580,"nodeType":"IfStatement","src":"752:345:9","trueBody":{"id":1559,"nodeType":"Block","src":"796:59:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1555,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"810:34:9"}]}},"id":1581,"nodeType":"IfStatement","src":"656:441:9","trueBody":{"id":1550,"nodeType":"Block","src":"691:55:9","statements":[{"functionReturnParameters":1544,"id":1549,"nodeType":"Return","src":"705:7:9"}]}}]},"id":1583,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:9","nodeType":"FunctionDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"error","nameLocation":"626:5:9","nodeType":"VariableDeclaration","scope":1583,"src":"613:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1541,"nodeType":"UserDefinedTypeName","pathNode":{"id":1540,"name":"RecoverError","nameLocations":["613:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"613:12:9"},"referencedDeclaration":1539,"src":"613:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:9"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[],"src":"646:0:9"},"scope":1895,"src":"592:511:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1628,"nodeType":"Block","src":"2271:626:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1596,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"2285:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:9","memberName":"length","nodeType":"MemberAccess","src":"2285:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:9","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1626,"nodeType":"Block","src":"2810:81:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:9","typeDescriptions":{}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1622,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"2844:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1536,"src":"2844:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1595,"id":1625,"nodeType":"Return","src":"2824:56:9"}]},"id":1627,"nodeType":"IfStatement","src":"2281:610:9","trueBody":{"id":1617,"nodeType":"Block","src":"2309:495:9","statements":[{"assignments":[1601],"declarations":[{"constant":false,"id":1601,"mutability":"mutable","name":"r","nameLocation":"2331:1:9","nodeType":"VariableDeclaration","scope":1617,"src":"2323:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1602,"nodeType":"VariableDeclarationStatement","src":"2323:9:9"},{"assignments":[1604],"declarations":[{"constant":false,"id":1604,"mutability":"mutable","name":"s","nameLocation":"2354:1:9","nodeType":"VariableDeclaration","scope":1617,"src":"2346:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1605,"nodeType":"VariableDeclarationStatement","src":"2346:9:9"},{"assignments":[1607],"declarations":[{"constant":false,"id":1607,"mutability":"mutable","name":"v","nameLocation":"2375:1:9","nodeType":"VariableDeclaration","scope":1617,"src":"2369:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1606,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1608,"nodeType":"VariableDeclarationStatement","src":"2369:7:9"},{"AST":{"nodeType":"YulBlock","src":"2577:171:9","statements":[{"nodeType":"YulAssignment","src":"2595:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:9"},"nodeType":"YulFunctionCall","src":"2606:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:9"},"nodeType":"YulFunctionCall","src":"2600:27:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:9"}]},{"nodeType":"YulAssignment","src":"2644:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:9"},"nodeType":"YulFunctionCall","src":"2655:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:9"},"nodeType":"YulFunctionCall","src":"2649:27:9"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:9"}]},{"nodeType":"YulAssignment","src":"2693:41:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:9","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:9","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:9"},"nodeType":"YulFunctionCall","src":"2712:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:9"},"nodeType":"YulFunctionCall","src":"2706:27:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:9"},"nodeType":"YulFunctionCall","src":"2698:36:9"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1601,"isOffset":false,"isSlot":false,"src":"2595:1:9","valueSize":1},{"declaration":1604,"isOffset":false,"isSlot":false,"src":"2644:1:9","valueSize":1},{"declaration":1588,"isOffset":false,"isSlot":false,"src":"2610:9:9","valueSize":1},{"declaration":1588,"isOffset":false,"isSlot":false,"src":"2659:9:9","valueSize":1},{"declaration":1588,"isOffset":false,"isSlot":false,"src":"2716:9:9","valueSize":1},{"declaration":1607,"isOffset":false,"isSlot":false,"src":"2693:1:9","valueSize":1}],"id":1609,"nodeType":"InlineAssembly","src":"2568:180:9"},{"expression":{"arguments":[{"id":1611,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"2779:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1612,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2785:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1613,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"2788:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1614,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"2791:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1610,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1629,1703,1797],"referencedDeclaration":1797,"src":"2768:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1595,"id":1616,"nodeType":"Return","src":"2761:32:9"}]}}]},"documentation":{"id":1584,"nodeType":"StructuredDocumentation","src":"1109:1053:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1629,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:9","nodeType":"FunctionDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"hash","nameLocation":"2195:4:9","nodeType":"VariableDeclaration","scope":1629,"src":"2187:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1588,"mutability":"mutable","name":"signature","nameLocation":"2214:9:9","nodeType":"VariableDeclaration","scope":1629,"src":"2201:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1587,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:9"},"returnParameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"2248:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"2257:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1593,"nodeType":"UserDefinedTypeName","pathNode":{"id":1592,"name":"RecoverError","nameLocations":["2257:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"2257:12:9"},"referencedDeclaration":1539,"src":"2257:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:9"},"scope":1895,"src":"2167:730:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1655,"nodeType":"Block","src":"3770:140:9","statements":[{"assignments":[1640,1643],"declarations":[{"constant":false,"id":1640,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:9","nodeType":"VariableDeclaration","scope":1655,"src":"3781:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1643,"mutability":"mutable","name":"error","nameLocation":"3813:5:9","nodeType":"VariableDeclaration","scope":1655,"src":"3800:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1642,"nodeType":"UserDefinedTypeName","pathNode":{"id":1641,"name":"RecoverError","nameLocations":["3800:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"3800:12:9"},"referencedDeclaration":1539,"src":"3800:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1648,"initialValue":{"arguments":[{"id":1645,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"3833:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1646,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"3839:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1644,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1629,1703,1797],"referencedDeclaration":1629,"src":"3822:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:9"},{"expression":{"arguments":[{"id":1650,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"3871:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1649,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"3859:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1539_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1652,"nodeType":"ExpressionStatement","src":"3859:18:9"},{"expression":{"id":1653,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"3894:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1638,"id":1654,"nodeType":"Return","src":"3887:16:9"}]},"documentation":{"id":1630,"nodeType":"StructuredDocumentation","src":"2903:775:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1656,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:9","nodeType":"FunctionDefinition","parameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"hash","nameLocation":"3708:4:9","nodeType":"VariableDeclaration","scope":1656,"src":"3700:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1634,"mutability":"mutable","name":"signature","nameLocation":"3727:9:9","nodeType":"VariableDeclaration","scope":1656,"src":"3714:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1633,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:9"},"returnParameters":{"id":1638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1656,"src":"3761:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:9"},"scope":1895,"src":"3683:227:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1702,"nodeType":"Block","src":"4267:203:9","statements":[{"assignments":[1672],"declarations":[{"constant":false,"id":1672,"mutability":"mutable","name":"s","nameLocation":"4285:1:9","nodeType":"VariableDeclaration","scope":1702,"src":"4277:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1671,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1679,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1673,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4289:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:9","typeDescriptions":{}}},"id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:9"},{"assignments":[1681],"declarations":[{"constant":false,"id":1681,"mutability":"mutable","name":"v","nameLocation":"4385:1:9","nodeType":"VariableDeclaration","scope":1702,"src":"4379:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1680,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1694,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1686,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4404:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1684,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:9","typeDescriptions":{}}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1690,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1682,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:9","typeDescriptions":{}}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:9"},{"expression":{"arguments":[{"id":1696,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"4449:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1697,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"4455:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1698,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"4458:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1699,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"4461:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1695,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1629,1703,1797],"referencedDeclaration":1797,"src":"4438:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1670,"id":1701,"nodeType":"Return","src":"4431:32:9"}]},"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"3916:243:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1703,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:9","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"hash","nameLocation":"4192:4:9","nodeType":"VariableDeclaration","scope":1703,"src":"4184:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"r","nameLocation":"4206:1:9","nodeType":"VariableDeclaration","scope":1703,"src":"4198:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"vs","nameLocation":"4217:2:9","nodeType":"VariableDeclaration","scope":1703,"src":"4209:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:9"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1703,"src":"4244:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1703,"src":"4253:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1668,"nodeType":"UserDefinedTypeName","pathNode":{"id":1667,"name":"RecoverError","nameLocations":["4253:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"4253:12:9"},"referencedDeclaration":1539,"src":"4253:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:9"},"scope":1895,"src":"4164:306:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1732,"nodeType":"Block","src":"4721:136:9","statements":[{"assignments":[1716,1719],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:9","nodeType":"VariableDeclaration","scope":1732,"src":"4732:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"error","nameLocation":"4764:5:9","nodeType":"VariableDeclaration","scope":1732,"src":"4751:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1718,"nodeType":"UserDefinedTypeName","pathNode":{"id":1717,"name":"RecoverError","nameLocations":["4751:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"4751:12:9"},"referencedDeclaration":1539,"src":"4751:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1725,"initialValue":{"arguments":[{"id":1721,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"4784:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1722,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"4790:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1723,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"4793:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1720,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1629,1703,1797],"referencedDeclaration":1703,"src":"4773:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:9"},{"expression":{"arguments":[{"id":1727,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"4818:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1726,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"4806:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1539_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1729,"nodeType":"ExpressionStatement","src":"4806:18:9"},{"expression":{"id":1730,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"4841:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1714,"id":1731,"nodeType":"Return","src":"4834:16:9"}]},"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"4476:154:9","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1733,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:9","nodeType":"FunctionDefinition","parameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"hash","nameLocation":"4660:4:9","nodeType":"VariableDeclaration","scope":1733,"src":"4652:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"r","nameLocation":"4674:1:9","nodeType":"VariableDeclaration","scope":1733,"src":"4666:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"vs","nameLocation":"4685:2:9","nodeType":"VariableDeclaration","scope":1733,"src":"4677:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:9"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1733,"src":"4712:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:9"},"scope":1895,"src":"4635:222:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1796,"nodeType":"Block","src":"5142:1345:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1752,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"6038:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1750,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:9","typeDescriptions":{}}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1765,"nodeType":"IfStatement","src":"6026:161:9","trueBody":{"id":1764,"nodeType":"Block","src":"6111:76:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:9","typeDescriptions":{}}},"id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1760,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"6145:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1537,"src":"6145:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1762,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1749,"id":1763,"nodeType":"Return","src":"6125:51:9"}]}},{"assignments":[1767],"declarations":[{"constant":false,"id":1767,"mutability":"mutable","name":"signer","nameLocation":"6289:6:9","nodeType":"VariableDeclaration","scope":1796,"src":"6281:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1766,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1774,"initialValue":{"arguments":[{"id":1769,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"6308:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1770,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6314:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1771,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"6317:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1772,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"6320:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1768,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:9","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1775,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"6336:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1776,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:9","typeDescriptions":{}}},"id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1790,"nodeType":"IfStatement","src":"6332:101:9","trueBody":{"id":1789,"nodeType":"Block","src":"6358:75:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:9","typeDescriptions":{}}},"id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1785,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"6392:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1535,"src":"6392:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1787,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1749,"id":1788,"nodeType":"Return","src":"6372:50:9"}]}},{"expression":{"components":[{"id":1791,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"6451:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1792,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"6459:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1539_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1534,"src":"6459:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1794,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1749,"id":1795,"nodeType":"Return","src":"6443:37:9"}]},"documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"4863:163:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1797,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:9","nodeType":"FunctionDefinition","parameters":{"id":1743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1736,"mutability":"mutable","name":"hash","nameLocation":"5059:4:9","nodeType":"VariableDeclaration","scope":1797,"src":"5051:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"v","nameLocation":"5071:1:9","nodeType":"VariableDeclaration","scope":1797,"src":"5065:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1737,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1740,"mutability":"mutable","name":"r","nameLocation":"5082:1:9","nodeType":"VariableDeclaration","scope":1797,"src":"5074:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1742,"mutability":"mutable","name":"s","nameLocation":"5093:1:9","nodeType":"VariableDeclaration","scope":1797,"src":"5085:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1741,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:9"},"returnParameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1797,"src":"5119:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1797,"src":"5128:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1747,"nodeType":"UserDefinedTypeName","pathNode":{"id":1746,"name":"RecoverError","nameLocations":["5128:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"5128:12:9"},"referencedDeclaration":1539,"src":"5128:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:9"},"scope":1895,"src":"5031:1456:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1829,"nodeType":"Block","src":"6714:138:9","statements":[{"assignments":[1812,1815],"declarations":[{"constant":false,"id":1812,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:9","nodeType":"VariableDeclaration","scope":1829,"src":"6725:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1815,"mutability":"mutable","name":"error","nameLocation":"6757:5:9","nodeType":"VariableDeclaration","scope":1829,"src":"6744:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1814,"nodeType":"UserDefinedTypeName","pathNode":{"id":1813,"name":"RecoverError","nameLocations":["6744:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1539,"src":"6744:12:9"},"referencedDeclaration":1539,"src":"6744:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1822,"initialValue":{"arguments":[{"id":1817,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"6777:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1818,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"6783:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1819,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"6786:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1820,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"6789:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1816,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1629,1703,1797],"referencedDeclaration":1797,"src":"6766:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1539_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:9"},{"expression":{"arguments":[{"id":1824,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"6813:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1539","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1823,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"6801:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1539_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1826,"nodeType":"ExpressionStatement","src":"6801:18:9"},{"expression":{"id":1827,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"6836:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1810,"id":1828,"nodeType":"Return","src":"6829:16:9"}]},"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"6493:122:9","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1830,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:9","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"hash","nameLocation":"6645:4:9","nodeType":"VariableDeclaration","scope":1830,"src":"6637:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"v","nameLocation":"6657:1:9","nodeType":"VariableDeclaration","scope":1830,"src":"6651:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1801,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"r","nameLocation":"6668:1:9","nodeType":"VariableDeclaration","scope":1830,"src":"6660:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"s","nameLocation":"6679:1:9","nodeType":"VariableDeclaration","scope":1830,"src":"6671:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:9"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1830,"src":"6705:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1808,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:9"},"scope":1895,"src":"6620:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1839,"nodeType":"Block","src":"7228:310:9","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:9","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:9","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:9"},"nodeType":"YulFunctionCall","src":"7398:48:9"},"nodeType":"YulExpressionStatement","src":"7398:48:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:9","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:9"},"nodeType":"YulFunctionCall","src":"7459:18:9"},"nodeType":"YulExpressionStatement","src":"7459:18:9"},{"nodeType":"YulAssignment","src":"7490:32:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:9","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:9"},"nodeType":"YulFunctionCall","src":"7501:21:9"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1833,"isOffset":false,"isSlot":false,"src":"7472:4:9","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"7490:7:9","valueSize":1}],"id":1838,"nodeType":"InlineAssembly","src":"7375:157:9"}]},"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"6858:279:9","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:9","nodeType":"FunctionDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"hash","nameLocation":"7182:4:9","nodeType":"VariableDeclaration","scope":1840,"src":"7174:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:9"},"returnParameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"message","nameLocation":"7219:7:9","nodeType":"VariableDeclaration","scope":1840,"src":"7211:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:9"},"scope":1895,"src":"7142:396:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1861,"nodeType":"Block","src":"7903:127:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1854,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"8009:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:9","memberName":"length","nodeType":"MemberAccess","src":"8009:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1852,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"7981:18:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1529_$","typeString":"type(library StringsUpgradeable)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1359,"src":"7981:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1857,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"8020:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1849,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1848,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1847,"id":1860,"nodeType":"Return","src":"7913:110:9"}]},"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"7544:274:9","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1862,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:9","nodeType":"FunctionDefinition","parameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"s","nameLocation":"7868:1:9","nodeType":"VariableDeclaration","scope":1862,"src":"7855:14:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1842,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:9"},"returnParameters":{"id":1847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1862,"src":"7894:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:9"},"scope":1895,"src":"7823:207:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1873,"nodeType":"Block","src":"8476:290:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:9"},"nodeType":"YulFunctionCall","src":"8563:11:9"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:9","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:9"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:9","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:9"},"nodeType":"YulFunctionCall","src":"8587:23:9"},"nodeType":"YulExpressionStatement","src":"8587:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:9","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:9"},"nodeType":"YulFunctionCall","src":"8630:14:9"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:9"},"nodeType":"YulFunctionCall","src":"8623:39:9"},"nodeType":"YulExpressionStatement","src":"8623:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:9","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:9"},"nodeType":"YulFunctionCall","src":"8682:14:9"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:9"},"nodeType":"YulFunctionCall","src":"8675:34:9"},"nodeType":"YulExpressionStatement","src":"8675:34:9"},{"nodeType":"YulAssignment","src":"8722:28:9","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:9","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:9"},"nodeType":"YulFunctionCall","src":"8730:20:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1870,"isOffset":false,"isSlot":false,"src":"8722:4:9","valueSize":1},{"declaration":1865,"isOffset":false,"isSlot":false,"src":"8646:15:9","valueSize":1},{"declaration":1867,"isOffset":false,"isSlot":false,"src":"8698:10:9","valueSize":1}],"id":1872,"nodeType":"InlineAssembly","src":"8529:231:9"}]},"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"8036:328:9","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1874,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:9","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:9","nodeType":"VariableDeclaration","scope":1874,"src":"8394:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:9","nodeType":"VariableDeclaration","scope":1874,"src":"8419:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:9"},"returnParameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"data","nameLocation":"8470:4:9","nodeType":"VariableDeclaration","scope":1874,"src":"8462:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:9"},"scope":1895,"src":"8369:397:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1893,"nodeType":"Block","src":"9081:80:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1888,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"9137:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1889,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"9148:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1885,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1884,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1883,"id":1892,"nodeType":"Return","src":"9091:63:9"}]},"documentation":{"id":1875,"nodeType":"StructuredDocumentation","src":"8772:193:9","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1894,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:9","nodeType":"FunctionDefinition","parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"validator","nameLocation":"9019:9:9","nodeType":"VariableDeclaration","scope":1894,"src":"9011:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1876,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"data","nameLocation":"9043:4:9","nodeType":"VariableDeclaration","scope":1894,"src":"9030:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1878,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:9"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1894,"src":"9072:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:9"},"scope":1895,"src":"8970:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1896,"src":"380:8783:9","usedErrors":[]}],"src":"112:9052:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2761]},"id":2762,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1897,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2761,"linearizedBaseContracts":[2761],"name":"MathUpgradeable","nameLocation":"210:15:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1902,"members":[{"id":1899,"name":"Down","nameLocation":"256:4:10","nodeType":"EnumValue","src":"256:4:10"},{"id":1900,"name":"Up","nameLocation":"298:2:10","nodeType":"EnumValue","src":"298:2:10"},{"id":1901,"name":"Zero","nameLocation":"329:4:10","nodeType":"EnumValue","src":"329:4:10"}],"name":"Rounding","nameLocation":"237:8:10","nodeType":"EnumDefinition","src":"232:122:10"},{"body":{"id":1919,"nodeType":"Block","src":"491:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"508:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1913,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"512:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1916,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"520:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:10","trueExpression":{"id":1915,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"516:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1911,"id":1918,"nodeType":"Return","src":"501:20:10"}]},"documentation":{"id":1903,"nodeType":"StructuredDocumentation","src":"360:59:10","text":" @dev Returns the largest of two numbers."},"id":1920,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:10","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"a","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1920,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"b","nameLocation":"456:1:10","nodeType":"VariableDeclaration","scope":1920,"src":"448:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:10"},"returnParameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"482:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:10"},"scope":2761,"src":"424:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1937,"nodeType":"Block","src":"666:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1930,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"683:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1931,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"687:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1934,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"695:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:10","trueExpression":{"id":1933,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"691:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1929,"id":1936,"nodeType":"Return","src":"676:20:10"}]},"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"534:60:10","text":" @dev Returns the smallest of two numbers."},"id":1938,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:10","nodeType":"FunctionDefinition","parameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"a","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1938,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1925,"mutability":"mutable","name":"b","nameLocation":"631:1:10","nodeType":"VariableDeclaration","scope":1938,"src":"623:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1924,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:10"},"returnParameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1938,"src":"657:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:10"},"scope":2761,"src":"599:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1960,"nodeType":"Block","src":"887:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1948,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"942:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1949,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"946:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1951,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1953,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1947,"id":1959,"nodeType":"Return","src":"934:28:10"}]},"documentation":{"id":1939,"nodeType":"StructuredDocumentation","src":"709:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1961,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:10","nodeType":"FunctionDefinition","parameters":{"id":1944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"a","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1961,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1940,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"b","nameLocation":"852:1:10","nodeType":"VariableDeclaration","scope":1961,"src":"844:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1942,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:10"},"returnParameters":{"id":1947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1961,"src":"878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1945,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:10"},"scope":2761,"src":"816:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1985,"nodeType":"Block","src":"1239:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1971,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1327:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"1341:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1979,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1350:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:10","trueExpression":{"hexValue":"30","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1970,"id":1984,"nodeType":"Return","src":"1320:35:10"}]},"documentation":{"id":1962,"nodeType":"StructuredDocumentation","src":"975:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1986,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:10","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1964,"mutability":"mutable","name":"a","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1986,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"b","nameLocation":"1204:1:10","nodeType":"VariableDeclaration","scope":1986,"src":"1196:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:10"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1986,"src":"1230:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:10"},"scope":2761,"src":"1168:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2108,"nodeType":"Block","src":"1776:4115:10","statements":[{"id":2107,"nodeType":"UncheckedBlock","src":"1786:4099:10","statements":[{"assignments":[1999],"declarations":[{"constant":false,"id":1999,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:10","nodeType":"VariableDeclaration","scope":2107,"src":"2107:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2000,"nodeType":"VariableDeclarationStatement","src":"2107:13:10"},{"assignments":[2002],"declarations":[{"constant":false,"id":2002,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:10","nodeType":"VariableDeclaration","scope":2107,"src":"2179:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2003,"nodeType":"VariableDeclarationStatement","src":"2179:13:10"},{"AST":{"nodeType":"YulBlock","src":"2259:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:10"},"nodeType":"YulFunctionCall","src":"2300:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:10"},"nodeType":"YulFunctionCall","src":"2287:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:10"},"nodeType":"YulFunctionCall","src":"2333:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:10"}]},{"nodeType":"YulAssignment","src":"2359:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:10"},"nodeType":"YulFunctionCall","src":"2372:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:10"},"nodeType":"YulFunctionCall","src":"2388:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:10"},"nodeType":"YulFunctionCall","src":"2368:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1999,"isOffset":false,"isSlot":false,"src":"2324:5:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"2380:5:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"2395:5:10","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"2359:5:10","valueSize":1},{"declaration":1989,"isOffset":false,"isSlot":false,"src":"2294:1:10","valueSize":1},{"declaration":1989,"isOffset":false,"isSlot":false,"src":"2337:1:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"2297:1:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"2340:1:10","valueSize":1}],"id":2004,"nodeType":"InlineAssembly","src":"2250:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2005,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"2497:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2013,"nodeType":"IfStatement","src":"2493:368:10","trueBody":{"id":2012,"nodeType":"Block","src":"2509:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"2827:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2009,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"2835:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1997,"id":2011,"nodeType":"Return","src":"2820:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"2971:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2016,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"2985:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2014,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2020,"nodeType":"ExpressionStatement","src":"2963:53:10"},{"assignments":[2022],"declarations":[{"constant":false,"id":2022,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:10","nodeType":"VariableDeclaration","scope":2107,"src":"3272:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2023,"nodeType":"VariableDeclarationStatement","src":"3272:17:10"},{"AST":{"nodeType":"YulBlock","src":"3312:291:10","statements":[{"nodeType":"YulAssignment","src":"3381:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:10"},"nodeType":"YulFunctionCall","src":"3394:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:10"}]},{"nodeType":"YulAssignment","src":"3501:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:10"},"nodeType":"YulFunctionCall","src":"3521:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:10"},"nodeType":"YulFunctionCall","src":"3510:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:10"}]},{"nodeType":"YulAssignment","src":"3559:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:10"},"nodeType":"YulFunctionCall","src":"3568:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1993,"isOffset":false,"isSlot":false,"src":"3407:11:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"3535:5:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"3559:5:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"3572:5:10","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"3501:5:10","valueSize":1},{"declaration":2002,"isOffset":false,"isSlot":false,"src":"3514:5:10","valueSize":1},{"declaration":2022,"isOffset":false,"isSlot":false,"src":"3381:9:10","valueSize":1},{"declaration":2022,"isOffset":false,"isSlot":false,"src":"3524:9:10","valueSize":1},{"declaration":2022,"isOffset":false,"isSlot":false,"src":"3579:9:10","valueSize":1},{"declaration":1989,"isOffset":false,"isSlot":false,"src":"3401:1:10","valueSize":1},{"declaration":1991,"isOffset":false,"isSlot":false,"src":"3404:1:10","valueSize":1}],"id":2024,"nodeType":"InlineAssembly","src":"3303:300:10"},{"assignments":[2026],"declarations":[{"constant":false,"id":2026,"mutability":"mutable","name":"twos","nameLocation":"3918:4:10","nodeType":"VariableDeclaration","scope":2107,"src":"3910:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2025,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2034,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2027,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"3925:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:10","subExpression":{"id":2028,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"3941:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2032,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:10"},{"AST":{"nodeType":"YulBlock","src":"3980:362:10","statements":[{"nodeType":"YulAssignment","src":"4045:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:10"},"nodeType":"YulFunctionCall","src":"4060:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:10"}]},{"nodeType":"YulAssignment","src":"4149:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:10"},"nodeType":"YulFunctionCall","src":"4158:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:10"}]},{"nodeType":"YulAssignment","src":"4289:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:10"},"nodeType":"YulFunctionCall","src":"4305:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:10"},"nodeType":"YulFunctionCall","src":"4301:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:10"},"nodeType":"YulFunctionCall","src":"4297:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1993,"isOffset":false,"isSlot":false,"src":"4045:11:10","valueSize":1},{"declaration":1993,"isOffset":false,"isSlot":false,"src":"4064:11:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"4149:5:10","valueSize":1},{"declaration":1999,"isOffset":false,"isSlot":false,"src":"4162:5:10","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"4077:4:10","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"4169:4:10","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"4289:4:10","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"4312:4:10","valueSize":1},{"declaration":2026,"isOffset":false,"isSlot":false,"src":"4319:4:10","valueSize":1}],"id":2035,"nodeType":"InlineAssembly","src":"3971:371:10"},{"expression":{"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2036,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"4408:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2037,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"4417:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2038,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"4425:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2041,"nodeType":"ExpressionStatement","src":"4408:21:10"},{"assignments":[2043],"declarations":[{"constant":false,"id":2043,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:10","nodeType":"VariableDeclaration","scope":2107,"src":"4747:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2050,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2045,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"4770:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2047,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:10"},{"expression":{"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2051,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5003:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2053,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5018:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2054,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5032:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2058,"nodeType":"ExpressionStatement","src":"5003:36:10"},{"expression":{"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2059,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5072:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5087:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2062,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5101:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2066,"nodeType":"ExpressionStatement","src":"5072:36:10"},{"expression":{"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2067,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2069,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5157:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2070,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2074,"nodeType":"ExpressionStatement","src":"5142:36:10"},{"expression":{"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2075,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5212:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2077,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5227:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2078,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5241:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"nodeType":"ExpressionStatement","src":"5212:36:10"},{"expression":{"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2083,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5282:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5297:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2086,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5311:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2090,"nodeType":"ExpressionStatement","src":"5282:36:10"},{"expression":{"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2091,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5353:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"5368:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2094,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2098,"nodeType":"ExpressionStatement","src":"5353:36:10"},{"expression":{"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"5823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2100,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"5832:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2101,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"5840:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2104,"nodeType":"ExpressionStatement","src":"5823:24:10"},{"expression":{"id":2105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"5868:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1997,"id":2106,"nodeType":"Return","src":"5861:13:10"}]}]},"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"1368:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2109,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:10","nodeType":"FunctionDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"x","nameLocation":"1702:1:10","nodeType":"VariableDeclaration","scope":2109,"src":"1694:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"y","nameLocation":"1713:1:10","nodeType":"VariableDeclaration","scope":2109,"src":"1705:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1993,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:10","nodeType":"VariableDeclaration","scope":2109,"src":"1716:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1992,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:10"},"returnParameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"result","nameLocation":"1768:6:10","nodeType":"VariableDeclaration","scope":2109,"src":"1760:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:10"},"scope":2761,"src":"1678:4213:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2152,"nodeType":"Block","src":"6133:189:10","statements":[{"assignments":[2125],"declarations":[{"constant":false,"id":2125,"mutability":"mutable","name":"result","nameLocation":"6151:6:10","nodeType":"VariableDeclaration","scope":2152,"src":"6143:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2131,"initialValue":{"arguments":[{"id":2127,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"6167:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2128,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"6170:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2129,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"6173:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2126,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2109,2153],"referencedDeclaration":2109,"src":"6160:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"6199:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2133,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"6211:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1902_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"6211:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2137,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"6233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2138,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"6236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2139,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"6239:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2136,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2149,"nodeType":"IfStatement","src":"6195:98:10","trueBody":{"id":2148,"nodeType":"Block","src":"6257:36:10","statements":[{"expression":{"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"6271:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2147,"nodeType":"ExpressionStatement","src":"6271:11:10"}]}},{"expression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"6309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2123,"id":2151,"nodeType":"Return","src":"6302:13:10"}]},"documentation":{"id":2110,"nodeType":"StructuredDocumentation","src":"5897:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2153,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:10","nodeType":"FunctionDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"x","nameLocation":"6047:1:10","nodeType":"VariableDeclaration","scope":2153,"src":"6039:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"y","nameLocation":"6058:1:10","nodeType":"VariableDeclaration","scope":2153,"src":"6050:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2116,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:10","nodeType":"VariableDeclaration","scope":2153,"src":"6061:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2115,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:10","nodeType":"VariableDeclaration","scope":2153,"src":"6082:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2118,"nodeType":"UserDefinedTypeName","pathNode":{"id":2117,"name":"Rounding","nameLocations":["6082:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1902,"src":"6082:8:10"},"referencedDeclaration":1902,"src":"6082:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:10"},"returnParameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2153,"src":"6124:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2121,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:10"},"scope":2761,"src":"6023:299:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2264,"nodeType":"Block","src":"6598:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"6612:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2167,"nodeType":"IfStatement","src":"6608:45:10","trueBody":{"id":2166,"nodeType":"Block","src":"6620:33:10","statements":[{"expression":{"hexValue":"30","id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2160,"id":2165,"nodeType":"Return","src":"6634:8:10"}]}},{"assignments":[2169],"declarations":[{"constant":false,"id":2169,"mutability":"mutable","name":"result","nameLocation":"7340:6:10","nodeType":"VariableDeclaration","scope":2264,"src":"7332:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2178,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"7360:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2171,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2433,2469],"referencedDeclaration":2433,"src":"7355:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:10"},{"id":2263,"nodeType":"UncheckedBlock","src":"7769:408:10","statements":[{"expression":{"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7793:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7803:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"7812:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7816:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2189,"nodeType":"ExpressionStatement","src":"7793:35:10"},{"expression":{"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7842:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7852:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"7861:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7865:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"nodeType":"ExpressionStatement","src":"7842:35:10"},{"expression":{"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2201,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7891:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7901:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"7910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7914:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2207,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2211,"nodeType":"ExpressionStatement","src":"7891:35:10"},{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2212,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7940:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7950:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2214,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"7959:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2215,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7963:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2218,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2222,"nodeType":"ExpressionStatement","src":"7940:35:10"},{"expression":{"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7989:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"7999:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8008:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2226,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2229,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2233,"nodeType":"ExpressionStatement","src":"7989:35:10"},{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8038:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8057:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8061:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2244,"nodeType":"ExpressionStatement","src":"8038:35:10"},{"expression":{"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8087:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8106:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8110:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2251,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2255,"nodeType":"ExpressionStatement","src":"8087:35:10"},{"expression":{"arguments":[{"id":2257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8147:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8155:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"8159:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2256,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"8143:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2160,"id":2262,"nodeType":"Return","src":"8136:30:10"}]}]},"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"6328:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2265,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:10","nodeType":"FunctionDefinition","parameters":{"id":2157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"a","nameLocation":"6563:1:10","nodeType":"VariableDeclaration","scope":2265,"src":"6555:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:10"},"returnParameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2265,"src":"6589:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:10"},"scope":2761,"src":"6541:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2300,"nodeType":"Block","src":"8359:161:10","statements":[{"id":2299,"nodeType":"UncheckedBlock","src":"8369:145:10","statements":[{"assignments":[2277],"declarations":[{"constant":false,"id":2277,"mutability":"mutable","name":"result","nameLocation":"8401:6:10","nodeType":"VariableDeclaration","scope":2299,"src":"8393:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2281,"initialValue":{"arguments":[{"id":2279,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"8415:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2278,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2265,2301],"referencedDeclaration":2265,"src":"8410:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"8438:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"8448:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2284,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"8460:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1902_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"8460:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"8475:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"8484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2290,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"8493:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:10","trueExpression":{"hexValue":"31","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2275,"id":2298,"nodeType":"Return","src":"8431:72:10"}]}]},"documentation":{"id":2266,"nodeType":"StructuredDocumentation","src":"8189:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2301,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:10","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2268,"mutability":"mutable","name":"a","nameLocation":"8305:1:10","nodeType":"VariableDeclaration","scope":2301,"src":"8297:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2267,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:10","nodeType":"VariableDeclaration","scope":2301,"src":"8308:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2270,"nodeType":"UserDefinedTypeName","pathNode":{"id":2269,"name":"Rounding","nameLocations":["8308:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1902,"src":"8308:8:10"},"referencedDeclaration":1902,"src":"8308:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:10"},"returnParameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2301,"src":"8350:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2273,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:10"},"scope":2761,"src":"8283:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2432,"nodeType":"Block","src":"8705:922:10","statements":[{"assignments":[2310],"declarations":[{"constant":false,"id":2310,"mutability":"mutable","name":"result","nameLocation":"8723:6:10","nodeType":"VariableDeclaration","scope":2432,"src":"8715:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2309,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2312,"initialValue":{"hexValue":"30","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:10"},{"id":2429,"nodeType":"UncheckedBlock","src":"8743:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8771:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2327,"nodeType":"IfStatement","src":"8767:99:10","trueBody":{"id":2326,"nodeType":"Block","src":"8789:77:10","statements":[{"expression":{"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8807:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2321,"nodeType":"ExpressionStatement","src":"8807:13:10"},{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"8838:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2325,"nodeType":"ExpressionStatement","src":"8838:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8883:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2342,"nodeType":"IfStatement","src":"8879:96:10","trueBody":{"id":2341,"nodeType":"Block","src":"8900:75:10","statements":[{"expression":{"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8918:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ExpressionStatement","src":"8918:12:10"},{"expression":{"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"8948:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ExpressionStatement","src":"8948:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"8992:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2357,"nodeType":"IfStatement","src":"8988:96:10","trueBody":{"id":2356,"nodeType":"Block","src":"9009:75:10","statements":[{"expression":{"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9027:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2351,"nodeType":"ExpressionStatement","src":"9027:12:10"},{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2352,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9057:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"9057:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9101:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2372,"nodeType":"IfStatement","src":"9097:96:10","trueBody":{"id":2371,"nodeType":"Block","src":"9118:75:10","statements":[{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9136:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"9136:12:10"},{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9166:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"9166:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2387,"nodeType":"IfStatement","src":"9206:93:10","trueBody":{"id":2386,"nodeType":"Block","src":"9226:73:10","statements":[{"expression":{"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9244:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2381,"nodeType":"ExpressionStatement","src":"9244:11:10"},{"expression":{"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9273:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2385,"nodeType":"ExpressionStatement","src":"9273:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9316:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2402,"nodeType":"IfStatement","src":"9312:93:10","trueBody":{"id":2401,"nodeType":"Block","src":"9332:73:10","statements":[{"expression":{"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9350:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2396,"nodeType":"ExpressionStatement","src":"9350:11:10"},{"expression":{"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2397,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9379:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2400,"nodeType":"ExpressionStatement","src":"9379:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2417,"nodeType":"IfStatement","src":"9418:93:10","trueBody":{"id":2416,"nodeType":"Block","src":"9438:73:10","statements":[{"expression":{"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9456:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2411,"nodeType":"ExpressionStatement","src":"9456:11:10"},{"expression":{"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9485:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2415,"nodeType":"ExpressionStatement","src":"9485:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"9528:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2428,"nodeType":"IfStatement","src":"9524:64:10","trueBody":{"id":2427,"nodeType":"Block","src":"9544:44:10","statements":[{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9562:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"9562:11:10"}]}}]},{"expression":{"id":2430,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"9614:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2308,"id":2431,"nodeType":"Return","src":"9607:13:10"}]},"documentation":{"id":2302,"nodeType":"StructuredDocumentation","src":"8526:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2433,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:10","nodeType":"FunctionDefinition","parameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"value","nameLocation":"8666:5:10","nodeType":"VariableDeclaration","scope":2433,"src":"8658:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:10"},"returnParameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2307,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2433,"src":"8696:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:10"},"scope":2761,"src":"8644:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2468,"nodeType":"Block","src":"9860:165:10","statements":[{"id":2467,"nodeType":"UncheckedBlock","src":"9870:149:10","statements":[{"assignments":[2445],"declarations":[{"constant":false,"id":2445,"mutability":"mutable","name":"result","nameLocation":"9902:6:10","nodeType":"VariableDeclaration","scope":2467,"src":"9894:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2449,"initialValue":{"arguments":[{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"9916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2446,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2433,2469],"referencedDeclaration":2433,"src":"9911:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"9943:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"9953:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2452,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"9965:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1902_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"9965:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"9985:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"9994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:10","trueExpression":{"hexValue":"31","id":2461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2443,"id":2466,"nodeType":"Return","src":"9936:72:10"}]}]},"documentation":{"id":2434,"nodeType":"StructuredDocumentation","src":"9633:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2469,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:10","nodeType":"FunctionDefinition","parameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"value","nameLocation":"9802:5:10","nodeType":"VariableDeclaration","scope":2469,"src":"9794:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2435,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:10","nodeType":"VariableDeclaration","scope":2469,"src":"9809:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2438,"nodeType":"UserDefinedTypeName","pathNode":{"id":2437,"name":"Rounding","nameLocations":["9809:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1902,"src":"9809:8:10"},"referencedDeclaration":1902,"src":"9809:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:10"},"returnParameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2469,"src":"9851:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2441,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:10"},"scope":2761,"src":"9780:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2597,"nodeType":"Block","src":"10212:854:10","statements":[{"assignments":[2478],"declarations":[{"constant":false,"id":2478,"mutability":"mutable","name":"result","nameLocation":"10230:6:10","nodeType":"VariableDeclaration","scope":2597,"src":"10222:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2480,"initialValue":{"hexValue":"30","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:10"},{"id":2594,"nodeType":"UncheckedBlock","src":"10250:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10278:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2497,"nodeType":"IfStatement","src":"10274:103:10","trueBody":{"id":2496,"nodeType":"Block","src":"10297:80:10","statements":[{"expression":{"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10315:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2491,"nodeType":"ExpressionStatement","src":"10315:17:10"},{"expression":{"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2492,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10350:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2495,"nodeType":"ExpressionStatement","src":"10350:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10394:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2514,"nodeType":"IfStatement","src":"10390:103:10","trueBody":{"id":2513,"nodeType":"Block","src":"10413:80:10","statements":[{"expression":{"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10431:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2508,"nodeType":"ExpressionStatement","src":"10431:17:10"},{"expression":{"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10466:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2512,"nodeType":"ExpressionStatement","src":"10466:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2531,"nodeType":"IfStatement","src":"10506:103:10","trueBody":{"id":2530,"nodeType":"Block","src":"10529:80:10","statements":[{"expression":{"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10547:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2525,"nodeType":"ExpressionStatement","src":"10547:17:10"},{"expression":{"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2526,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10582:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2529,"nodeType":"ExpressionStatement","src":"10582:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10626:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"nodeType":"IfStatement","src":"10622:100:10","trueBody":{"id":2547,"nodeType":"Block","src":"10644:78:10","statements":[{"expression":{"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10662:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2542,"nodeType":"ExpressionStatement","src":"10662:16:10"},{"expression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10696:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2546,"nodeType":"ExpressionStatement","src":"10696:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10739:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2565,"nodeType":"IfStatement","src":"10735:100:10","trueBody":{"id":2564,"nodeType":"Block","src":"10757:78:10","statements":[{"expression":{"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10775:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2559,"nodeType":"ExpressionStatement","src":"10775:16:10"},{"expression":{"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2560,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10809:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2563,"nodeType":"ExpressionStatement","src":"10809:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10852:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2582,"nodeType":"IfStatement","src":"10848:100:10","trueBody":{"id":2581,"nodeType":"Block","src":"10870:78:10","statements":[{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10888:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"10888:16:10"},{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"10922:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"10922:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"10965:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2593,"nodeType":"IfStatement","src":"10961:66:10","trueBody":{"id":2592,"nodeType":"Block","src":"10983:44:10","statements":[{"expression":{"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"11001:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"nodeType":"ExpressionStatement","src":"11001:11:10"}]}}]},{"expression":{"id":2595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"11053:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2476,"id":2596,"nodeType":"Return","src":"11046:13:10"}]},"documentation":{"id":2470,"nodeType":"StructuredDocumentation","src":"10031:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2598,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:10","nodeType":"FunctionDefinition","parameters":{"id":2473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2472,"mutability":"mutable","name":"value","nameLocation":"10173:5:10","nodeType":"VariableDeclaration","scope":2598,"src":"10165:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2471,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:10"},"returnParameters":{"id":2476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2598,"src":"10203:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:10"},"scope":2761,"src":"10150:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"11301:167:10","statements":[{"id":2632,"nodeType":"UncheckedBlock","src":"11311:151:10","statements":[{"assignments":[2610],"declarations":[{"constant":false,"id":2610,"mutability":"mutable","name":"result","nameLocation":"11343:6:10","nodeType":"VariableDeclaration","scope":2632,"src":"11335:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2609,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2614,"initialValue":{"arguments":[{"id":2612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"11358:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2611,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2598,2634],"referencedDeclaration":2598,"src":"11352:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2615,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"11385:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2616,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"11395:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2617,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"11407:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1902_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"11407:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2621,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"11428:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"11437:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:10","trueExpression":{"hexValue":"31","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2608,"id":2631,"nodeType":"Return","src":"11378:73:10"}]}]},"documentation":{"id":2599,"nodeType":"StructuredDocumentation","src":"11072:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:10","nodeType":"FunctionDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"value","nameLocation":"11243:5:10","nodeType":"VariableDeclaration","scope":2634,"src":"11235:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:10","nodeType":"VariableDeclaration","scope":2634,"src":"11250:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2603,"nodeType":"UserDefinedTypeName","pathNode":{"id":2602,"name":"Rounding","nameLocations":["11250:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1902,"src":"11250:8:10"},"referencedDeclaration":1902,"src":"11250:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:10"},"returnParameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"11292:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:10"},"scope":2761,"src":"11220:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2720,"nodeType":"Block","src":"11782:600:10","statements":[{"assignments":[2643],"declarations":[{"constant":false,"id":2643,"mutability":"mutable","name":"result","nameLocation":"11800:6:10","nodeType":"VariableDeclaration","scope":2720,"src":"11792:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2645,"initialValue":{"hexValue":"30","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:10"},{"id":2717,"nodeType":"UncheckedBlock","src":"11820:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"11848:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2660,"nodeType":"IfStatement","src":"11844:98:10","trueBody":{"id":2659,"nodeType":"Block","src":"11866:76:10","statements":[{"expression":{"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"11884:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2654,"nodeType":"ExpressionStatement","src":"11884:13:10"},{"expression":{"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2655,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"11915:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2658,"nodeType":"ExpressionStatement","src":"11915:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"11959:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2675,"nodeType":"IfStatement","src":"11955:95:10","trueBody":{"id":2674,"nodeType":"Block","src":"11976:74:10","statements":[{"expression":{"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2669,"nodeType":"ExpressionStatement","src":"11994:12:10"},{"expression":{"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"12024:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2673,"nodeType":"ExpressionStatement","src":"12024:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2676,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2690,"nodeType":"IfStatement","src":"12063:95:10","trueBody":{"id":2689,"nodeType":"Block","src":"12084:74:10","statements":[{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12102:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2684,"nodeType":"ExpressionStatement","src":"12102:12:10"},{"expression":{"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"12132:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2688,"nodeType":"ExpressionStatement","src":"12132:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2691,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2705,"nodeType":"IfStatement","src":"12171:95:10","trueBody":{"id":2704,"nodeType":"Block","src":"12192:74:10","statements":[{"expression":{"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2699,"nodeType":"ExpressionStatement","src":"12210:12:10"},{"expression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"12240:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2703,"nodeType":"ExpressionStatement","src":"12240:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"12283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2716,"nodeType":"IfStatement","src":"12279:64:10","trueBody":{"id":2715,"nodeType":"Block","src":"12299:44:10","statements":[{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"12317:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"12317:11:10"}]}}]},{"expression":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"12369:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2641,"id":2719,"nodeType":"Return","src":"12362:13:10"}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"11474:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2721,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:10","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"value","nameLocation":"11743:5:10","nodeType":"VariableDeclaration","scope":2721,"src":"11735:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:10"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2721,"src":"11773:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:10"},"scope":2761,"src":"11719:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2759,"nodeType":"Block","src":"12619:174:10","statements":[{"id":2758,"nodeType":"UncheckedBlock","src":"12629:158:10","statements":[{"assignments":[2733],"declarations":[{"constant":false,"id":2733,"mutability":"mutable","name":"result","nameLocation":"12661:6:10","nodeType":"VariableDeclaration","scope":2758,"src":"12653:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2737,"initialValue":{"arguments":[{"id":2735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"12677:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2734,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2721,2760],"referencedDeclaration":2721,"src":"12670:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"12704:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2739,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"12714:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2740,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"12726:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1902_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"12726:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2744,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"12747:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2747,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"12762:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:10","trueExpression":{"hexValue":"31","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2755,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2731,"id":2757,"nodeType":"Return","src":"12697:79:10"}]}]},"documentation":{"id":2722,"nodeType":"StructuredDocumentation","src":"12388:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2760,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:10","nodeType":"FunctionDefinition","parameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"value","nameLocation":"12561:5:10","nodeType":"VariableDeclaration","scope":2760,"src":"12553:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2723,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2727,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:10","nodeType":"VariableDeclaration","scope":2760,"src":"12568:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2726,"nodeType":"UserDefinedTypeName","pathNode":{"id":2725,"name":"Rounding","nameLocations":["12568:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1902,"src":"12568:8:10"},"referencedDeclaration":1902,"src":"12568:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1902","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:10"},"returnParameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2760,"src":"12610:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2729,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:10"},"scope":2761,"src":"12537:256:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2762,"src":"202:12593:10","usedErrors":[]}],"src":"103:12693:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2866]},"id":2867,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2763,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2764,"nodeType":"StructuredDocumentation","src":"134:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2866,"linearizedBaseContracts":[2866],"name":"SignedMathUpgradeable","nameLocation":"223:21:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2781,"nodeType":"Block","src":"386:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"403:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2775,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"407:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2778,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"415:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:11","trueExpression":{"id":2777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"411:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2773,"id":2780,"nodeType":"Return","src":"396:20:11"}]},"documentation":{"id":2765,"nodeType":"StructuredDocumentation","src":"251:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:11","nodeType":"FunctionDefinition","parameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"a","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2782,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2766,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2769,"mutability":"mutable","name":"b","nameLocation":"352:1:11","nodeType":"VariableDeclaration","scope":2782,"src":"345:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2768,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:11"},"returnParameters":{"id":2773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2782,"src":"378:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2771,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:11"},"scope":2866,"src":"322:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2799,"nodeType":"Block","src":"565:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"582:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2793,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"586:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2796,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"594:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:11","trueExpression":{"id":2795,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2791,"id":2798,"nodeType":"Return","src":"575:20:11"}]},"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"429:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2800,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:11","nodeType":"FunctionDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"a","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2800,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2784,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"b","nameLocation":"531:1:11","nodeType":"VariableDeclaration","scope":2800,"src":"524:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2786,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:11"},"returnParameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2800,"src":"557:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2789,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:11"},"scope":2866,"src":"501:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2843,"nodeType":"Block","src":"807:162:11","statements":[{"assignments":[2811],"declarations":[{"constant":false,"id":2811,"mutability":"mutable","name":"x","nameLocation":"876:1:11","nodeType":"VariableDeclaration","scope":2843,"src":"869:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2810,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2824,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"881:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2813,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"885:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2816,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2817,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"896:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2819,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2822,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"921:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2830,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:11","typeDescriptions":{}}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2826,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:11","typeDescriptions":{}}},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2835,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2836,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"959:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2838,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2809,"id":2842,"nodeType":"Return","src":"914:48:11"}]},"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"608:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2844,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:11","nodeType":"FunctionDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"a","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2844,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2802,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"b","nameLocation":"773:1:11","nodeType":"VariableDeclaration","scope":2844,"src":"766:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2804,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:11"},"returnParameters":{"id":2809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2844,"src":"799:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2807,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:11"},"scope":2866,"src":"739:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2864,"nodeType":"Block","src":"1113:158:11","statements":[{"id":2863,"nodeType":"UncheckedBlock","src":"1123:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"1238:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:11","subExpression":{"id":2858,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"1252:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:11","trueExpression":{"id":2857,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"1247:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:11","typeDescriptions":{}}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2851,"id":2862,"nodeType":"Return","src":"1223:31:11"}]}]},"documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"975:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2865,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:11","nodeType":"FunctionDefinition","parameters":{"id":2848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"n","nameLocation":"1078:1:11","nodeType":"VariableDeclaration","scope":2865,"src":"1071:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2846,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:11"},"returnParameters":{"id":2851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2865,"src":"1104:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:11"},"scope":2866,"src":"1058:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2867,"src":"215:1058:11","usedErrors":[]}],"src":"109:1165:11"},"id":11},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2944]},"id":2945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2868,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2869,"nodeType":"StructuredDocumentation","src":"131:70:12","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2944,"linearizedBaseContracts":[2944],"name":"IERC20","nameLocation":"212:6:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2870,"nodeType":"StructuredDocumentation","src":"225:158:12","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2878,"name":"Transfer","nameLocation":"394:8:12","nodeType":"EventDefinition","parameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2872,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:12","nodeType":"VariableDeclaration","scope":2878,"src":"403:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2871,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2874,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:12","nodeType":"VariableDeclaration","scope":2878,"src":"425:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2873,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2876,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:12","nodeType":"VariableDeclaration","scope":2878,"src":"445:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2875,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:12"},"src":"388:72:12"},{"anonymous":false,"documentation":{"id":2879,"nodeType":"StructuredDocumentation","src":"466:148:12","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2887,"name":"Approval","nameLocation":"625:8:12","nodeType":"EventDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:12","nodeType":"VariableDeclaration","scope":2887,"src":"634:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2880,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2883,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:12","nodeType":"VariableDeclaration","scope":2887,"src":"657:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2882,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2885,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:12","nodeType":"VariableDeclaration","scope":2887,"src":"682:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2884,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:12"},"src":"619:78:12"},{"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"703:66:12","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2893,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:12","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"794:2:12"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2893,"src":"820:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:12"},"scope":2944,"src":"774:55:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2894,"nodeType":"StructuredDocumentation","src":"835:72:12","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2901,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:12","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"account","nameLocation":"939:7:12","nodeType":"VariableDeclaration","scope":2901,"src":"931:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2895,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:12"},"returnParameters":{"id":2900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"971:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:12"},"scope":2944,"src":"912:68:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2902,"nodeType":"StructuredDocumentation","src":"986:202:12","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2911,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:12","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"to","nameLocation":"1219:2:12","nodeType":"VariableDeclaration","scope":2911,"src":"1211:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2903,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"amount","nameLocation":"1231:6:12","nodeType":"VariableDeclaration","scope":2911,"src":"1223:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:12"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"1257:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2908,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:12"},"scope":2944,"src":"1193:70:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"1269:264:12","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2921,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:12","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"owner","nameLocation":"1565:5:12","nodeType":"VariableDeclaration","scope":2921,"src":"1557:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2913,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"spender","nameLocation":"1580:7:12","nodeType":"VariableDeclaration","scope":2921,"src":"1572:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:12"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2921,"src":"1612:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:12"},"scope":2944,"src":"1538:83:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2922,"nodeType":"StructuredDocumentation","src":"1627:642:12","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2931,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:12","nodeType":"FunctionDefinition","parameters":{"id":2927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2924,"mutability":"mutable","name":"spender","nameLocation":"2299:7:12","nodeType":"VariableDeclaration","scope":2931,"src":"2291:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2923,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2926,"mutability":"mutable","name":"amount","nameLocation":"2316:6:12","nodeType":"VariableDeclaration","scope":2931,"src":"2308:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:12"},"returnParameters":{"id":2930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2931,"src":"2342:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2928,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:12"},"scope":2944,"src":"2274:74:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2932,"nodeType":"StructuredDocumentation","src":"2354:287:12","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2943,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:12","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"from","nameLocation":"2676:4:12","nodeType":"VariableDeclaration","scope":2943,"src":"2668:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2933,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"to","nameLocation":"2690:2:12","nodeType":"VariableDeclaration","scope":2943,"src":"2682:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2935,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"amount","nameLocation":"2702:6:12","nodeType":"VariableDeclaration","scope":2943,"src":"2694:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2937,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:12"},"returnParameters":{"id":2942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2943,"src":"2728:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2940,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:12"},"scope":2944,"src":"2646:88:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2945,"src":"202:2534:12","usedErrors":[]}],"src":"106:2631:12"},"id":12},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1249],"ContextUpgradeable":[1300],"ECDSAUpgradeable":[1895],"IERC20":[2944],"IERC20PermitUpgradeable":[543],"IERC20Upgradeable":[507],"IPaycrest":[4022],"Initializable":[301],"MathUpgradeable":[2761],"PausableUpgradeable":[429],"Paycrest":[3599],"PaycrestSettingManager":[3830],"SafeERC20Upgradeable":[919],"SharedStructs":[4035],"SignedMathUpgradeable":[2866],"StringsUpgradeable":[1529]},"id":3600,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2946,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":2947,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":1896,"src":"65:85:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":2948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":430,"src":"151:78:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":2949,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":920,"src":"230:88:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":2951,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":3831,"src":"320:68:13","symbolAliases":[{"foreign":{"id":2950,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"328:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IPaycrest.sol","file":"./interfaces/IPaycrest.sol","id":2954,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":4023,"src":"389:61:13","symbolAliases":[{"foreign":{"id":2952,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"397:9:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2953,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"408:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/libraries/SharedStructs.sol","file":"./libraries/SharedStructs.sol","id":2956,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3600,"sourceUnit":4036,"src":"451:60:13","symbolAliases":[{"foreign":{"id":2955,"name":"SharedStructs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"459:13:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2958,"name":"IPaycrest","nameLocations":["624:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":4022,"src":"624:9:13"},"id":2959,"nodeType":"InheritanceSpecifier","src":"624:9:13"},{"baseName":{"id":2960,"name":"PaycrestSettingManager","nameLocations":["635:22:13"],"nodeType":"IdentifierPath","referencedDeclaration":3830,"src":"635:22:13"},"id":2961,"nodeType":"InheritanceSpecifier","src":"635:22:13"},{"baseName":{"id":2962,"name":"PausableUpgradeable","nameLocations":["659:19:13"],"nodeType":"IdentifierPath","referencedDeclaration":429,"src":"659:19:13"},"id":2963,"nodeType":"InheritanceSpecifier","src":"659:19:13"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","documentation":{"id":2957,"nodeType":"StructuredDocumentation","src":"513:89:13","text":" @title Paycrest\n @dev Paycrest contract for handling orders and settlements."},"fullyImplemented":true,"id":3599,"linearizedBaseContracts":[3599,429,3830,132,1300,301,4022],"name":"Paycrest","nameLocation":"612:8:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2967,"libraryName":{"id":2964,"name":"SafeERC20Upgradeable","nameLocations":["691:20:13"],"nodeType":"IdentifierPath","referencedDeclaration":919,"src":"691:20:13"},"nodeType":"UsingForDirective","src":"685:38:13","typeName":{"id":2966,"nodeType":"UserDefinedTypeName","pathNode":{"id":2965,"name":"IERC20","nameLocations":["716:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":2944,"src":"716:6:13"},"referencedDeclaration":2944,"src":"716:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}}},{"global":false,"id":2970,"libraryName":{"id":2968,"name":"ECDSAUpgradeable","nameLocations":["734:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1895,"src":"734:16:13"},"nodeType":"UsingForDirective","src":"728:35:13","typeName":{"id":2969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"755:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":2975,"members":[{"constant":false,"id":2972,"mutability":"mutable","name":"protocolFee","nameLocation":"798:11:13","nodeType":"VariableDeclaration","scope":2975,"src":"790:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2971,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"827:23:13","nodeType":"VariableDeclaration","scope":2975,"src":"819:31:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2973,"name":"uint256","nodeType":"ElementaryTypeName","src":"819:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"776:3:13","nodeType":"StructDefinition","scope":3599,"src":"769:88:13","visibility":"public"},{"constant":false,"id":2980,"mutability":"mutable","name":"order","nameLocation":"897:5:13","nodeType":"VariableDeclaration","scope":3599,"src":"863:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":2979,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2976,"name":"bytes32","nodeType":"ElementaryTypeName","src":"871:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"863:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2978,"nodeType":"UserDefinedTypeName","pathNode":{"id":2977,"name":"Order","nameLocations":["882:5:13"],"nodeType":"IdentifierPath","referencedDeclaration":3917,"src":"882:5:13"},"referencedDeclaration":3917,"src":"882:5:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":2984,"mutability":"mutable","name":"_nonce","nameLocation":"944:6:13","nodeType":"VariableDeclaration","scope":3599,"src":"908:42:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2983,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"916:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"908:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2988,"mutability":"mutable","name":"__gap","nameLocation":"976:5:13","nodeType":"VariableDeclaration","scope":3599,"src":"956:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2987,"length":{"hexValue":"3530","id":2986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"964:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"956:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":2995,"nodeType":"Block","src":"1055:39:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2992,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1065:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2994,"nodeType":"ExpressionStatement","src":"1065:22:13"}]},"documentation":{"id":2989,"nodeType":"StructuredDocumentation","src":"988:48:13","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2996,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[],"src":"1052:2:13"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[],"src":"1055:0:13"},"scope":3599,"src":"1041:53:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3012,"nodeType":"Block","src":"1192:87:13","statements":[{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"1202:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1212:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"1202:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3005,"nodeType":"ExpressionStatement","src":"1202:17:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3006,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1229:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1229:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3008,"nodeType":"ExpressionStatement","src":"1229:16:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3009,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1255:15:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"1255:17:13"}]},"documentation":{"id":2997,"nodeType":"StructuredDocumentation","src":"1100:44:13","text":" @dev Initialize function."},"functionSelector":"8129fc1c","id":3013,"implemented":true,"kind":"function","modifiers":[{"id":3000,"kind":"modifierInvocation","modifierName":{"id":2999,"name":"initializer","nameLocations":["1180:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":203,"src":"1180:11:13"},"nodeType":"ModifierInvocation","src":"1180:11:13"}],"name":"initialize","nameLocation":"1158:10:13","nodeType":"FunctionDefinition","parameters":{"id":2998,"nodeType":"ParameterList","parameters":[],"src":"1168:2:13"},"returnParameters":{"id":3001,"nodeType":"ParameterList","parameters":[],"src":"1192:0:13"},"scope":3599,"src":"1149:130:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3025,"nodeType":"Block","src":"1398:87:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3017,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1416:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1420:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1416:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3019,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"1430:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1416:32:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7941676772656761746f72","id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1450:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""},"value":"OnlyAggregator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""}],"id":3016,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1408:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1408:59:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3023,"nodeType":"ExpressionStatement","src":"1408:59:13"},{"id":3024,"nodeType":"PlaceholderStatement","src":"1477:1:13"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"1285:84:13","text":" @dev Modifier that allows only the aggregator to call a function."},"id":3026,"name":"onlyAggregator","nameLocation":"1383:14:13","nodeType":"ModifierDefinition","parameters":{"id":3015,"nodeType":"ParameterList","parameters":[],"src":"1398:0:13"},"src":"1374:111:13","virtual":false,"visibility":"internal"},{"body":{"id":3035,"nodeType":"Block","src":"1771:25:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3032,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"1781:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1781:8:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3034,"nodeType":"ExpressionStatement","src":"1781:8:13"}]},"documentation":{"id":3027,"nodeType":"StructuredDocumentation","src":"1687:43:13","text":" @dev Pause the contract."},"functionSelector":"8456cb59","id":3036,"implemented":true,"kind":"function","modifiers":[{"id":3030,"kind":"modifierInvocation","modifierName":{"id":3029,"name":"onlyOwner","nameLocations":["1761:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"1761:9:13"},"nodeType":"ModifierInvocation","src":"1761:9:13"}],"name":"pause","nameLocation":"1744:5:13","nodeType":"FunctionDefinition","parameters":{"id":3028,"nodeType":"ParameterList","parameters":[],"src":"1749:2:13"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[],"src":"1771:0:13"},"scope":3599,"src":"1735:61:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3045,"nodeType":"Block","src":"1890:27:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3042,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"1900:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1900:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3044,"nodeType":"ExpressionStatement","src":"1900:10:13"}]},"documentation":{"id":3037,"nodeType":"StructuredDocumentation","src":"1802:45:13","text":" @dev Unpause the contract."},"functionSelector":"3f4ba83a","id":3046,"implemented":true,"kind":"function","modifiers":[{"id":3040,"kind":"modifierInvocation","modifierName":{"id":3039,"name":"onlyOwner","nameLocations":["1880:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"1880:9:13"},"nodeType":"ModifierInvocation","src":"1880:9:13"}],"name":"unpause","nameLocation":"1861:7:13","nodeType":"FunctionDefinition","parameters":{"id":3038,"nodeType":"ParameterList","parameters":[],"src":"1868:2:13"},"returnParameters":{"id":3041,"nodeType":"ParameterList","parameters":[],"src":"1890:0:13"},"scope":3599,"src":"1852:65:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3941],"body":{"id":3173,"nodeType":"Block","src":"2506:1284:13","statements":[{"expression":{"arguments":[{"id":3073,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"2561:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3074,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"2569:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3075,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"2578:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3076,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"2594:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3077,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2615:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3078,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"2627:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3072,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"2552:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,uint256,bytes32) view"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:92:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3080,"nodeType":"ExpressionStatement","src":"2552:92:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3084,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"2701:11:13","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2695:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3082,"name":"bytes","nodeType":"ElementaryTypeName","src":"2695:5:13","typeDescriptions":{}}},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2695:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2714:6:13","memberName":"length","nodeType":"MemberAccess","src":"2695:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2723:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2695:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69644d65737361676548617368","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2726:20:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","typeString":"literal_string \"InvalidMessageHash\""},"value":"InvalidMessageHash"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","typeString":"literal_string \"InvalidMessageHash\""}],"id":3081,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2687:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2687:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3091,"nodeType":"ExpressionStatement","src":"2687:60:13"},{"expression":{"arguments":[{"expression":{"id":3096,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2840:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2844:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2840:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3100,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2860:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$3599","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$3599","typeString":"contract Paycrest"}],"id":3099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2852:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3098,"name":"address","nodeType":"ElementaryTypeName","src":"2852:7:13","typeDescriptions":{}}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3102,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"2867:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3103,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2877:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2867:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3093,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"2819:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3092,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"2812:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2827:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2943,"src":"2812:27:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:76:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3106,"nodeType":"ExpressionStatement","src":"2812:76:13"},{"expression":{"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2955:21:13","subExpression":{"baseExpression":{"id":3107,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2955:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3110,"indexExpression":{"expression":{"id":3108,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2962:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2966:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2962:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2955:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3112,"nodeType":"ExpressionStatement","src":"2955:21:13"},{"expression":{"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3113,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3042:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3117,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3073:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3077:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3073:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3119,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"3085:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3122,"indexExpression":{"expression":{"id":3120,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3092:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3096:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3092:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3085:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3115,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3062:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3066:6:13","memberName":"encode","nodeType":"MemberAccess","src":"3062:10:13","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3114,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3052:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3042:63:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3126,"nodeType":"ExpressionStatement","src":"3042:63:13"},{"assignments":[3128],"declarations":[{"constant":false,"id":3128,"mutability":"mutable","name":"_protocolFee","nameLocation":"3155:12:13","nodeType":"VariableDeclaration","scope":3173,"src":"3147:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3147:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3135,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3129,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3171:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3130,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"3181:18:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3171:28:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3170:30:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3133,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"3203:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3170:40:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3147:63:13"},{"expression":{"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3136,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"3220:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3138,"indexExpression":{"id":3137,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3226:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3220:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3140,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3265:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3269:6:13","memberName":"sender","nodeType":"MemberAccess","src":"3265:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3142,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"3296:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3143,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"3336:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3144,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"3380:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3145,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"3417:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3146,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"3449:5:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3481:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3148,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3515:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3151,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"3562:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3555:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":3149,"name":"uint64","nodeType":"ElementaryTypeName","src":"3555:6:13","typeDescriptions":{}}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3555:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3153,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3592:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3154,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"3602:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3592:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3139,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3917,"src":"3237:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$3917_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3257:6:13","3289:5:13","3316:18:13","3369:9:13","3404:11:13","3443:4:13","3468:11:13","3500:13:13","3543:10:13","3584:6:13"],"names":["seller","token","senderFeeRecipient","senderFee","protocolFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"3237:388:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"3220:405:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3158,"nodeType":"ExpressionStatement","src":"3220:405:13"},{"eventCall":{"arguments":[{"id":3160,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"3684:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3161,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"3692:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3163,"indexExpression":{"id":3162,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3698:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3692:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3707:6:13","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3916,"src":"3692:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3165,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"3715:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3166,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"3729:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3167,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"3738:5:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3168,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"3745:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3169,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"3763:6:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3170,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"3771:11:13","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3159,"name":"OrderCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"3671:12:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes32,uint256,bytes32,bytes32,string memory)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3671:112:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3172,"nodeType":"EmitStatement","src":"3666:117:13"}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"2118:40:13","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"2654ec7e","id":3174,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3068,"kind":"modifierInvocation","modifierName":{"id":3067,"name":"whenNotPaused","nameLocations":["2465:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":351,"src":"2465:13:13"},"nodeType":"ModifierInvocation","src":"2465:15:13"}],"name":"createOrder","nameLocation":"2172:11:13","nodeType":"FunctionDefinition","parameters":{"id":3066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"_token","nameLocation":"2201:6:13","nodeType":"VariableDeclaration","scope":3174,"src":"2193:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3048,"name":"address","nodeType":"ElementaryTypeName","src":"2193:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"_amount","nameLocation":"2226:7:13","nodeType":"VariableDeclaration","scope":3174,"src":"2218:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3050,"name":"uint256","nodeType":"ElementaryTypeName","src":"2218:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3053,"mutability":"mutable","name":"_institutionCode","nameLocation":"2251:16:13","nodeType":"VariableDeclaration","scope":3174,"src":"2243:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2243:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3055,"mutability":"mutable","name":"_label","nameLocation":"2285:6:13","nodeType":"VariableDeclaration","scope":3174,"src":"2277:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2277:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3057,"mutability":"mutable","name":"_rate","nameLocation":"2308:5:13","nodeType":"VariableDeclaration","scope":3174,"src":"2301:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3056,"name":"uint96","nodeType":"ElementaryTypeName","src":"2301:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3059,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"2332:19:13","nodeType":"VariableDeclaration","scope":3174,"src":"2324:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3058,"name":"address","nodeType":"ElementaryTypeName","src":"2324:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3061,"mutability":"mutable","name":"_senderFee","nameLocation":"2369:10:13","nodeType":"VariableDeclaration","scope":3174,"src":"2361:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3060,"name":"uint256","nodeType":"ElementaryTypeName","src":"2361:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3063,"mutability":"mutable","name":"_refundAddress","nameLocation":"2397:14:13","nodeType":"VariableDeclaration","scope":3174,"src":"2389:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3062,"name":"address","nodeType":"ElementaryTypeName","src":"2389:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3065,"mutability":"mutable","name":"messageHash","nameLocation":"2438:11:13","nodeType":"VariableDeclaration","scope":3174,"src":"2422:27:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3064,"name":"string","nodeType":"ElementaryTypeName","src":"2422:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2183:272:13"},"returnParameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"orderId","nameLocation":"2497:7:13","nodeType":"VariableDeclaration","scope":3174,"src":"2489:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3069,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2489:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2488:17:13"},"scope":3599,"src":"2163:1627:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3242,"nodeType":"Block","src":"4460:420:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3191,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"4478:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3193,"indexExpression":{"id":3192,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"4496:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4478:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4505:19:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":3190,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4470:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4470:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3196,"nodeType":"ExpressionStatement","src":"4470:55:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3198,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"4543:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4553:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4543:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":3201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4556:14:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":3197,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4535:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4535:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3203,"nodeType":"ExpressionStatement","src":"4535:36:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"4589:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4615:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4607:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3206,"name":"address","nodeType":"ElementaryTypeName","src":"4607:7:13","typeDescriptions":{}}},"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4607:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4589:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4619:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4581:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4581:57:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3213,"nodeType":"ExpressionStatement","src":"4581:57:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3215,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"4656:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4034_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.InstitutionByCode storage ref)"}},"id":3217,"indexExpression":{"id":3216,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"4684:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4656:45:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage","typeString":"struct SharedStructs.InstitutionByCode storage ref"}},"id":3218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4702:4:13","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4031,"src":"4656:50:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4718:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4710:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:13","typeDescriptions":{}}},"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4710:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4656:64:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4722:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""},"value":"InvalidInstitutionCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""}],"id":3214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4648:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:99:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3226,"nodeType":"ExpressionStatement","src":"4648:99:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3227,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"4762:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4775:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4762:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3241,"nodeType":"IfStatement","src":"4758:116:13","trueBody":{"id":3240,"nodeType":"Block","src":"4778:96:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3231,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"4800:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4831:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4823:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3232,"name":"address","nodeType":"ElementaryTypeName","src":"4823:7:13","typeDescriptions":{}}},"id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4800:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696453656e646572466565526563697069656e74","id":3237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4835:27:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""},"value":"InvalidSenderFeeRecipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""}],"id":3230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4792:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4792:71:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3239,"nodeType":"ExpressionStatement","src":"4792:71:13"}]}}]},"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"3796:495:13","text":" @dev Internal function to handle order creation.\n @param _token The address of the token being traded.\n @param _amount The amount of tokens being traded.\n @param _refundAddress The address to refund the tokens in case of cancellation.\n @param _senderFeeRecipient The address of the recipient for the sender fee.\n @param _senderFee The amount of the sender fee.\n @param _institutionCode The code of the institution associated with the order."},"id":3243,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"4305:8:13","nodeType":"FunctionDefinition","parameters":{"id":3188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"_token","nameLocation":"4322:6:13","nodeType":"VariableDeclaration","scope":3243,"src":"4314:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3176,"name":"address","nodeType":"ElementaryTypeName","src":"4314:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"_amount","nameLocation":"4338:7:13","nodeType":"VariableDeclaration","scope":3243,"src":"4330:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"4330:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"_refundAddress","nameLocation":"4355:14:13","nodeType":"VariableDeclaration","scope":3243,"src":"4347:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3180,"name":"address","nodeType":"ElementaryTypeName","src":"4347:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3183,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4379:19:13","nodeType":"VariableDeclaration","scope":3243,"src":"4371:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3182,"name":"address","nodeType":"ElementaryTypeName","src":"4371:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"_senderFee","nameLocation":"4408:10:13","nodeType":"VariableDeclaration","scope":3243,"src":"4400:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3187,"mutability":"mutable","name":"_institutionCode","nameLocation":"4428:16:13","nodeType":"VariableDeclaration","scope":3243,"src":"4420:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4420:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4313:132:13"},"returnParameters":{"id":3189,"nodeType":"ParameterList","parameters":[],"src":"4460:0:13"},"scope":3599,"src":"4296:584:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3959],"body":{"id":3355,"nodeType":"Block","src":"5351:1114:13","statements":[{"expression":{"arguments":[{"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5426:28:13","subExpression":{"expression":{"baseExpression":{"id":3264,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5427:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3266,"indexExpression":{"id":3265,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5433:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5427:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5443:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"5427:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5456:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3263,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5418:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5418:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3271,"nodeType":"ExpressionStatement","src":"5418:55:13"},{"assignments":[3273],"declarations":[{"constant":false,"id":3273,"mutability":"mutable","name":"token","nameLocation":"5530:5:13","nodeType":"VariableDeclaration","scope":3355,"src":"5522:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"5522:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3278,"initialValue":{"expression":{"baseExpression":{"id":3274,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5538:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3276,"indexExpression":{"id":3275,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5544:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5538:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5554:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"5538:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5522:37:13"},{"expression":{"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3279,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5638:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3281,"indexExpression":{"id":3280,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5644:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5638:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5654:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3914,"src":"5638:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3283,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"5668:14:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5638:44:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3285,"nodeType":"ExpressionStatement","src":"5638:44:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3286,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5696:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3288,"indexExpression":{"id":3287,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5702:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5696:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5712:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3914,"src":"5696:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5726:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5696:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3331,"nodeType":"IfStatement","src":"5693:492:13","trueBody":{"id":3330,"nodeType":"Block","src":"5729:456:13","statements":[{"expression":{"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3292,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5797:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3294,"indexExpression":{"id":3293,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5803:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5797:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5813:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"5797:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5827:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5797:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3298,"nodeType":"ExpressionStatement","src":"5797:34:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3299,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"5850:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3301,"indexExpression":{"id":3300,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5856:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5850:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5866:9:13","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"5850:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5878:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5850:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3310,"nodeType":"IfStatement","src":"5846:136:13","trueBody":{"id":3309,"nodeType":"Block","src":"5881:101:13","statements":[{"expression":{"arguments":[{"id":3306,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5957:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3305,"name":"_transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"5938:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5938:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3308,"nodeType":"ExpressionStatement","src":"5938:28:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3311,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6000:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3313,"indexExpression":{"id":3312,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"6006:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6000:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6016:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3906,"src":"6000:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6030:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6000:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3329,"nodeType":"IfStatement","src":"5996:179:13","trueBody":{"id":3328,"nodeType":"Block","src":"6033:142:13","statements":[{"expression":{"arguments":[{"id":3321,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"6115:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3322,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6132:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3324,"indexExpression":{"id":3323,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"6138:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6132:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6148:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3906,"src":"6132:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3318,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"6099:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3317,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"6092:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6092:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6106:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"6092:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6092:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3327,"nodeType":"ExpressionStatement","src":"6092:68:13"}]}}]}},{"expression":{"arguments":[{"id":3336,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6261:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3337,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6281:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3339,"indexExpression":{"id":3338,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"6287:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6281:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6297:6:13","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3916,"src":"6281:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3333,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"6245:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3332,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"6238:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6238:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6252:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"6238:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6238:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3342,"nodeType":"ExpressionStatement","src":"6238:66:13"},{"eventCall":{"arguments":[{"id":3344,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"6355:13:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3345,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"6370:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3346,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"6380:6:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3347,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"6389:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3348,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"6409:14:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3343,"name":"OrderSettled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"6342:12:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,bytes32,address,uint96)"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6342:82:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3350,"nodeType":"EmitStatement","src":"6337:87:13"},{"expression":{"components":[{"id":3351,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"6442:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3352,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"6452:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6441:17:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_address_$","typeString":"tuple(bytes32,address)"}},"functionReturnParameters":3262,"id":3354,"nodeType":"Return","src":"6434:24:13"}]},"documentation":{"id":3244,"nodeType":"StructuredDocumentation","src":"5087:35:13","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"9015dced","id":3356,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3257,"kind":"modifierInvocation","modifierName":{"id":3256,"name":"onlyAggregator","nameLocations":["5308:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3026,"src":"5308:14:13"},"nodeType":"ModifierInvocation","src":"5308:16:13"}],"name":"settle","nameLocation":"5136:6:13","nodeType":"FunctionDefinition","parameters":{"id":3255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3246,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5160:13:13","nodeType":"VariableDeclaration","scope":3356,"src":"5152:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3248,"mutability":"mutable","name":"_orderId","nameLocation":"5191:8:13","nodeType":"VariableDeclaration","scope":3356,"src":"5183:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3247,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5183:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3250,"mutability":"mutable","name":"_label","nameLocation":"5218:6:13","nodeType":"VariableDeclaration","scope":3356,"src":"5210:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5210:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5242:18:13","nodeType":"VariableDeclaration","scope":3356,"src":"5234:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3251,"name":"address","nodeType":"ElementaryTypeName","src":"5234:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3254,"mutability":"mutable","name":"_settlePercent","nameLocation":"5278:14:13","nodeType":"VariableDeclaration","scope":3356,"src":"5271:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3253,"name":"uint64","nodeType":"ElementaryTypeName","src":"5271:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5142:156:13"},"returnParameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3356,"src":"5333:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5333:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3356,"src":"5342:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3260,"name":"address","nodeType":"ElementaryTypeName","src":"5342:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5332:18:13"},"scope":3599,"src":"5127:1338:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3392,"nodeType":"Block","src":"6644:292:13","statements":[{"assignments":[3363],"declarations":[{"constant":false,"id":3363,"mutability":"mutable","name":"recipient","nameLocation":"6662:9:13","nodeType":"VariableDeclaration","scope":3392,"src":"6654:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3362,"name":"address","nodeType":"ElementaryTypeName","src":"6654:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3368,"initialValue":{"expression":{"baseExpression":{"id":3364,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6674:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3366,"indexExpression":{"id":3365,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"6680:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6674:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6690:18:13","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":3902,"src":"6674:34:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6654:54:13"},{"assignments":[3370],"declarations":[{"constant":false,"id":3370,"mutability":"mutable","name":"_fee","nameLocation":"6726:4:13","nodeType":"VariableDeclaration","scope":3392,"src":"6718:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3369,"name":"uint256","nodeType":"ElementaryTypeName","src":"6718:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3375,"initialValue":{"expression":{"baseExpression":{"id":3371,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6733:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3373,"indexExpression":{"id":3372,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"6739:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6733:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6749:9:13","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3904,"src":"6733:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6718:40:13"},{"expression":{"arguments":[{"id":3383,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"6838:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3384,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"6849:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3377,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"6806:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3379,"indexExpression":{"id":3378,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"6812:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6806:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6822:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"6806:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3376,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"6799:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6829:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"6799:38:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3386,"nodeType":"ExpressionStatement","src":"6799:55:13"},{"eventCall":{"arguments":[{"id":3388,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"6913:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3389,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"6924:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3387,"name":"SenderFeeTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3885,"src":"6892:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3391,"nodeType":"EmitStatement","src":"6887:42:13"}]},"documentation":{"id":3357,"nodeType":"StructuredDocumentation","src":"6471:113:13","text":" @dev Internal function to transfer the sender fee.\n @param _orderId The ID of the order."},"id":3393,"implemented":true,"kind":"function","modifiers":[],"name":"_transferSenderFee","nameLocation":"6598:18:13","nodeType":"FunctionDefinition","parameters":{"id":3360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3359,"mutability":"mutable","name":"_orderId","nameLocation":"6625:8:13","nodeType":"VariableDeclaration","scope":3393,"src":"6617:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6617:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6616:18:13"},"returnParameters":{"id":3361,"nodeType":"ParameterList","parameters":[],"src":"6644:0:13"},"scope":3599,"src":"6589:347:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3971],"body":{"id":3472,"nodeType":"Block","src":"7086:635:13","statements":[{"expression":{"arguments":[{"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7161:28:13","subExpression":{"expression":{"baseExpression":{"id":3408,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7162:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3410,"indexExpression":{"id":3409,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7168:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7162:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7178:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"7162:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7191:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3407,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7153:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7153:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3415,"nodeType":"ExpressionStatement","src":"7153:55:13"},{"assignments":[3417],"declarations":[{"constant":false,"id":3417,"mutability":"mutable","name":"refundAmount","nameLocation":"7267:12:13","nodeType":"VariableDeclaration","scope":3472,"src":"7259:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3416,"name":"uint256","nodeType":"ElementaryTypeName","src":"7259:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3424,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3418,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7282:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3420,"indexExpression":{"id":3419,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7288:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7282:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7298:6:13","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3916,"src":"7282:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3422,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"7307:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7282:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7259:52:13"},{"expression":{"arguments":[{"id":3432,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"7360:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3433,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"7377:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3426,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7328:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3428,"indexExpression":{"id":3427,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7334:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7328:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7344:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"7328:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3425,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7321:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7321:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7351:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"7321:38:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7321:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3435,"nodeType":"ExpressionStatement","src":"7321:61:13"},{"expression":{"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3436,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7423:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3438,"indexExpression":{"id":3437,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7429:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7423:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7439:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3910,"src":"7423:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7453:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7423:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3442,"nodeType":"ExpressionStatement","src":"7423:34:13"},{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3443,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7467:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3445,"indexExpression":{"id":3444,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7473:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7467:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3446,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7483:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3914,"src":"7467:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7496:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7467:30:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3449,"nodeType":"ExpressionStatement","src":"7467:30:13"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3457,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7596:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3459,"indexExpression":{"id":3458,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7602:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7596:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7612:13:13","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":3912,"src":"7596:29:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3461,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"7627:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3451,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"7564:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3453,"indexExpression":{"id":3452,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7570:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7564:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7580:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"7564:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3450,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"7557:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2944_$","typeString":"type(contract IERC20)"}},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7557:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2944","typeString":"contract IERC20"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7587:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"7557:38:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7557:83:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3463,"nodeType":"ExpressionStatement","src":"7557:83:13"},{"eventCall":{"arguments":[{"id":3465,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"7669:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3466,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"7675:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3467,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"7685:6:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3464,"name":"OrderRefunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3878,"src":"7655:13:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32,bytes32)"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7655:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3469,"nodeType":"EmitStatement","src":"7650:42:13"},{"expression":{"hexValue":"74727565","id":3470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7710:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3406,"id":3471,"nodeType":"Return","src":"7703:11:13"}]},"documentation":{"id":3394,"nodeType":"StructuredDocumentation","src":"6942:35:13","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"d28a8d32","id":3473,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3403,"kind":"modifierInvocation","modifierName":{"id":3402,"name":"onlyAggregator","nameLocations":["7055:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3026,"src":"7055:14:13"},"nodeType":"ModifierInvocation","src":"7055:16:13"}],"name":"refund","nameLocation":"6991:6:13","nodeType":"FunctionDefinition","parameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"_fee","nameLocation":"7006:4:13","nodeType":"VariableDeclaration","scope":3473,"src":"6998:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"6998:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3398,"mutability":"mutable","name":"_orderId","nameLocation":"7020:8:13","nodeType":"VariableDeclaration","scope":3473,"src":"7012:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7012:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3400,"mutability":"mutable","name":"_label","nameLocation":"7038:6:13","nodeType":"VariableDeclaration","scope":3473,"src":"7030:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3399,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7030:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6997:48:13"},"returnParameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3473,"src":"7080:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3404,"name":"bool","nodeType":"ElementaryTypeName","src":"7080:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7079:6:13"},"scope":3599,"src":"6982:739:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3988],"body":{"id":3486,"nodeType":"Block","src":"8044:39:13","statements":[{"expression":{"baseExpression":{"id":3482,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"8061:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3917_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3484,"indexExpression":{"id":3483,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"8067:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8061:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":3481,"id":3485,"nodeType":"Return","src":"8054:22:13"}]},"documentation":{"id":3474,"nodeType":"StructuredDocumentation","src":"7922:41:13","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":3487,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"7977:12:13","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"_orderId","nameLocation":"7998:8:13","nodeType":"VariableDeclaration","scope":3487,"src":"7990:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7990:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7989:18:13"},"returnParameters":{"id":3481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3487,"src":"8030:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3479,"nodeType":"UserDefinedTypeName","pathNode":{"id":3478,"name":"Order","nameLocations":["8030:5:13"],"nodeType":"IdentifierPath","referencedDeclaration":3917,"src":"8030:5:13"},"referencedDeclaration":3917,"src":"8030:5:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"8029:14:13"},"scope":3599,"src":"7968:115:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3979],"body":{"id":3499,"nodeType":"Block","src":"8209:49:13","statements":[{"expression":{"baseExpression":{"id":3495,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"8226:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3497,"indexExpression":{"id":3496,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"8244:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8226:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3494,"id":3498,"nodeType":"Return","src":"8219:32:13"}]},"documentation":{"id":3488,"nodeType":"StructuredDocumentation","src":"8089:45:13","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":3500,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"8148:16:13","nodeType":"FunctionDefinition","parameters":{"id":3491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3490,"mutability":"mutable","name":"_token","nameLocation":"8173:6:13","nodeType":"VariableDeclaration","scope":3500,"src":"8165:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3489,"name":"address","nodeType":"ElementaryTypeName","src":"8165:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8164:16:13"},"returnParameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3500,"src":"8203:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3492,"name":"bool","nodeType":"ElementaryTypeName","src":"8203:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8202:6:13"},"scope":3599,"src":"8139:119:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4011],"body":{"id":3513,"nodeType":"Block","src":"8443:58:13","statements":[{"expression":{"baseExpression":{"id":3509,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"8460:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4034_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.InstitutionByCode storage ref)"}},"id":3511,"indexExpression":{"id":3510,"name":"_code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"8488:5:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8460:34:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage","typeString":"struct SharedStructs.InstitutionByCode storage ref"}},"functionReturnParameters":3508,"id":3512,"nodeType":"Return","src":"8453:41:13"}]},"documentation":{"id":3501,"nodeType":"StructuredDocumentation","src":"8264:58:13","text":"@dev See {getSupportedInstitutionByCode-IPaycrest}. "},"functionSelector":"c2280103","id":3514,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionByCode","nameLocation":"8336:29:13","nodeType":"FunctionDefinition","parameters":{"id":3504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3503,"mutability":"mutable","name":"_code","nameLocation":"8374:5:13","nodeType":"VariableDeclaration","scope":3514,"src":"8366:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:15:13"},"returnParameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3514,"src":"8403:38:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_memory_ptr","typeString":"struct SharedStructs.InstitutionByCode"},"typeName":{"id":3506,"nodeType":"UserDefinedTypeName","pathNode":{"id":3505,"name":"SharedStructs.InstitutionByCode","nameLocations":["8403:13:13","8417:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"8403:31:13"},"referencedDeclaration":4034,"src":"8403:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage_ptr","typeString":"struct SharedStructs.InstitutionByCode"}},"visibility":"internal"}],"src":"8402:40:13"},"scope":3599,"src":"8327:174:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4021],"body":{"id":3575,"nodeType":"Block","src":"8676:433:13","statements":[{"assignments":[3529],"declarations":[{"constant":false,"id":3529,"mutability":"mutable","name":"institutions","nameLocation":"8721:12:13","nodeType":"VariableDeclaration","scope":3575,"src":"8686:47:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution[]"},"typeName":{"baseType":{"id":3527,"nodeType":"UserDefinedTypeName","pathNode":{"id":3526,"name":"SharedStructs.Institution","nameLocations":["8686:13:13","8700:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"8686:25:13"},"referencedDeclaration":4029,"src":"8686:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3528,"nodeType":"ArrayTypeName","src":"8686:27:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}},"visibility":"internal"}],"id":3533,"initialValue":{"baseExpression":{"id":3530,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"8736:21:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.Institution storage ref[] storage ref)"}},"id":3532,"indexExpression":{"id":3531,"name":"_currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"8758:9:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8736:32:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage","typeString":"struct SharedStructs.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8686:82:13"},{"assignments":[3535],"declarations":[{"constant":false,"id":3535,"mutability":"mutable","name":"length","nameLocation":"8786:6:13","nodeType":"VariableDeclaration","scope":3575,"src":"8778:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3534,"name":"uint256","nodeType":"ElementaryTypeName","src":"8778:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3538,"initialValue":{"expression":{"id":3536,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"8795:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8808:6:13","memberName":"length","nodeType":"MemberAccess","src":"8795:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8778:36:13"},{"assignments":[3544],"declarations":[{"constant":false,"id":3544,"mutability":"mutable","name":"result","nameLocation":"8859:6:13","nodeType":"VariableDeclaration","scope":3575,"src":"8824:41:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution[]"},"typeName":{"baseType":{"id":3542,"nodeType":"UserDefinedTypeName","pathNode":{"id":3541,"name":"SharedStructs.Institution","nameLocations":["8824:13:13","8838:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"8824:25:13"},"referencedDeclaration":4029,"src":"8824:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3543,"nodeType":"ArrayTypeName","src":"8824:27:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}},"visibility":"internal"}],"id":3551,"initialValue":{"arguments":[{"id":3549,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"8900:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8868:31:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct SharedStructs.Institution memory[] memory)"},"typeName":{"baseType":{"id":3546,"nodeType":"UserDefinedTypeName","pathNode":{"id":3545,"name":"SharedStructs.Institution","nameLocations":["8872:13:13","8886:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"8872:25:13"},"referencedDeclaration":4029,"src":"8872:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3547,"nodeType":"ArrayTypeName","src":"8872:27:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8868:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8824:83:13"},{"body":{"id":3571,"nodeType":"Block","src":"8960:111:13","statements":[{"expression":{"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3559,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"8974:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3561,"indexExpression":{"id":3560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8981:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8974:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3562,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"8986:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3564,"indexExpression":{"id":3563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8999:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8986:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}},"src":"8974:27:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}},"id":3566,"nodeType":"ExpressionStatement","src":"8974:27:13"},{"id":3570,"nodeType":"UncheckedBlock","src":"9015:46:13","statements":[{"expression":{"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9043:3:13","subExpression":{"id":3567,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9043:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3569,"nodeType":"ExpressionStatement","src":"9043:3:13"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8946:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3557,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"8950:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3572,"initializationExpression":{"assignments":[3553],"declarations":[{"constant":false,"id":3553,"mutability":"mutable","name":"i","nameLocation":"8939:1:13","nodeType":"VariableDeclaration","scope":3572,"src":"8931:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"8931:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3555,"initialValue":{"hexValue":"30","id":3554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8943:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8931:13:13"},"nodeType":"ForStatement","src":"8926:145:13"},{"expression":{"id":3573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"9096:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"functionReturnParameters":3523,"id":3574,"nodeType":"Return","src":"9089:13:13"}]},"documentation":{"id":3515,"nodeType":"StructuredDocumentation","src":"8507:53:13","text":"@dev See {getSupportedInstitutions-IPaycrest}. "},"functionSelector":"02621338","id":3576,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8574:24:13","nodeType":"FunctionDefinition","parameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"_currency","nameLocation":"8607:9:13","nodeType":"VariableDeclaration","scope":3576,"src":"8599:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8599:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8598:19:13"},"returnParameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3576,"src":"8640:34:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution[]"},"typeName":{"baseType":{"id":3520,"nodeType":"UserDefinedTypeName","pathNode":{"id":3519,"name":"SharedStructs.Institution","nameLocations":["8640:13:13","8654:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"8640:25:13"},"referencedDeclaration":4029,"src":"8640:25:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3521,"nodeType":"ArrayTypeName","src":"8640:27:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}},"visibility":"internal"}],"src":"8639:36:13"},"scope":3599,"src":"8565:544:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3996],"body":{"id":3588,"nodeType":"Block","src":"9249:52:13","statements":[{"expression":{"components":[{"id":3584,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"9266:18:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3585,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"9286:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3586,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9265:29:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint256)"}},"functionReturnParameters":3583,"id":3587,"nodeType":"Return","src":"9259:35:13"}]},"documentation":{"id":3577,"nodeType":"StructuredDocumentation","src":"9115:42:13","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":3589,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"9171:13:13","nodeType":"FunctionDefinition","parameters":{"id":3578,"nodeType":"ParameterList","parameters":[],"src":"9184:2:13"},"returnParameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"9218:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3579,"name":"uint64","nodeType":"ElementaryTypeName","src":"9218:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"9235:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3581,"name":"uint256","nodeType":"ElementaryTypeName","src":"9235:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9208:40:13"},"scope":3599,"src":"9162:139:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4002],"body":{"id":3597,"nodeType":"Block","src":"9415:35:13","statements":[{"expression":{"id":3595,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"9432:11:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":3594,"id":3596,"nodeType":"Return","src":"9425:18:13"}]},"documentation":{"id":3590,"nodeType":"StructuredDocumentation","src":"9307:42:13","text":"@dev See {getAggregator-IPaycrest}. "},"functionSelector":"3ad59dbc","id":3598,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"9363:13:13","nodeType":"FunctionDefinition","parameters":{"id":3591,"nodeType":"ParameterList","parameters":[],"src":"9376:2:13"},"returnParameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3598,"src":"9401:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3592,"name":"bytes","nodeType":"ElementaryTypeName","src":"9401:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9400:14:13"},"scope":3599,"src":"9354:96:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3600,"src":"603:8850:13","usedErrors":[]}],"src":"39:9415:13"},"id":13},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"ContextUpgradeable":[1300],"Initializable":[301],"OwnableUpgradeable":[132],"PaycrestSettingManager":[3830],"SharedStructs":[4035]},"id":3831,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3601,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"170:24:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3602,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3831,"sourceUnit":133,"src":"196:75:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/libraries/SharedStructs.sol","file":"./libraries/SharedStructs.sol","id":3604,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3831,"sourceUnit":4036,"src":"273:60:14","symbolAliases":[{"foreign":{"id":3603,"name":"SharedStructs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"281:13:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3605,"name":"OwnableUpgradeable","nameLocations":["370:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":132,"src":"370:18:14"},"id":3606,"nodeType":"InheritanceSpecifier","src":"370:18:14"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3830,"linearizedBaseContracts":[3830,132,1300,301],"name":"PaycrestSettingManager","nameLocation":"344:22:14","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3608,"mutability":"mutable","name":"MAX_BPS","nameLocation":"413:7:14","nodeType":"VariableDeclaration","scope":3830,"src":"396:24:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"396:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"442:18:14","nodeType":"VariableDeclaration","scope":3830,"src":"426:34:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3609,"name":"uint64","nodeType":"ElementaryTypeName","src":"426:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"treasuryAddress","nameLocation":"483:15:14","nodeType":"VariableDeclaration","scope":3830,"src":"466:32:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"466:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"_aggregatorAddress","nameLocation":"521:18:14","nodeType":"VariableDeclaration","scope":3830,"src":"504:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3613,"name":"address","nodeType":"ElementaryTypeName","src":"504:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"_aggregator","nameLocation":"560:11:14","nodeType":"VariableDeclaration","scope":3830,"src":"545:26:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":3615,"name":"bytes","nodeType":"ElementaryTypeName","src":"545:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"__gap","nameLocation":"711:5:14","nodeType":"VariableDeclaration","scope":3830,"src":"691:25:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"691:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3619,"length":{"hexValue":"3530","id":3618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"699:2:14","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"691:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"constant":false,"id":3624,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"757:17:14","nodeType":"VariableDeclaration","scope":3830,"src":"723:51:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3623,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"731:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"723:24:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3622,"name":"bool","nodeType":"ElementaryTypeName","src":"742:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"838:21:14","nodeType":"VariableDeclaration","scope":3830,"src":"781:78:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.Institution[])"},"typeName":{"id":3629,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"789:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"781:47:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"SharedStructs.Institution","nameLocations":["800:13:14","814:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"800:25:14"},"referencedDeclaration":4029,"src":"800:25:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3628,"nodeType":"ArrayTypeName","src":"800:27:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":3635,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"926:27:14","nodeType":"VariableDeclaration","scope":3830,"src":"865:88:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4034_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.InstitutionByCode)"},"typeName":{"id":3634,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"873:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"865:51:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4034_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3633,"nodeType":"UserDefinedTypeName","pathNode":{"id":3632,"name":"SharedStructs.InstitutionByCode","nameLocations":["884:13:14","898:17:14"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"884:31:14"},"referencedDeclaration":4034,"src":"884:31:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage_ptr","typeString":"struct SharedStructs.InstitutionByCode"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":3643,"name":"SettingManagerBool","nameLocation":"966:18:14","nodeType":"EventDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"993:4:14","nodeType":"VariableDeclaration","scope":3643,"src":"985:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"985:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3639,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1007:5:14","nodeType":"VariableDeclaration","scope":3643,"src":"999:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3638,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3641,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1019:6:14","nodeType":"VariableDeclaration","scope":3643,"src":"1014:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3640,"name":"bool","nodeType":"ElementaryTypeName","src":"1014:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"984:42:14"},"src":"960:67:14"},{"anonymous":false,"eventSelector":"b94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446","id":3647,"name":"ProtocolFeesUpdated","nameLocation":"1038:19:14","nodeType":"EventDefinition","parameters":{"id":3646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3645,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1065:11:14","nodeType":"VariableDeclaration","scope":3647,"src":"1058:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3644,"name":"uint64","nodeType":"ElementaryTypeName","src":"1058:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1057:20:14"},"src":"1032:46:14"},{"anonymous":false,"eventSelector":"d8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb","id":3651,"name":"ProtocolAddressesUpdated","nameLocation":"1089:24:14","nodeType":"EventDefinition","parameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"indexed":false,"mutability":"mutable","name":"treasuryAddress","nameLocation":"1122:15:14","nodeType":"VariableDeclaration","scope":3651,"src":"1114:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3648,"name":"address","nodeType":"ElementaryTypeName","src":"1114:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1113:25:14"},"src":"1083:56:14"},{"anonymous":false,"eventSelector":"6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef","id":3655,"name":"SetAggregator","nameLocation":"1150:13:14","nodeType":"EventDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3653,"indexed":false,"mutability":"mutable","name":"aggregator","nameLocation":"1170:10:14","nodeType":"VariableDeclaration","scope":3655,"src":"1164:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3652,"name":"bytes","nodeType":"ElementaryTypeName","src":"1164:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1163:18:14"},"src":"1144:38:14"},{"anonymous":false,"eventSelector":"2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73","id":3659,"name":"SetFeeRecipient","nameLocation":"1193:15:14","nodeType":"EventDefinition","parameters":{"id":3658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"indexed":false,"mutability":"mutable","name":"treasuryAddress","nameLocation":"1217:15:14","nodeType":"VariableDeclaration","scope":3659,"src":"1209:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3656,"name":"address","nodeType":"ElementaryTypeName","src":"1209:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1208:25:14"},"src":"1187:47:14"},{"body":{"id":3697,"nodeType":"Block","src":"1839:190:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3672,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"1857:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1866:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3673,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:14","typeDescriptions":{}}},"id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1857:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1878:24:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3671,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1849:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1849:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3680,"nodeType":"ExpressionStatement","src":"1849:54:14"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"1917:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":3682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1925:7:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1917:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3690,"nodeType":"IfStatement","src":"1913:54:14","trueBody":{"expression":{"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3684,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"1934:17:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3686,"indexExpression":{"id":3685,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"1952:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1934:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3687,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"1961:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1934:33:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3689,"nodeType":"ExpressionStatement","src":"1934:33:14"}},{"eventCall":{"arguments":[{"id":3692,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"2002:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"2008:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3694,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"2015:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3691,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"1983:18:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3696,"nodeType":"EmitStatement","src":"1978:44:14"}]},"documentation":{"id":3660,"nodeType":"StructuredDocumentation","src":"1441:304:14","text":" @dev Sets the boolean value for a specific setting.\n @param what The setting to be updated.\n @param value The address or value associated with the setting.\n @param status The boolean value to be set.\n Requirements:\n - The value must not be a zero address."},"functionSelector":"99e3c0b4","id":3698,"implemented":true,"kind":"function","modifiers":[{"id":3669,"kind":"modifierInvocation","modifierName":{"id":3668,"name":"onlyOwner","nameLocations":["1829:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"1829:9:14"},"nodeType":"ModifierInvocation","src":"1829:9:14"}],"name":"settingManagerBool","nameLocation":"1759:18:14","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3662,"mutability":"mutable","name":"what","nameLocation":"1786:4:14","nodeType":"VariableDeclaration","scope":3698,"src":"1778:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1778:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3664,"mutability":"mutable","name":"value","nameLocation":"1800:5:14","nodeType":"VariableDeclaration","scope":3698,"src":"1792:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3663,"name":"address","nodeType":"ElementaryTypeName","src":"1792:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"status","nameLocation":"1812:6:14","nodeType":"VariableDeclaration","scope":3698,"src":"1807:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3665,"name":"bool","nodeType":"ElementaryTypeName","src":"1807:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1777:42:14"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[],"src":"1839:0:14"},"scope":3830,"src":"1750:279:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3753,"nodeType":"Block","src":"2382:408:14","statements":[{"assignments":[3711],"declarations":[{"constant":false,"id":3711,"mutability":"mutable","name":"length","nameLocation":"2401:6:14","nodeType":"VariableDeclaration","scope":3753,"src":"2393:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2393:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3714,"initialValue":{"expression":{"id":3712,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"2410:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2423:6:14","memberName":"length","nodeType":"MemberAccess","src":"2410:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2393:36:14"},{"body":{"id":3751,"nodeType":"Block","src":"2470:314:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3726,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"2521:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3728,"indexExpression":{"id":3727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2534:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2521:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}],"expression":{"baseExpression":{"id":3722,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"2484:21:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.Institution storage ref[] storage ref)"}},"id":3724,"indexExpression":{"id":3723,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"2506:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2484:31:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage","typeString":"struct SharedStructs.Institution storage ref[] storage ref"}},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2516:4:14","memberName":"push","nodeType":"MemberAccess","src":"2484:36:14","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr_$_t_struct$_Institution_$4029_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr_$","typeString":"function (struct SharedStructs.Institution storage ref[] storage pointer,struct SharedStructs.Institution storage ref)"}},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3730,"nodeType":"ExpressionStatement","src":"2484:53:14"},{"expression":{"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3731,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"2551:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$4034_storage_$","typeString":"mapping(bytes32 => struct SharedStructs.InstitutionByCode storage ref)"}},"id":3736,"indexExpression":{"expression":{"baseExpression":{"id":3732,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"2579:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3734,"indexExpression":{"id":3733,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2592:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2579:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}},"id":3735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2595:4:14","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":4026,"src":"2579:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2551:49:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage","typeString":"struct SharedStructs.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3739,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"2659:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution memory[] memory"}},"id":3741,"indexExpression":{"id":3740,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2672:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2659:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_memory_ptr","typeString":"struct SharedStructs.Institution memory"}},"id":3742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2675:4:14","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":4028,"src":"2659:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3743,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"2691:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3737,"name":"SharedStructs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"2603:13:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SharedStructs_$4035_$","typeString":"type(library SharedStructs)"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:17:14","memberName":"InstitutionByCode","nodeType":"MemberAccess","referencedDeclaration":4034,"src":"2603:31:14","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$4034_storage_ptr_$","typeString":"type(struct SharedStructs.InstitutionByCode storage pointer)"}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2653:4:14","2681:8:14"],"names":["name","currency"],"nodeType":"FunctionCall","src":"2603:111:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_memory_ptr","typeString":"struct SharedStructs.InstitutionByCode memory"}},"src":"2551:163:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage","typeString":"struct SharedStructs.InstitutionByCode storage ref"}},"id":3746,"nodeType":"ExpressionStatement","src":"2551:163:14"},{"id":3750,"nodeType":"UncheckedBlock","src":"2728:46:14","statements":[{"expression":{"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2756:3:14","subExpression":{"id":3747,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2756:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3749,"nodeType":"ExpressionStatement","src":"2756:3:14"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3719,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"2456:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3720,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"2460:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2456:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3752,"initializationExpression":{"assignments":[3716],"declarations":[{"constant":false,"id":3716,"mutability":"mutable","name":"i","nameLocation":"2449:1:14","nodeType":"VariableDeclaration","scope":3752,"src":"2444:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3715,"name":"uint","nodeType":"ElementaryTypeName","src":"2444:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3718,"initialValue":{"hexValue":"30","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2453:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2444:10:14"},"nodeType":"ForStatement","src":"2439:345:14"}]},"documentation":{"id":3699,"nodeType":"StructuredDocumentation","src":"2035:222:14","text":" @dev Sets the supported institutions for a specific currency.\n @param currency The currency for which the institutions are being set.\n @param institutions The array of institutions to be set."},"functionSelector":"32200882","id":3754,"implemented":true,"kind":"function","modifiers":[{"id":3708,"kind":"modifierInvocation","modifierName":{"id":3707,"name":"onlyOwner","nameLocations":["2372:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"2372:9:14"},"nodeType":"ModifierInvocation","src":"2372:9:14"}],"name":"setSupportedInstitutions","nameLocation":"2271:24:14","nodeType":"FunctionDefinition","parameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3701,"mutability":"mutable","name":"currency","nameLocation":"2304:8:14","nodeType":"VariableDeclaration","scope":3754,"src":"2296:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2296:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"institutions","nameLocation":"2349:12:14","nodeType":"VariableDeclaration","scope":3754,"src":"2314:47:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution[]"},"typeName":{"baseType":{"id":3703,"nodeType":"UserDefinedTypeName","pathNode":{"id":3702,"name":"SharedStructs.Institution","nameLocations":["2314:13:14","2328:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"2314:25:14"},"referencedDeclaration":4029,"src":"2314:25:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":3704,"nodeType":"ArrayTypeName","src":"2314:27:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}},"visibility":"internal"}],"src":"2295:67:14"},"returnParameters":{"id":3709,"nodeType":"ParameterList","parameters":[],"src":"2382:0:14"},"scope":3830,"src":"2262:528:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3770,"nodeType":"Block","src":"3015:112:14","statements":[{"expression":{"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3762,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"3025:18:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3763,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"3046:19:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3025:40:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3765,"nodeType":"ExpressionStatement","src":"3025:40:14"},{"eventCall":{"arguments":[{"id":3767,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"3100:19:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3766,"name":"ProtocolFeesUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"3080:19:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3769,"nodeType":"EmitStatement","src":"3075:45:14"}]},"documentation":{"id":3755,"nodeType":"StructuredDocumentation","src":"2796:139:14","text":" @dev Updates the protocol fees percentage.\n @param _protocolFeePercent The new protocol fees percentage to be set."},"functionSelector":"84630736","id":3771,"implemented":true,"kind":"function","modifiers":[{"id":3760,"kind":"modifierInvocation","modifierName":{"id":3759,"name":"onlyOwner","nameLocations":["3005:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"3005:9:14"},"nodeType":"ModifierInvocation","src":"3005:9:14"}],"name":"updateProtocolFees","nameLocation":"2949:18:14","nodeType":"FunctionDefinition","parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3757,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2975:19:14","nodeType":"VariableDeclaration","scope":3771,"src":"2968:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3756,"name":"uint64","nodeType":"ElementaryTypeName","src":"2968:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2967:28:14"},"returnParameters":{"id":3761,"nodeType":"ParameterList","parameters":[],"src":"3015:0:14"},"scope":3830,"src":"2940:187:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3811,"nodeType":"Block","src":"3465:246:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"3483:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3500:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3492:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3783,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:14","typeDescriptions":{}}},"id":3786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3492:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3483:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3504:24:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3781,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3475:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"ExpressionStatement","src":"3475:54:14"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3791,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3774,"src":"3543:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"7472656173757279","id":3792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3551:10:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cbd818ad4dd6f1ff9338c2bb62480241424dd9a65f9f3284101a01cd099ad8ac","typeString":"literal_string \"treasury\""},"value":"treasury"},"src":"3543:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3798,"nodeType":"IfStatement","src":"3539:47:14","trueBody":{"expression":{"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3794,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"3563:15:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3795,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"3581:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3563:23:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3797,"nodeType":"ExpressionStatement","src":"3563:23:14"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3799,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3774,"src":"3600:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3608:12:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"3600:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"3596:52:14","trueBody":{"expression":{"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3802,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"3622:18:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"3643:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3622:26:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3805,"nodeType":"ExpressionStatement","src":"3622:26:14"}},{"eventCall":{"arguments":[{"id":3808,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"3688:15:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3807,"name":"ProtocolAddressesUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"3663:24:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3663:41:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3810,"nodeType":"EmitStatement","src":"3658:46:14"}]},"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"3133:246:14","text":" @dev Updates the protocol addresses.\n @param what The address type to be updated (treasury or aggregator).\n @param value The new address to be set.\n Requirements:\n - The value must not be a zero address."},"functionSelector":"79a0effb","id":3812,"implemented":true,"kind":"function","modifiers":[{"id":3779,"kind":"modifierInvocation","modifierName":{"id":3778,"name":"onlyOwner","nameLocations":["3455:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"3455:9:14"},"nodeType":"ModifierInvocation","src":"3455:9:14"}],"name":"updateProtocolAddresses","nameLocation":"3393:23:14","nodeType":"FunctionDefinition","parameters":{"id":3777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3774,"mutability":"mutable","name":"what","nameLocation":"3425:4:14","nodeType":"VariableDeclaration","scope":3812,"src":"3417:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3417:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3776,"mutability":"mutable","name":"value","nameLocation":"3439:5:14","nodeType":"VariableDeclaration","scope":3812,"src":"3431:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3775,"name":"address","nodeType":"ElementaryTypeName","src":"3431:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3416:29:14"},"returnParameters":{"id":3780,"nodeType":"ParameterList","parameters":[],"src":"3465:0:14"},"scope":3830,"src":"3384:327:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3828,"nodeType":"Block","src":"3913:81:14","statements":[{"expression":{"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3820,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"3923:11:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3821,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"3937:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"3923:24:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3823,"nodeType":"ExpressionStatement","src":"3923:24:14"},{"eventCall":{"arguments":[{"id":3825,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"3976:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3824,"name":"SetAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"3962:13:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3962:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3827,"nodeType":"EmitStatement","src":"3957:30:14"}]},"documentation":{"id":3813,"nodeType":"StructuredDocumentation","src":"3717:111:14","text":" @dev Updates the protocol aggregator.\n @param aggregator The new aggregator to be set."},"functionSelector":"cb79455b","id":3829,"implemented":true,"kind":"function","modifiers":[{"id":3818,"kind":"modifierInvocation","modifierName":{"id":3817,"name":"onlyOwner","nameLocations":["3903:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"3903:9:14"},"nodeType":"ModifierInvocation","src":"3903:9:14"}],"name":"updateProtocolAggregator","nameLocation":"3842:24:14","nodeType":"FunctionDefinition","parameters":{"id":3816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"aggregator","nameLocation":"3882:10:14","nodeType":"VariableDeclaration","scope":3829,"src":"3867:25:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3814,"name":"bytes","nodeType":"ElementaryTypeName","src":"3867:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3866:27:14"},"returnParameters":{"id":3819,"nodeType":"ParameterList","parameters":[],"src":"3913:0:14"},"scope":3830,"src":"3833:161:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3831,"src":"335:3661:14","usedErrors":[]}],"src":"170:3827:14"},"id":14},"contracts/interfaces/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interfaces/IPaycrest.sol","exportedSymbols":{"IERC20":[2944],"IPaycrest":[4022],"SharedStructs":[4035]},"id":4023,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3832,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3834,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4023,"sourceUnit":2945,"src":"65:70:15","symbolAliases":[{"foreign":{"id":3833,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"73:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/libraries/SharedStructs.sol","file":"../libraries/SharedStructs.sol","id":3836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4023,"sourceUnit":4036,"src":"137:61:15","symbolAliases":[{"foreign":{"id":3835,"name":"SharedStructs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"145:13:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":3837,"nodeType":"StructuredDocumentation","src":"200:72:15","text":" @title IPaycrest\n @dev Interface for the Paycrest contract."},"fullyImplemented":false,"id":4022,"linearizedBaseContracts":[4022],"name":"IPaycrest","nameLocation":"283:9:15","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3838,"nodeType":"StructuredDocumentation","src":"491:416:15","text":" @dev Emitted when a deposit is made.\n @param token The address of the deposited token.\n @param amount The amount of the deposit.\n @param orderId The ID of the order.\n @param rate The rate at which the deposit is made.\n @param institutionCode The code of the institution.\n @param label The label of the deposit.\n @param messageHash The hash of the message."},"eventSelector":"94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919","id":3856,"name":"OrderCreated","nameLocation":"918:12:15","nodeType":"EventDefinition","parameters":{"id":3855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3840,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"947:5:15","nodeType":"VariableDeclaration","scope":3856,"src":"931:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3839,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3842,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"970:6:15","nodeType":"VariableDeclaration","scope":3856,"src":"954:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3841,"name":"uint256","nodeType":"ElementaryTypeName","src":"954:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3844,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"986:11:15","nodeType":"VariableDeclaration","scope":3856,"src":"978:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3843,"name":"uint256","nodeType":"ElementaryTypeName","src":"978:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3846,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"1015:7:15","nodeType":"VariableDeclaration","scope":3856,"src":"999:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"999:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3848,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"1032:4:15","nodeType":"VariableDeclaration","scope":3856,"src":"1024:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3847,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3850,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"1046:15:15","nodeType":"VariableDeclaration","scope":3856,"src":"1038:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1038:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3852,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"1071:5:15","nodeType":"VariableDeclaration","scope":3856,"src":"1063:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1063:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3854,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"1085:11:15","nodeType":"VariableDeclaration","scope":3856,"src":"1078:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3853,"name":"string","nodeType":"ElementaryTypeName","src":"1078:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"930:167:15"},"src":"912:186:15"},{"anonymous":false,"documentation":{"id":3857,"nodeType":"StructuredDocumentation","src":"1104:371:15","text":" @dev Emitted when an aggregator settles a transaction.\n @param splitOrderId The ID of the split order.\n @param orderId The ID of the order.\n @param label The label of the transaction.\n @param liquidityProvider The address of the liquidity provider.\n @param settlePercent The percentage at which the transaction is settled."},"eventSelector":"a9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c2","id":3869,"name":"OrderSettled","nameLocation":"1486:12:15","nodeType":"EventDefinition","parameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"indexed":false,"mutability":"mutable","name":"splitOrderId","nameLocation":"1507:12:15","nodeType":"VariableDeclaration","scope":3869,"src":"1499:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1499:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3861,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"1537:7:15","nodeType":"VariableDeclaration","scope":3869,"src":"1521:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1521:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3863,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"1554:5:15","nodeType":"VariableDeclaration","scope":3869,"src":"1546:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1546:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3865,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"1577:17:15","nodeType":"VariableDeclaration","scope":3869,"src":"1561:33:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3864,"name":"address","nodeType":"ElementaryTypeName","src":"1561:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3867,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"1603:13:15","nodeType":"VariableDeclaration","scope":3869,"src":"1596:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3866,"name":"uint96","nodeType":"ElementaryTypeName","src":"1596:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1498:119:15"},"src":"1480:138:15"},{"anonymous":false,"documentation":{"id":3870,"nodeType":"StructuredDocumentation","src":"1624:225:15","text":" @dev Emitted when an aggregator refunds a transaction.\n @param fee The fee deducted from the refund amount.\n @param orderId The ID of the order.\n @param label The label of the transaction."},"eventSelector":"79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f","id":3878,"name":"OrderRefunded","nameLocation":"1860:13:15","nodeType":"EventDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"indexed":false,"mutability":"mutable","name":"fee","nameLocation":"1882:3:15","nodeType":"VariableDeclaration","scope":3878,"src":"1874:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3871,"name":"uint256","nodeType":"ElementaryTypeName","src":"1874:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3874,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"1903:7:15","nodeType":"VariableDeclaration","scope":3878,"src":"1887:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1887:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3876,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"1920:5:15","nodeType":"VariableDeclaration","scope":3878,"src":"1912:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1912:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1873:53:15"},"src":"1854:73:15"},{"anonymous":false,"documentation":{"id":3879,"nodeType":"StructuredDocumentation","src":"1933:173:15","text":" @dev Emitted when the sender's fee is transferred.\n @param sender The address of the sender.\n @param amount The amount of the fee transferred."},"eventSelector":"44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501","id":3885,"name":"SenderFeeTransferred","nameLocation":"2117:20:15","nodeType":"EventDefinition","parameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3881,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2154:6:15","nodeType":"VariableDeclaration","scope":3885,"src":"2138:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3880,"name":"address","nodeType":"ElementaryTypeName","src":"2138:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3883,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"2178:6:15","nodeType":"VariableDeclaration","scope":3885,"src":"2162:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3882,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:48:15"},"src":"2111:75:15"},{"canonicalName":"IPaycrest.TransactionMetadata","id":3896,"members":[{"constant":false,"id":3887,"mutability":"mutable","name":"identifier","nameLocation":"2788:10:15","nodeType":"VariableDeclaration","scope":3896,"src":"2781:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3886,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2781:6:15","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3889,"mutability":"mutable","name":"institution","nameLocation":"2815:11:15","nodeType":"VariableDeclaration","scope":3896,"src":"2808:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3888,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2808:6:15","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3891,"mutability":"mutable","name":"name","nameLocation":"2843:4:15","nodeType":"VariableDeclaration","scope":3896,"src":"2836:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3890,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2836:6:15","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3893,"mutability":"mutable","name":"currency","nameLocation":"2864:8:15","nodeType":"VariableDeclaration","scope":3896,"src":"2857:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3892,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2857:6:15","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3895,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"2890:19:15","nodeType":"VariableDeclaration","scope":3896,"src":"2882:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2882:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"2751:19:15","nodeType":"StructDefinition","scope":4022,"src":"2744:172:15","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":3917,"members":[{"constant":false,"id":3898,"mutability":"mutable","name":"seller","nameLocation":"3586:6:15","nodeType":"VariableDeclaration","scope":3917,"src":"3578:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3897,"name":"address","nodeType":"ElementaryTypeName","src":"3578:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3900,"mutability":"mutable","name":"token","nameLocation":"3610:5:15","nodeType":"VariableDeclaration","scope":3917,"src":"3602:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3899,"name":"address","nodeType":"ElementaryTypeName","src":"3602:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"3633:18:15","nodeType":"VariableDeclaration","scope":3917,"src":"3625:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"3625:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"senderFee","nameLocation":"3669:9:15","nodeType":"VariableDeclaration","scope":3917,"src":"3661:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3903,"name":"uint256","nodeType":"ElementaryTypeName","src":"3661:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"protocolFee","nameLocation":"3696:11:15","nodeType":"VariableDeclaration","scope":3917,"src":"3688:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"3688:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"rate","nameLocation":"3724:4:15","nodeType":"VariableDeclaration","scope":3917,"src":"3717:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3907,"name":"uint96","nodeType":"ElementaryTypeName","src":"3717:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"isFulfilled","nameLocation":"3743:11:15","nodeType":"VariableDeclaration","scope":3917,"src":"3738:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3909,"name":"bool","nodeType":"ElementaryTypeName","src":"3738:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3912,"mutability":"mutable","name":"refundAddress","nameLocation":"3772:13:15","nodeType":"VariableDeclaration","scope":3917,"src":"3764:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3911,"name":"address","nodeType":"ElementaryTypeName","src":"3764:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3914,"mutability":"mutable","name":"currentBPS","nameLocation":"3802:10:15","nodeType":"VariableDeclaration","scope":3917,"src":"3795:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3913,"name":"uint96","nodeType":"ElementaryTypeName","src":"3795:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3916,"mutability":"mutable","name":"amount","nameLocation":"3830:6:15","nodeType":"VariableDeclaration","scope":3917,"src":"3822:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"3562:5:15","nodeType":"StructDefinition","scope":4022,"src":"3555:288:15","visibility":"public"},{"documentation":{"id":3918,"nodeType":"StructuredDocumentation","src":"4044:1191:15","text":" @notice Locks the sender's amount of token into Paycrest.\n @dev Requirements:\n - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n - `_token` must be an acceptable token. See {isTokenSupported}.\n - `amount` must be greater than minimum.\n - `_refundable` refundable address must not be zero address.\n @param _token The address of the token.\n @param _amount The amount in the decimal of `_token` to be locked.\n @param _institutionCode The institution code of the sender.\n @param _label The reference of the sender.\n @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\n @param _senderFeeRecipient The address that will receive `_senderFee` in `_token` when there is a need to refund.\n @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.\n @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\n @param messageHash The hash of the message.\n @return _orderId The ID of the order."},"functionSelector":"2654ec7e","id":3941,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"5249:11:15","nodeType":"FunctionDefinition","parameters":{"id":3937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3920,"mutability":"mutable","name":"_token","nameLocation":"5278:6:15","nodeType":"VariableDeclaration","scope":3941,"src":"5270:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3919,"name":"address","nodeType":"ElementaryTypeName","src":"5270:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3922,"mutability":"mutable","name":"_amount","nameLocation":"5303:7:15","nodeType":"VariableDeclaration","scope":3941,"src":"5295:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3921,"name":"uint256","nodeType":"ElementaryTypeName","src":"5295:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3924,"mutability":"mutable","name":"_institutionCode","nameLocation":"5329:16:15","nodeType":"VariableDeclaration","scope":3941,"src":"5321:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3923,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5321:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3926,"mutability":"mutable","name":"_label","nameLocation":"5363:6:15","nodeType":"VariableDeclaration","scope":3941,"src":"5355:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5355:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"_rate","nameLocation":"5386:5:15","nodeType":"VariableDeclaration","scope":3941,"src":"5379:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3927,"name":"uint96","nodeType":"ElementaryTypeName","src":"5379:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3930,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"5410:19:15","nodeType":"VariableDeclaration","scope":3941,"src":"5402:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3929,"name":"address","nodeType":"ElementaryTypeName","src":"5402:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3932,"mutability":"mutable","name":"_senderFee","nameLocation":"5447:10:15","nodeType":"VariableDeclaration","scope":3941,"src":"5439:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3931,"name":"uint256","nodeType":"ElementaryTypeName","src":"5439:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3934,"mutability":"mutable","name":"_refundAddress","nameLocation":"5475:14:15","nodeType":"VariableDeclaration","scope":3941,"src":"5467:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3933,"name":"address","nodeType":"ElementaryTypeName","src":"5467:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3936,"mutability":"mutable","name":"messageHash","nameLocation":"5516:11:15","nodeType":"VariableDeclaration","scope":3941,"src":"5500:27:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3935,"name":"string","nodeType":"ElementaryTypeName","src":"5500:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5260:273:15"},"returnParameters":{"id":3940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3939,"mutability":"mutable","name":"_orderId","nameLocation":"5559:8:15","nodeType":"VariableDeclaration","scope":3941,"src":"5551:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5551:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5550:18:15"},"scope":4022,"src":"5240:329:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3942,"nodeType":"StructuredDocumentation","src":"5575:892:15","text":" @notice Settles a transaction and distributes rewards accordingly.\n @dev Requirements:\n - Only aggregators can call this function.\n - `_orderId` must be less than total IDs.\n - `_orderId` must be an open ID.\n - `_primaryValidator` must have stake on the Paycrest staking platform.\n - `_secondaryValidators` must have stake on the Paycrest staking platform.\n - `amount` must be greater than minimum.\n - `_refundable` refundable address must not be zero address.\n @param _orderId The ID of the transaction.\n @param _label The reference of the sender.\n @param _liquidityProvider The address of the liquidity provider.\n @param _settlePercent The rate at which the transaction is settled.\n @return _orderId The ID of the order.\n @return _liquidityProvider The address of the liquidity provider."},"functionSelector":"9015dced","id":3959,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"6481:6:15","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"_splitOrderId","nameLocation":"6496:13:15","nodeType":"VariableDeclaration","scope":3959,"src":"6488:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6488:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"_orderId","nameLocation":"6519:8:15","nodeType":"VariableDeclaration","scope":3959,"src":"6511:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6511:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"_label","nameLocation":"6537:6:15","nodeType":"VariableDeclaration","scope":3959,"src":"6529:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6529:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"6553:18:15","nodeType":"VariableDeclaration","scope":3959,"src":"6545:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3949,"name":"address","nodeType":"ElementaryTypeName","src":"6545:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3952,"mutability":"mutable","name":"_settlePercent","nameLocation":"6580:14:15","nodeType":"VariableDeclaration","scope":3959,"src":"6573:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3951,"name":"uint64","nodeType":"ElementaryTypeName","src":"6573:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6487:108:15"},"returnParameters":{"id":3958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3959,"src":"6613:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6613:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3959,"src":"6622:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3956,"name":"address","nodeType":"ElementaryTypeName","src":"6622:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6612:18:15"},"scope":4022,"src":"6472:159:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"6637:500:15","text":" @notice Refunds to the specified refundable address.\n @dev Requirements:\n - Only aggregators can call this function.\n - `_orderId` must be less than total IDs.\n - `_orderId` must be an open ID.\n - `isFulfilled` must be false.\n @param _fee The amount to be deducted from the amount to be refunded.\n @param _orderId The ID of the transaction.\n @param _label The reference of the sender.\n @return Whether the refund is successful."},"functionSelector":"d28a8d32","id":3971,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"7151:6:15","nodeType":"FunctionDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3962,"mutability":"mutable","name":"_fee","nameLocation":"7166:4:15","nodeType":"VariableDeclaration","scope":3971,"src":"7158:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3961,"name":"uint256","nodeType":"ElementaryTypeName","src":"7158:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3964,"mutability":"mutable","name":"_orderId","nameLocation":"7180:8:15","nodeType":"VariableDeclaration","scope":3971,"src":"7172:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7172:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"_label","nameLocation":"7198:6:15","nodeType":"VariableDeclaration","scope":3971,"src":"7190:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7190:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7157:48:15"},"returnParameters":{"id":3970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3971,"src":"7223:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3968,"name":"bool","nodeType":"ElementaryTypeName","src":"7223:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7222:6:15"},"scope":4022,"src":"7142:87:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3972,"nodeType":"StructuredDocumentation","src":"7235:173:15","text":" @notice Checks if a token is supported by Paycrest.\n @param _token The address of the token to check.\n @return Whether the token is supported."},"functionSelector":"75151b63","id":3979,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"7422:16:15","nodeType":"FunctionDefinition","parameters":{"id":3975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"_token","nameLocation":"7447:6:15","nodeType":"VariableDeclaration","scope":3979,"src":"7439:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3973,"name":"address","nodeType":"ElementaryTypeName","src":"7439:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7438:16:15"},"returnParameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3979,"src":"7477:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3976,"name":"bool","nodeType":"ElementaryTypeName","src":"7477:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7476:6:15"},"scope":4022,"src":"7413:70:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3980,"nodeType":"StructuredDocumentation","src":"7489:141:15","text":" @notice Gets the details of an order.\n @param _orderId The ID of the order.\n @return return The order details."},"functionSelector":"768c6ec0","id":3988,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"7644:12:15","nodeType":"FunctionDefinition","parameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3982,"mutability":"mutable","name":"_orderId","nameLocation":"7665:8:15","nodeType":"VariableDeclaration","scope":3988,"src":"7657:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7657:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7656:18:15"},"returnParameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3988,"src":"7697:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3985,"nodeType":"UserDefinedTypeName","pathNode":{"id":3984,"name":"Order","nameLocations":["7697:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":3917,"src":"7697:5:15"},"referencedDeclaration":3917,"src":"7697:5:15","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3917_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"7696:14:15"},"scope":4022,"src":"7635:76:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3989,"nodeType":"StructuredDocumentation","src":"7717:167:15","text":" @notice Gets the fee details of Paycrest.\n @return protocolReward The protocol reward amount.\n @return max_bps The maximum basis points."},"functionSelector":"b810c636","id":3996,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"7898:13:15","nodeType":"FunctionDefinition","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[],"src":"7911:2:15"},"returnParameters":{"id":3995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"protocolReward","nameLocation":"7943:14:15","nodeType":"VariableDeclaration","scope":3996,"src":"7936:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3991,"name":"uint64","nodeType":"ElementaryTypeName","src":"7936:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3994,"mutability":"mutable","name":"max_bps","nameLocation":"7967:7:15","nodeType":"VariableDeclaration","scope":3996,"src":"7959:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3993,"name":"uint256","nodeType":"ElementaryTypeName","src":"7959:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7935:40:15"},"scope":4022,"src":"7889:87:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3997,"nodeType":"StructuredDocumentation","src":"7982:111:15","text":" @notice Gets the aggregator's public key.\n @return return The aggregator's public key."},"functionSelector":"3ad59dbc","id":4002,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"8107:13:15","nodeType":"FunctionDefinition","parameters":{"id":3998,"nodeType":"ParameterList","parameters":[],"src":"8120:2:15"},"returnParameters":{"id":4001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4002,"src":"8145:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3999,"name":"bytes","nodeType":"ElementaryTypeName","src":"8145:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8144:14:15"},"scope":4022,"src":"8098:61:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4003,"nodeType":"StructuredDocumentation","src":"8165:168:15","text":" @notice Gets the details of a supported institution by code.\n @param _code The institution code.\n @return return The institution details."},"functionSelector":"c2280103","id":4011,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedInstitutionByCode","nameLocation":"8347:29:15","nodeType":"FunctionDefinition","parameters":{"id":4006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4005,"mutability":"mutable","name":"_code","nameLocation":"8385:5:15","nodeType":"VariableDeclaration","scope":4011,"src":"8377:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8377:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8376:15:15"},"returnParameters":{"id":4010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4011,"src":"8414:38:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_memory_ptr","typeString":"struct SharedStructs.InstitutionByCode"},"typeName":{"id":4008,"nodeType":"UserDefinedTypeName","pathNode":{"id":4007,"name":"SharedStructs.InstitutionByCode","nameLocations":["8414:13:15","8428:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":4034,"src":"8414:31:15"},"referencedDeclaration":4034,"src":"8414:31:15","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$4034_storage_ptr","typeString":"struct SharedStructs.InstitutionByCode"}},"visibility":"internal"}],"src":"8413:40:15"},"scope":4022,"src":"8338:116:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4012,"nodeType":"StructuredDocumentation","src":"8460:173:15","text":" @notice Gets the details of supported institutions by currency.\n @param _currency The currency code.\n @return return An array of institutions."},"functionSelector":"02621338","id":4021,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8648:24:15","nodeType":"FunctionDefinition","parameters":{"id":4015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4014,"mutability":"mutable","name":"_currency","nameLocation":"8681:9:15","nodeType":"VariableDeclaration","scope":4021,"src":"8673:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8673:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8672:19:15"},"returnParameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4021,"src":"8714:34:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","typeString":"struct SharedStructs.Institution[]"},"typeName":{"baseType":{"id":4017,"nodeType":"UserDefinedTypeName","pathNode":{"id":4016,"name":"SharedStructs.Institution","nameLocations":["8714:13:15","8728:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":4029,"src":"8714:25:15"},"referencedDeclaration":4029,"src":"8714:25:15","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$4029_storage_ptr","typeString":"struct SharedStructs.Institution"}},"id":4018,"nodeType":"ArrayTypeName","src":"8714:27:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$4029_storage_$dyn_storage_ptr","typeString":"struct SharedStructs.Institution[]"}},"visibility":"internal"}],"src":"8713:36:15"},"scope":4022,"src":"8639:111:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4023,"src":"273:8479:15","usedErrors":[]}],"src":"39:8714:15"},"id":15},"contracts/libraries/SharedStructs.sol":{"ast":{"absolutePath":"contracts/libraries/SharedStructs.sol","exportedSymbols":{"SharedStructs":[4035]},"id":4036,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4024,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"39:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"SharedStructs","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4035,"linearizedBaseContracts":[4035],"name":"SharedStructs","nameLocation":"73:13:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"SharedStructs.Institution","id":4029,"members":[{"constant":false,"id":4026,"mutability":"mutable","name":"code","nameLocation":"290:4:16","nodeType":"VariableDeclaration","scope":4029,"src":"282:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"282:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4028,"mutability":"mutable","name":"name","nameLocation":"312:4:16","nodeType":"VariableDeclaration","scope":4029,"src":"304:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"304:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"260:11:16","nodeType":"StructDefinition","scope":4035,"src":"253:70:16","visibility":"public"},{"canonicalName":"SharedStructs.InstitutionByCode","id":4034,"members":[{"constant":false,"id":4031,"mutability":"mutable","name":"name","nameLocation":"548:4:16","nodeType":"VariableDeclaration","scope":4034,"src":"540:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"540:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4033,"mutability":"mutable","name":"currency","nameLocation":"570:8:16","nodeType":"VariableDeclaration","scope":4034,"src":"562:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"562:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"512:17:16","nodeType":"StructDefinition","scope":4035,"src":"505:80:16","visibility":"public"}],"scope":4036,"src":"65:522:16","usedErrors":[]}],"src":"39:548:16"},"id":16}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1299,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":11,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":131,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1299,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":323,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":428,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048450dc46638f88e6955de8ac82b8703f84fd5efe5cbcc4d071ddacf24282ceb64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE GASLIMIT 0xD 0xC4 PUSH7 0x38F88E6955DE8A 0xC8 0x2B DUP8 SUB 0xF8 0x4F 0xD5 0xEF 0xE5 0xCB 0xCC 0x4D SMOD SAR 0xDA 0xCF 0x24 0x28 0x2C 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"734:6366:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048450dc46638f88e6955de8ac82b8703f84fd5efe5cbcc4d071ddacf24282ceb64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE GASLIMIT 0xD 0xC4 PUSH7 0x38F88E6955DE8A 0xC8 0x2B DUP8 SUB 0xF8 0x4F 0xD5 0xEF 0xE5 0xCB 0xCC 0x4D SMOD SAR 0xDA 0xCF 0x24 0x28 0x2C 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"734:6366:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1299,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolFee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"OrderRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"OrderSettled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SenderFeeTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"}],"name":"getSupportedInstitutionByCode","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct SharedStructs.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct SharedStructs.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct SharedStructs.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Paycrest contract for handling orders and settlements.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"OrderCreated(address,uint256,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when a deposit is made.","params":{"amount":"The amount of the deposit.","institutionCode":"The code of the institution.","label":"The label of the deposit.","messageHash":"The hash of the message.","orderId":"The ID of the order.","rate":"The rate at which the deposit is made.","token":"The address of the deposited token."}},"OrderRefunded(uint256,bytes32,bytes32)":{"details":"Emitted when an aggregator refunds a transaction.","params":{"fee":"The fee deducted from the refund amount.","label":"The label of the transaction.","orderId":"The ID of the order."}},"OrderSettled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when an aggregator settles a transaction.","params":{"label":"The label of the transaction.","liquidityProvider":"The address of the liquidity provider.","orderId":"The ID of the order.","settlePercent":"The percentage at which the transaction is settled.","splitOrderId":"The ID of the split order."}},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"SenderFeeTransferred(address,uint256)":{"details":"Emitted when the sender's fee is transferred.","params":{"amount":"The amount of the fee transferred.","sender":"The address of the sender."}},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getAggregator()":{"details":"See {getAggregator-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionByCode(bytes32)":{"details":"See {getSupportedInstitutionByCode-IPaycrest}. "},"getSupportedInstitutions(bytes32)":{"details":"See {getSupportedInstitutions-IPaycrest}. "},"initialize()":{"details":"Initialize function."},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"pause()":{"details":"Pause the contract."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"refund(uint256,bytes32,bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":{"details":"Sets the supported institutions for a specific currency.","params":{"currency":"The currency for which the institutions are being set.","institutions":"The array of institutions to be set."}},"settingManagerBool(bytes32,address,bool)":{"details":"Sets the boolean value for a specific setting.","params":{"status":"The boolean value to be set. Requirements: - The value must not be a zero address.","value":"The address or value associated with the setting.","what":"The setting to be updated."}},"settle(bytes32,bytes32,bytes32,address,uint64)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unpause()":{"details":"Unpause the contract."},"updateProtocolAddresses(bytes32,address)":{"details":"Updates the protocol addresses.","params":{"value":"The new address to be set. Requirements: - The value must not be a zero address.","what":"The address type to be updated (treasury or aggregator)."}},"updateProtocolAggregator(bytes)":{"details":"Updates the protocol aggregator.","params":{"aggregator":"The new aggregator to be set."}},"updateProtocolFees(uint64)":{"details":"Updates the protocol fees percentage.","params":{"_protocolFeePercent":"The new protocol fees percentage to be set."}}},"title":"Paycrest","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2996":{"entryPoint":null,"id":2996,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_282":{"entryPoint":40,"id":282,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:17","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:17"},"nodeType":"YulFunctionCall","src":"113:19:17"},"nodeType":"YulExpressionStatement","src":"113:19:17"},{"nodeType":"YulAssignment","src":"141:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:17"},"nodeType":"YulFunctionCall","src":"156:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:17","type":""}],"src":"7:169:17"},{"body":{"nodeType":"YulBlock","src":"288:120:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:17"},"nodeType":"YulFunctionCall","src":"306:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:17","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:17"},"nodeType":"YulFunctionCall","src":"299:58:17"},"nodeType":"YulExpressionStatement","src":"299:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:17"},"nodeType":"YulFunctionCall","src":"374:15:17"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:17","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:17"},"nodeType":"YulFunctionCall","src":"367:34:17"},"nodeType":"YulExpressionStatement","src":"367:34:17"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:17","type":""}],"src":"182:226:17"},{"body":{"nodeType":"YulBlock","src":"560:220:17","statements":[{"nodeType":"YulAssignment","src":"570:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:17","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:17"},"nodeType":"YulFunctionCall","src":"577:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:17"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:17"},"nodeType":"YulFunctionCall","src":"653:93:17"},"nodeType":"YulExpressionStatement","src":"653:93:17"},{"nodeType":"YulAssignment","src":"755:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:17"},"nodeType":"YulFunctionCall","src":"762:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:17"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:17","type":""}],"src":"414:366:17"},{"body":{"nodeType":"YulBlock","src":"957:248:17","statements":[{"nodeType":"YulAssignment","src":"967:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:17"},"nodeType":"YulFunctionCall","src":"975:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:17"},"nodeType":"YulFunctionCall","src":"1010:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:17"},"nodeType":"YulFunctionCall","src":"1029:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:17"},"nodeType":"YulFunctionCall","src":"1003:47:17"},"nodeType":"YulExpressionStatement","src":"1003:47:17"},{"nodeType":"YulAssignment","src":"1059:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:17"},"nodeType":"YulFunctionCall","src":"1067:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:17","type":""}],"src":"786:419:17"},{"body":{"nodeType":"YulBlock","src":"1254:43:17","statements":[{"nodeType":"YulAssignment","src":"1264:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:17"},"nodeType":"YulFunctionCall","src":"1275:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:17","type":""}],"src":"1211:86:17"},{"body":{"nodeType":"YulBlock","src":"1364:51:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:17"},"nodeType":"YulFunctionCall","src":"1386:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:17"},"nodeType":"YulFunctionCall","src":"1374:35:17"},"nodeType":"YulExpressionStatement","src":"1374:35:17"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:17","type":""}],"src":"1303:112:17"},{"body":{"nodeType":"YulBlock","src":"1515:120:17","statements":[{"nodeType":"YulAssignment","src":"1525:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:17"},"nodeType":"YulFunctionCall","src":"1533:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:17"},"nodeType":"YulFunctionCall","src":"1610:17:17"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:17"},"nodeType":"YulFunctionCall","src":"1561:67:17"},"nodeType":"YulExpressionStatement","src":"1561:67:17"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:17","type":""}],"src":"1421:214:17"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b613f8680620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638129fc1c116100b857806399e3c0b41161007c57806399e3c0b414610303578063b810c6361461031f578063c22801031461033e578063cb79455b1461036e578063d28a8d321461038a578063f2fde38b146103ba57610137565b80638129fc1c146102845780638456cb591461028e57806384630736146102985780638da5cb5b146102b45780639015dced146102d257610137565b80635c975abb116100ff5780635c975abb146101e0578063715018a6146101fe57806375151b6314610208578063768c6ec01461023857806379a0effb1461026857610137565b8063026213381461013c5780632654ec7e1461016c578063322008821461019c5780633ad59dbc146101b85780633f4ba83a146101d6575b600080fd5b61015660048036038101906101519190612569565b6103d6565b6040516101639190612683565b60405180910390f35b610186600480360381019061018191906127e2565b610514565b60405161019391906128dc565b60405180910390f35b6101b660048036038101906101b19190612a9b565b610a2d565b005b6101c0610b41565b6040516101cd9190612b76565b60405180910390f35b6101de610bd3565b005b6101e8610be5565b6040516101f59190612bb3565b60405180910390f35b610206610bfc565b005b610222600480360381019061021d9190612bce565b610c10565b60405161022f9190612bb3565b60405180910390f35b610252600480360381019061024d9190612569565b610c66565b60405161025f9190612d03565b60405180910390f35b610282600480360381019061027d9190612d1f565b610ea1565b005b61028c611047565b005b610296611197565b005b6102b260048036038101906102ad9190612d9f565b6111a9565b005b6102bc611214565b6040516102c99190612ddb565b60405180910390f35b6102ec60048036038101906102e79190612df6565b61123e565b6040516102fa929190612e71565b60405180910390f35b61031d60048036038101906103189190612ec6565b611652565b005b610327611788565b604051610335929190612f37565b60405180910390f35b61035860048036038101906103539190612569565b6117ad565b6040516103659190612f8f565b60405180910390f35b61038860048036038101906103839190613000565b6117ee565b005b6103a4600480360381019061039f919061304d565b611845565b6040516103b19190612bb3565b60405180910390f35b6103d460048036038101906103cf9190612bce565b611bde565b005b60606000609c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104535783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061040d565b50505050905060008151905060008167ffffffffffffffff81111561047b5761047a612908565b5b6040519080825280602002602001820160405280156104b457816020015b6104a1612416565b8152602001906001900390816104995790505b50905060005b82811015610508578381815181106104d5576104d46130a0565b5b60200260200101518282815181106104f0576104ef6130a0565b5b602002602001018190525080806001019150506104ba565b50809350505050919050565b600061051e611c61565b61052c8b8b8689898e611cab565b60008383905011610572576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105699061312c565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330888e61059c919061317b565b6040518463ffffffff1660e01b81526004016105ba939291906131af565b6020604051808303816000875af11580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906131fb565b5060d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061064e90613228565b91905055503360d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016106a5929190613270565b6040516020818303038152906040528051906020012090506000606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168c6106ee9190613299565b6106f8919061330a565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001828152602001896bffffffffffffffffffffffff1681526020016000151581526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff168152602001828d6107cb919061333b565b81525060d0600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060c082015181600501600c6101000a81548160ff02191690831515021790555060e08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600701559050508160d06000848152602001908152602001600020600701548d73ffffffffffffffffffffffffffffffffffffffff167f94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919848c8f8f8b8b604051610a16969594939291906133e6565b60405180910390a4509a9950505050505050505050565b610a35611ec5565b60008151905060005b81811015610b3b57609c6000858152602001908152602001600020838281518110610a6c57610a6b6130a0565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610ad157610ad06130a0565b5b602002602001015160200151815260200185815250609d6000858481518110610afd57610afc6130a0565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610a3e565b50505050565b606060688054610b5090613471565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90613471565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b5050505050905090565b610bdb611ec5565b610be3611f43565b565b6000609e60009054906101000a900460ff16905090565b610c04611ec5565b610c0e6000611fa6565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610c6e612436565b60d06000838152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160058201600c9054906101000a900460ff161515151581526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016007820154815250509050919050565b610ea9611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f906134ee565b60405180910390fd5b7f74726561737572790000000000000000000000000000000000000000000000008203610f815780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f72000000000000000000000000000000000000000000008203610fea5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161103b9190612ddb565b60405180910390a15050565b60008060019054906101000a900460ff161590508080156110785750600160008054906101000a900460ff1660ff16105b806110a557506110873061206c565b1580156110a45750600160008054906101000a900460ff1660ff16145b5b6110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db90613580565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611121576001600060016101000a81548160ff0219169083151502179055505b620186a060658190555061113361208f565b61113b6120e8565b80156111945760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161118b91906135e8565b60405180910390a15b50565b61119f611ec5565b6111a7612141565b565b6111b1611ec5565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516112099190613603565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c89061366a565b60405180910390fd5b60d06000878152602001908152602001600020600501600c9054906101000a900460ff1615611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c906136d6565b60405180910390fd5b600060d0600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508367ffffffffffffffff1660d0600089815260200190815260200160002060060160148282829054906101000a90046bffffffffffffffffffffffff166113b791906136f6565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600060d0600089815260200190815260200160002060060160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361155957600160d06000898152602001908152602001600020600501600c6101000a81548160ff021916908315150217905550600060d0600089815260200190815260200160002060030154111561148157611480876121a4565b5b600060d06000898152602001908152602001600020600401541115611558578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660d060008b8152602001908152602001600020600401546040518363ffffffff1660e01b8152600401611513929190613270565b6020604051808303816000875af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906131fb565b505b5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660d060008b8152602001908152602001600020600701546040518363ffffffff1660e01b81526004016115aa929190613270565b6020604051808303816000875af11580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed91906131fb565b508473ffffffffffffffffffffffffffffffffffffffff16877fa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c28a898860405161163993929190613767565b60405180910390a3868192509250509550959350505050565b61165a611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c0906134ee565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036117485780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161177b9392919061379e565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b6117b56124ff565b609d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6117f6611ec5565b818160689182611807929190613982565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051611839929190613a7f565b60405180910390a15050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce9061366a565b60405180910390fd5b60d06000848152602001908152602001600020600501600c9054906101000a900460ff161561193b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611932906136d6565b60405180910390fd5b60008460d060008681526020019081526020016000206007015461195f919061333b565b905060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b81526004016119f4929190613270565b6020604051808303816000875af1158015611a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906131fb565b50600160d06000868152602001908152602001600020600501600c6101000a81548160ff021916908315150217905550600060d0600086815260200190815260200160002060060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60d0600087815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b54929190613270565b6020604051808303816000875af1158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9791906131fb565b50837f79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f8685604051611bca929190613aa3565b60405180910390a260019150509392505050565b611be6611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613b3e565b60405180910390fd5b611c5e81611fa6565b50565b611c69610be5565b15611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090613baa565b60405180910390fd5b565b609b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2e90613c16565b60405180910390fd5b60008511611d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7190613c82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de090613cee565b60405180910390fd5b6000801b609d60008381526020019081526020016000206000015403611e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3b90613d5a565b60405180910390fd5b6000821115611ebd57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb390613dc6565b60405180910390fd5b5b505050505050565b611ecd6122f8565b73ffffffffffffffffffffffffffffffffffffffff16611eeb611214565b73ffffffffffffffffffffffffffffffffffffffff1614611f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3890613e32565b60405180910390fd5b565b611f4b612300565b6000609e60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611f8f6122f8565b604051611f9c9190612ddb565b60405180910390a1565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166120de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d590613ec4565b60405180910390fd5b6120e6612349565b565b600060019054906101000a900460ff16612137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212e90613ec4565b60405180910390fd5b61213f6123aa565b565b612149611c61565b6001609e60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861218d6122f8565b60405161219a9190612ddb565b60405180910390a1565b600060d0600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060d0600084815260200190815260200160002060030154905060d0600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161226b929190613270565b6020604051808303816000875af115801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae91906131fb565b50808273ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a3505050565b600033905090565b612308610be5565b612347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233e90613f30565b60405180910390fd5b565b600060019054906101000a900460ff16612398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238f90613ec4565b60405180910390fd5b6123a86123a36122f8565b611fa6565b565b600060019054906101000a900460ff166123f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f090613ec4565b60405180910390fd5b6000609e60006101000a81548160ff021916908315150217905550565b604051806040016040528060008019168152602001600080191681525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61254681612533565b811461255157600080fd5b50565b6000813590506125638161253d565b92915050565b60006020828403121561257f5761257e612529565b5b600061258d84828501612554565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125cb81612533565b82525050565b6040820160008201516125e760008501826125c2565b5060208201516125fa60208501826125c2565b50505050565b600061260c83836125d1565b60408301905092915050565b6000602082019050919050565b600061263082612596565b61263a81856125a1565b9350612645836125b2565b8060005b8381101561267657815161265d8882612600565b975061266883612618565b925050600181019050612649565b5085935050505092915050565b6000602082019050818103600083015261269d8184612625565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126d0826126a5565b9050919050565b6126e0816126c5565b81146126eb57600080fd5b50565b6000813590506126fd816126d7565b92915050565b6000819050919050565b61271681612703565b811461272157600080fd5b50565b6000813590506127338161270d565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61275a81612739565b811461276557600080fd5b50565b60008135905061277781612751565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126127a2576127a161277d565b5b8235905067ffffffffffffffff8111156127bf576127be612782565b5b6020830191508360018202830111156127db576127da612787565b5b9250929050565b6000806000806000806000806000806101208b8d03121561280657612805612529565b5b60006128148d828e016126ee565b9a505060206128258d828e01612724565b99505060406128368d828e01612554565b98505060606128478d828e01612554565b97505060806128588d828e01612768565b96505060a06128698d828e016126ee565b95505060c061287a8d828e01612724565b94505060e061288b8d828e016126ee565b9350506101008b013567ffffffffffffffff8111156128ad576128ac61252e565b5b6128b98d828e0161278c565b92509250509295989b9194979a5092959850565b6128d681612533565b82525050565b60006020820190506128f160008301846128cd565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612940826128f7565b810181811067ffffffffffffffff8211171561295f5761295e612908565b5b80604052505050565b600061297261251f565b905061297e8282612937565b919050565b600067ffffffffffffffff82111561299e5761299d612908565b5b602082029050602081019050919050565b600080fd5b6000604082840312156129ca576129c96129af565b5b6129d46040612968565b905060006129e484828501612554565b60008301525060206129f884828501612554565b60208301525092915050565b6000612a17612a1284612983565b612968565b90508083825260208201905060408402830185811115612a3a57612a39612787565b5b835b81811015612a635780612a4f88826129b4565b845260208401935050604081019050612a3c565b5050509392505050565b600082601f830112612a8257612a8161277d565b5b8135612a92848260208601612a04565b91505092915050565b60008060408385031215612ab257612ab1612529565b5b6000612ac085828601612554565b925050602083013567ffffffffffffffff811115612ae157612ae061252e565b5b612aed85828601612a6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b31578082015181840152602081019050612b16565b60008484015250505050565b6000612b4882612af7565b612b528185612b02565b9350612b62818560208601612b13565b612b6b816128f7565b840191505092915050565b60006020820190508181036000830152612b908184612b3d565b905092915050565b60008115159050919050565b612bad81612b98565b82525050565b6000602082019050612bc86000830184612ba4565b92915050565b600060208284031215612be457612be3612529565b5b6000612bf2848285016126ee565b91505092915050565b612c04816126c5565b82525050565b612c1381612703565b82525050565b612c2281612739565b82525050565b612c3181612b98565b82525050565b61014082016000820151612c4e6000850182612bfb565b506020820151612c616020850182612bfb565b506040820151612c746040850182612bfb565b506060820151612c876060850182612c0a565b506080820151612c9a6080850182612c0a565b5060a0820151612cad60a0850182612c19565b5060c0820151612cc060c0850182612c28565b5060e0820151612cd360e0850182612bfb565b50610100820151612ce8610100850182612c19565b50610120820151612cfd610120850182612c0a565b50505050565b600061014082019050612d196000830184612c37565b92915050565b60008060408385031215612d3657612d35612529565b5b6000612d4485828601612554565b9250506020612d55858286016126ee565b9150509250929050565b600067ffffffffffffffff82169050919050565b612d7c81612d5f565b8114612d8757600080fd5b50565b600081359050612d9981612d73565b92915050565b600060208284031215612db557612db4612529565b5b6000612dc384828501612d8a565b91505092915050565b612dd5816126c5565b82525050565b6000602082019050612df06000830184612dcc565b92915050565b600080600080600060a08688031215612e1257612e11612529565b5b6000612e2088828901612554565b9550506020612e3188828901612554565b9450506040612e4288828901612554565b9350506060612e53888289016126ee565b9250506080612e6488828901612d8a565b9150509295509295909350565b6000604082019050612e8660008301856128cd565b612e936020830184612dcc565b9392505050565b612ea381612b98565b8114612eae57600080fd5b50565b600081359050612ec081612e9a565b92915050565b600080600060608486031215612edf57612ede612529565b5b6000612eed86828701612554565b9350506020612efe868287016126ee565b9250506040612f0f86828701612eb1565b9150509250925092565b612f2281612d5f565b82525050565b612f3181612703565b82525050565b6000604082019050612f4c6000830185612f19565b612f596020830184612f28565b9392505050565b604082016000820151612f7660008501826125c2565b506020820151612f8960208501826125c2565b50505050565b6000604082019050612fa46000830184612f60565b92915050565b60008083601f840112612fc057612fbf61277d565b5b8235905067ffffffffffffffff811115612fdd57612fdc612782565b5b602083019150836001820283011115612ff957612ff8612787565b5b9250929050565b6000806020838503121561301757613016612529565b5b600083013567ffffffffffffffff8111156130355761303461252e565b5b61304185828601612faa565b92509250509250929050565b60008060006060848603121561306657613065612529565b5b600061307486828701612724565b935050602061308586828701612554565b925050604061309686828701612554565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f496e76616c69644d657373616765486173680000000000000000000000000000600082015250565b60006131166012836130cf565b9150613121826130e0565b602082019050919050565b6000602082019050818103600083015261314581613109565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061318682612703565b915061319183612703565b92508282019050808211156131a9576131a861314c565b5b92915050565b60006060820190506131c46000830186612dcc565b6131d16020830185612dcc565b6131de6040830184612f28565b949350505050565b6000815190506131f581612e9a565b92915050565b60006020828403121561321157613210612529565b5b600061321f848285016131e6565b91505092915050565b600061323382612703565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132655761326461314c565b5b600182019050919050565b60006040820190506132856000830185612dcc565b6132926020830184612f28565b9392505050565b60006132a482612703565b91506132af83612703565b92508282026132bd81612703565b915082820484148315176132d4576132d361314c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061331582612703565b915061332083612703565b9250826133305761332f6132db565b5b828204905092915050565b600061334682612703565b915061335183612703565b92508282039050818111156133695761336861314c565b5b92915050565b6000819050919050565b600061339461338f61338a84612739565b61336f565b612703565b9050919050565b6133a481613379565b82525050565b82818337600083830152505050565b60006133c583856130cf565b93506133d28385846133aa565b6133db836128f7565b840190509392505050565b600060a0820190506133fb6000830189612f28565b613408602083018861339b565b61341560408301876128cd565b61342260608301866128cd565b81810360808301526134358184866133b9565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061348957607f821691505b60208210810361349c5761349b613442565b5b50919050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b60006134d86016836130cf565b91506134e3826134a2565b602082019050919050565b60006020820190508181036000830152613507816134cb565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061356a602e836130cf565b91506135758261350e565b604082019050919050565b600060208201905081810360008301526135998161355d565b9050919050565b6000819050919050565b600060ff82169050919050565b60006135d26135cd6135c8846135a0565b61336f565b6135aa565b9050919050565b6135e2816135b7565b82525050565b60006020820190506135fd60008301846135d9565b92915050565b60006020820190506136186000830184612f19565b92915050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b6000613654600e836130cf565b915061365f8261361e565b602082019050919050565b6000602082019050818103600083015261368381613647565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b60006136c0600e836130cf565b91506136cb8261368a565b602082019050919050565b600060208201905081810360008301526136ef816136b3565b9050919050565b600061370182612739565b915061370c83612739565b925082820390506bffffffffffffffffffffffff8111156137305761372f61314c565b5b92915050565b600061375161374c61374784612d5f565b61336f565b612739565b9050919050565b61376181613736565b82525050565b600060608201905061377c60008301866128cd565b61378960208301856128cd565b6137966040830184613758565b949350505050565b60006060820190506137b360008301866128cd565b6137c06020830185612dcc565b6137cd6040830184612ba4565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613805565b61384c8683613805565b95508019841693508086168417925050509392505050565b600061387f61387a61387584612703565b61336f565b612703565b9050919050565b6000819050919050565b61389983613864565b6138ad6138a582613886565b848454613812565b825550505050565b600090565b6138c26138b5565b6138cd818484613890565b505050565b5b818110156138f1576138e66000826138ba565b6001810190506138d3565b5050565b601f82111561393657613907816137e0565b613910846137f5565b8101602085101561391f578190505b61393361392b856137f5565b8301826138d2565b50505b505050565b600082821c905092915050565b60006139596000198460080261393b565b1980831691505092915050565b60006139728383613948565b9150826002028217905092915050565b61398c83836137d5565b67ffffffffffffffff8111156139a5576139a4612908565b5b6139af8254613471565b6139ba8282856138f5565b6000601f8311600181146139e957600084156139d7578287013590505b6139e18582613966565b865550613a49565b601f1984166139f7866137e0565b60005b82811015613a1f578489013582556001820191506020850194506020810190506139fa565b86831015613a3c5784890135613a38601f891682613948565b8355505b6001600288020188555050505b50505050505050565b6000613a5e8385612b02565b9350613a6b8385846133aa565b613a74836128f7565b840190509392505050565b60006020820190508181036000830152613a9a818486613a52565b90509392505050565b6000604082019050613ab86000830185612f28565b613ac560208301846128cd565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613b286026836130cf565b9150613b3382613acc565b604082019050919050565b60006020820190508181036000830152613b5781613b1b565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613b946010836130cf565b9150613b9f82613b5e565b602082019050919050565b60006020820190508181036000830152613bc381613b87565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613c006011836130cf565b9150613c0b82613bca565b602082019050919050565b60006020820190508181036000830152613c2f81613bf3565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613c6c600c836130cf565b9150613c7782613c36565b602082019050919050565b60006020820190508181036000830152613c9b81613c5f565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613cd86010836130cf565b9150613ce382613ca2565b602082019050919050565b60006020820190508181036000830152613d0781613ccb565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613d446016836130cf565b9150613d4f82613d0e565b602082019050919050565b60006020820190508181036000830152613d7381613d37565b9050919050565b7f496e76616c696453656e646572466565526563697069656e7400000000000000600082015250565b6000613db06019836130cf565b9150613dbb82613d7a565b602082019050919050565b60006020820190508181036000830152613ddf81613da3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e1c6020836130cf565b9150613e2782613de6565b602082019050919050565b60006020820190508181036000830152613e4b81613e0f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613eae602b836130cf565b9150613eb982613e52565b604082019050919050565b60006020820190508181036000830152613edd81613ea1565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613f1a6014836130cf565b9150613f2582613ee4565b602082019050919050565b60006020820190508181036000830152613f4981613f0d565b905091905056fea264697066735822122026b224a9fe39179f554d9e0f6cfd5bbbe11ee1e5ac5b6989ea85352cd5cd7feb64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3F86 DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x99E3C0B4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xC2280103 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xD28A8D32 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3BA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x9015DCED EQ PUSH2 0x2D2 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x268 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x27E2 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x28DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x2A9B JUMP JUMPDEST PUSH2 0xA2D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DE PUSH2 0xBD3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0xBFC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x2BCE JUMP JUMPDEST PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0xC66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x2D03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x2D1F JUMP JUMPDEST PUSH2 0xEA1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28C PUSH2 0x1047 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x296 PUSH2 0x1197 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x11A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x2DF6 JUMP JUMPDEST PUSH2 0x123E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x2E71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x318 SWAP2 SWAP1 PUSH2 0x2EC6 JUMP JUMPDEST PUSH2 0x1652 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x327 PUSH2 0x1788 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP3 SWAP2 SWAP1 PUSH2 0x2F37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0x17AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x2F8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x3000 JUMP JUMPDEST PUSH2 0x17EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x304D JUMP JUMPDEST PUSH2 0x1845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2BCE JUMP JUMPDEST PUSH2 0x1BDE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x453 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4A1 PUSH2 0x2416 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x499 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x508 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F0 JUMPI PUSH2 0x4EF PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x1C61 JUMP JUMPDEST PUSH2 0x52C DUP12 DUP12 DUP7 DUP10 DUP10 DUP15 PUSH2 0x1CAB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 SWAP1 POP GT PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x569 SWAP1 PUSH2 0x312C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP9 DUP15 PUSH2 0x59C SWAP2 SWAP1 PUSH2 0x317B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x64E SWAP1 PUSH2 0x3228 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6A5 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3299 JUMP JUMPDEST PUSH2 0x6F8 SWAP2 SWAP1 PUSH2 0x330A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP14 PUSH2 0x7CB SWAP2 SWAP1 PUSH2 0x333B JUMP JUMPDEST DUP2 MSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE SWAP1 POP POP DUP2 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x94BED2B14A43EFAEC8C295BA3FBCE0AA493E61643C3ADB49774CA7DF08D5A919 DUP5 DUP13 DUP16 DUP16 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0xA16 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA35 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA6C JUMPI PUSH2 0xA6B PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD1 JUMPI PUSH2 0xAD0 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAFD JUMPI PUSH2 0xAFC PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA3E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xB50 SWAP1 PUSH2 0x3471 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB7C SWAP1 PUSH2 0x3471 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB9E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBAC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBDB PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0xBE3 PUSH2 0x1F43 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC04 PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x0 PUSH2 0x1FA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC6E PUSH2 0x2436 JUMP JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEA9 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF0F SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0xF81 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0xFEA JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1078 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x10A5 JUMPI POP PUSH2 0x1087 ADDRESS PUSH2 0x206C JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x10A4 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x10E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10DB SWAP1 PUSH2 0x3580 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1121 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1133 PUSH2 0x208F JUMP JUMPDEST PUSH2 0x113B PUSH2 0x20E8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x118B SWAP2 SWAP1 PUSH2 0x35E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x119F PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0x11A7 PUSH2 0x2141 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11B1 PUSH2 0x1EC5 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1209 SWAP2 SWAP1 PUSH2 0x3603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C8 SWAP1 PUSH2 0x366A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132C SWAP1 PUSH2 0x36D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13B7 SWAP2 SWAP1 PUSH2 0x36F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1559 JUMPI PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0x1481 JUMPI PUSH2 0x1480 DUP8 PUSH2 0x21A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD GT ISZERO PUSH2 0x1558 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1513 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1532 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1556 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP7 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15AA SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15ED SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH32 0xA9EC2B6676D3EA3E8DA117193C71B1B85FCDBC72F077A624F950241EB38F13C2 DUP11 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1639 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP7 DUP2 SWAP3 POP SWAP3 POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165A PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16C0 SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1748 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x177B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x379E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x17B5 PUSH2 0x24FF JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17F6 PUSH2 0x1EC5 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1807 SWAP3 SWAP2 SWAP1 PUSH2 0x3982 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1839 SWAP3 SWAP2 SWAP1 PUSH2 0x3A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18CE SWAP1 PUSH2 0x366A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x193B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1932 SWAP1 PUSH2 0x36D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x333B JUMP JUMPDEST SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F4 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP4 PUSH32 0x79252C381C5280F78C77F378791E42B506843A48916430480EAB95A898CDAE9F DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BCA SWAP3 SWAP2 SWAP1 PUSH2 0x3AA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BE6 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C4C SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C5E DUP2 PUSH2 0x1FA6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C69 PUSH2 0xBE5 JUMP JUMPDEST ISZERO PUSH2 0x1CA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA0 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D2E SWAP1 PUSH2 0x3C16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1D7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D71 SWAP1 PUSH2 0x3C82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE0 SWAP1 PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1E44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3B SWAP1 PUSH2 0x3D5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1EBD JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EB3 SWAP1 PUSH2 0x3DC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1ECD PUSH2 0x22F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EEB PUSH2 0x1214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F38 SWAP1 PUSH2 0x3E32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1F4B PUSH2 0x2300 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1F8F PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9C SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D5 SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20E6 PUSH2 0x2349 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2137 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x212E SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x213F PUSH2 0x23AA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2149 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x218D PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219A SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x226B SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22AE SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x44F6938CA4A10313AABB76F874CCED61E35710A734A126E4AFB34461BF8C2501 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2308 PUSH2 0xBE5 JUMP JUMPDEST PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x233E SWAP1 PUSH2 0x3F30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2398 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x238F SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23A8 PUSH2 0x23A3 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x1FA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23F0 SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2546 DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP2 EQ PUSH2 0x2551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2563 DUP2 PUSH2 0x253D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257F JUMPI PUSH2 0x257E PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258D DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25CB DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x25E7 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x25FA PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260C DUP4 DUP4 PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2630 DUP3 PUSH2 0x2596 JUMP JUMPDEST PUSH2 0x263A DUP2 DUP6 PUSH2 0x25A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2645 DUP4 PUSH2 0x25B2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2676 JUMPI DUP2 MLOAD PUSH2 0x265D DUP9 DUP3 PUSH2 0x2600 JUMP JUMPDEST SWAP8 POP PUSH2 0x2668 DUP4 PUSH2 0x2618 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2649 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x269D DUP2 DUP5 PUSH2 0x2625 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D0 DUP3 PUSH2 0x26A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E0 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP2 EQ PUSH2 0x26EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26FD DUP2 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2716 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP2 EQ PUSH2 0x2721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2733 DUP2 PUSH2 0x270D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x275A DUP2 PUSH2 0x2739 JUMP JUMPDEST DUP2 EQ PUSH2 0x2765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2777 DUP2 PUSH2 0x2751 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x27A2 JUMPI PUSH2 0x27A1 PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27BF JUMPI PUSH2 0x27BE PUSH2 0x2782 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x27DB JUMPI PUSH2 0x27DA PUSH2 0x2787 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2806 JUMPI PUSH2 0x2805 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2814 DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2825 DUP14 DUP3 DUP15 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2836 DUP14 DUP3 DUP15 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2847 DUP14 DUP3 DUP15 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2858 DUP14 DUP3 DUP15 ADD PUSH2 0x2768 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2869 DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x287A DUP14 DUP3 DUP15 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x288B DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28AD JUMPI PUSH2 0x28AC PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x28B9 DUP14 DUP3 DUP15 ADD PUSH2 0x278C JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x28D6 DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2940 DUP3 PUSH2 0x28F7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x295F JUMPI PUSH2 0x295E PUSH2 0x2908 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2972 PUSH2 0x251F JUMP JUMPDEST SWAP1 POP PUSH2 0x297E DUP3 DUP3 PUSH2 0x2937 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x299E JUMPI PUSH2 0x299D PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29CA JUMPI PUSH2 0x29C9 PUSH2 0x29AF JUMP JUMPDEST JUMPDEST PUSH2 0x29D4 PUSH1 0x40 PUSH2 0x2968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29E4 DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x29F8 DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A17 PUSH2 0x2A12 DUP5 PUSH2 0x2983 JUMP JUMPDEST PUSH2 0x2968 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A3A JUMPI PUSH2 0x2A39 PUSH2 0x2787 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A63 JUMPI DUP1 PUSH2 0x2A4F DUP9 DUP3 PUSH2 0x29B4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2A3C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A82 JUMPI PUSH2 0x2A81 PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A92 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AC0 DUP6 DUP3 DUP7 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AE1 JUMPI PUSH2 0x2AE0 PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x2AED DUP6 DUP3 DUP7 ADD PUSH2 0x2A6D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B31 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B48 DUP3 PUSH2 0x2AF7 JUMP JUMPDEST PUSH2 0x2B52 DUP2 DUP6 PUSH2 0x2B02 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B62 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B13 JUMP JUMPDEST PUSH2 0x2B6B DUP2 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B90 DUP2 DUP5 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BAD DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BA4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE4 JUMPI PUSH2 0x2BE3 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BF2 DUP5 DUP3 DUP6 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C04 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C13 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C22 DUP2 PUSH2 0x2739 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C31 DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x140 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C4E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C61 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2C74 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2C87 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2C9A PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2CAD PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2C19 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2CC0 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2C28 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2CD3 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2CE8 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2C19 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x2CFD PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 ADD SWAP1 POP PUSH2 0x2D19 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C37 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D36 JUMPI PUSH2 0x2D35 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D44 DUP6 DUP3 DUP7 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2D55 DUP6 DUP3 DUP7 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7C DUP2 PUSH2 0x2D5F JUMP JUMPDEST DUP2 EQ PUSH2 0x2D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2D99 DUP2 PUSH2 0x2D73 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DB5 JUMPI PUSH2 0x2DB4 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DC3 DUP5 DUP3 DUP6 ADD PUSH2 0x2D8A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DD5 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DF0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2E12 JUMPI PUSH2 0x2E11 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E20 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2E31 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2E42 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2E53 DUP9 DUP3 DUP10 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2E64 DUP9 DUP3 DUP10 ADD PUSH2 0x2D8A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E86 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x2E93 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DCC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2EA3 DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP2 EQ PUSH2 0x2EAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EC0 DUP2 PUSH2 0x2E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2EDF JUMPI PUSH2 0x2EDE PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2EED DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2EFE DUP7 DUP3 DUP8 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F0F DUP7 DUP3 DUP8 ADD PUSH2 0x2EB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F22 DUP2 PUSH2 0x2D5F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2F31 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F4C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F19 JUMP JUMPDEST PUSH2 0x2F59 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2F76 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2F89 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2FA4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F60 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FC0 JUMPI PUSH2 0x2FBF PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FDD JUMPI PUSH2 0x2FDC PUSH2 0x2782 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2FF9 JUMPI PUSH2 0x2FF8 PUSH2 0x2787 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3017 JUMPI PUSH2 0x3016 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3035 JUMPI PUSH2 0x3034 PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x3041 DUP6 DUP3 DUP7 ADD PUSH2 0x2FAA JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3066 JUMPI PUSH2 0x3065 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3074 DUP7 DUP3 DUP8 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3085 DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3096 DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C69644D657373616765486173680000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3116 PUSH1 0x12 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3121 DUP3 PUSH2 0x30E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3145 DUP2 PUSH2 0x3109 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3186 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3191 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x31A9 JUMPI PUSH2 0x31A8 PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31C4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x31D1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x31DE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31F5 DUP2 PUSH2 0x2E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3211 JUMPI PUSH2 0x3210 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x321F DUP5 DUP3 DUP6 ADD PUSH2 0x31E6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3265 JUMPI PUSH2 0x3264 PUSH2 0x314C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3285 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x3292 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A4 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x32AF DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x32BD DUP2 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x32D4 JUMPI PUSH2 0x32D3 PUSH2 0x314C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3315 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3320 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3330 JUMPI PUSH2 0x332F PUSH2 0x32DB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3346 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3351 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3369 JUMPI PUSH2 0x3368 PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3394 PUSH2 0x338F PUSH2 0x338A DUP5 PUSH2 0x2739 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2703 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33A4 DUP2 PUSH2 0x3379 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33C5 DUP4 DUP6 PUSH2 0x30CF JUMP JUMPDEST SWAP4 POP PUSH2 0x33D2 DUP4 DUP6 DUP5 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x33DB DUP4 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x33FB PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2F28 JUMP JUMPDEST PUSH2 0x3408 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x339B JUMP JUMPDEST PUSH2 0x3415 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3422 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3435 DUP2 DUP5 DUP7 PUSH2 0x33B9 JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3489 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x349C JUMPI PUSH2 0x349B PUSH2 0x3442 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34D8 PUSH1 0x16 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x34E3 DUP3 PUSH2 0x34A2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3507 DUP2 PUSH2 0x34CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x356A PUSH1 0x2E DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3575 DUP3 PUSH2 0x350E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3599 DUP2 PUSH2 0x355D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35D2 PUSH2 0x35CD PUSH2 0x35C8 DUP5 PUSH2 0x35A0 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x35AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35E2 DUP2 PUSH2 0x35B7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3618 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F19 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3654 PUSH1 0xE DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x365F DUP3 PUSH2 0x361E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3683 DUP2 PUSH2 0x3647 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C0 PUSH1 0xE DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x36CB DUP3 PUSH2 0x368A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36EF DUP2 PUSH2 0x36B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3701 DUP3 PUSH2 0x2739 JUMP JUMPDEST SWAP2 POP PUSH2 0x370C DUP4 PUSH2 0x2739 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3730 JUMPI PUSH2 0x372F PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3751 PUSH2 0x374C PUSH2 0x3747 DUP5 PUSH2 0x2D5F JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2739 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3761 DUP2 PUSH2 0x3736 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x377C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3789 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3796 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3758 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x37B3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x37C0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x37CD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BA4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3842 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3805 JUMP JUMPDEST PUSH2 0x384C DUP7 DUP4 PUSH2 0x3805 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387F PUSH2 0x387A PUSH2 0x3875 DUP5 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2703 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3899 DUP4 PUSH2 0x3864 JUMP JUMPDEST PUSH2 0x38AD PUSH2 0x38A5 DUP3 PUSH2 0x3886 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3812 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x38C2 PUSH2 0x38B5 JUMP JUMPDEST PUSH2 0x38CD DUP2 DUP5 DUP5 PUSH2 0x3890 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x38F1 JUMPI PUSH2 0x38E6 PUSH1 0x0 DUP3 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x38D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3936 JUMPI PUSH2 0x3907 DUP2 PUSH2 0x37E0 JUMP JUMPDEST PUSH2 0x3910 DUP5 PUSH2 0x37F5 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x391F JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3933 PUSH2 0x392B DUP6 PUSH2 0x37F5 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x38D2 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3959 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x393B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3972 DUP4 DUP4 PUSH2 0x3948 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x398C DUP4 DUP4 PUSH2 0x37D5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A5 JUMPI PUSH2 0x39A4 PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x39AF DUP3 SLOAD PUSH2 0x3471 JUMP JUMPDEST PUSH2 0x39BA DUP3 DUP3 DUP6 PUSH2 0x38F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x39E9 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x39D7 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x39E1 DUP6 DUP3 PUSH2 0x3966 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3A49 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x39F7 DUP7 PUSH2 0x37E0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3A1F JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39FA JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3A3C JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x3A38 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3948 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A5E DUP4 DUP6 PUSH2 0x2B02 JUMP JUMPDEST SWAP4 POP PUSH2 0x3A6B DUP4 DUP6 DUP5 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x3A74 DUP4 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9A DUP2 DUP5 DUP7 PUSH2 0x3A52 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3AB8 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F28 JUMP JUMPDEST PUSH2 0x3AC5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x28CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B28 PUSH1 0x26 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B33 DUP3 PUSH2 0x3ACC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B57 DUP2 PUSH2 0x3B1B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B94 PUSH1 0x10 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B9F DUP3 PUSH2 0x3B5E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BC3 DUP2 PUSH2 0x3B87 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C00 PUSH1 0x11 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C0B DUP3 PUSH2 0x3BCA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C2F DUP2 PUSH2 0x3BF3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C6C PUSH1 0xC DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C77 DUP3 PUSH2 0x3C36 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C9B DUP2 PUSH2 0x3C5F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD8 PUSH1 0x10 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3CE3 DUP3 PUSH2 0x3CA2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D07 DUP2 PUSH2 0x3CCB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D44 PUSH1 0x16 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3D4F DUP3 PUSH2 0x3D0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D73 DUP2 PUSH2 0x3D37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB0 PUSH1 0x19 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3DBB DUP3 PUSH2 0x3D7A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DDF DUP2 PUSH2 0x3DA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1C PUSH1 0x20 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3E27 DUP3 PUSH2 0x3DE6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E4B DUP2 PUSH2 0x3E0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EAE PUSH1 0x2B DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3EB9 DUP3 PUSH2 0x3E52 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EDD DUP2 PUSH2 0x3EA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F1A PUSH1 0x14 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3F25 DUP3 PUSH2 0x3EE4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F49 DUP2 PUSH2 0x3F0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xB2 0x24 0xA9 INVALID CODECOPY OR SWAP16 SSTORE 0x4D SWAP15 0xF PUSH13 0xFD5BBBE11EE1E5AC5B6989EA85 CALLDATALOAD 0x2C 0xD5 0xCD PUSH32 0xEB64736F6C634300081200330000000000000000000000000000000000000000 ","sourceMap":"603:8850:13:-:0;;;1041:53;;;;;;;;;;1065:22;:20;;;:22;;:::i;:::-;603:8850;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:17:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;603:8850:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_27":{"entryPoint":8335,"id":27,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_38":{"entryPoint":9033,"id":38,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_333":{"entryPoint":8424,"id":333,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_343":{"entryPoint":9130,"id":343,"parameterSlots":0,"returnSlots":0},"@_checkOwner_69":{"entryPoint":7877,"id":69,"parameterSlots":0,"returnSlots":0},"@_handler_3243":{"entryPoint":7339,"id":3243,"parameterSlots":6,"returnSlots":0},"@_msgSender_1277":{"entryPoint":8952,"id":1277,"parameterSlots":0,"returnSlots":1},"@_pause_407":{"entryPoint":8513,"id":407,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_380":{"entryPoint":7265,"id":380,"parameterSlots":0,"returnSlots":0},"@_requirePaused_391":{"entryPoint":8960,"id":391,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_126":{"entryPoint":8102,"id":126,"parameterSlots":1,"returnSlots":0},"@_transferSenderFee_3393":{"entryPoint":8612,"id":3393,"parameterSlots":1,"returnSlots":0},"@_unpause_423":{"entryPoint":8003,"id":423,"parameterSlots":0,"returnSlots":0},"@createOrder_3174":{"entryPoint":1300,"id":3174,"parameterSlots":10,"returnSlots":1},"@getAggregator_3598":{"entryPoint":2881,"id":3598,"parameterSlots":0,"returnSlots":1},"@getFeeDetails_3589":{"entryPoint":6024,"id":3589,"parameterSlots":0,"returnSlots":2},"@getOrderInfo_3487":{"entryPoint":3174,"id":3487,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionByCode_3514":{"entryPoint":6061,"id":3514,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_3576":{"entryPoint":982,"id":3576,"parameterSlots":1,"returnSlots":1},"@initialize_3013":{"entryPoint":4167,"id":3013,"parameterSlots":0,"returnSlots":0},"@isContract_937":{"entryPoint":8300,"id":937,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_3500":{"entryPoint":3088,"id":3500,"parameterSlots":1,"returnSlots":1},"@owner_55":{"entryPoint":4628,"id":55,"parameterSlots":0,"returnSlots":1},"@pause_3036":{"entryPoint":4503,"id":3036,"parameterSlots":0,"returnSlots":0},"@paused_368":{"entryPoint":3045,"id":368,"parameterSlots":0,"returnSlots":1},"@refund_3473":{"entryPoint":6213,"id":3473,"parameterSlots":3,"returnSlots":1},"@renounceOwnership_83":{"entryPoint":3068,"id":83,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3754":{"entryPoint":2605,"id":3754,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3698":{"entryPoint":5714,"id":3698,"parameterSlots":3,"returnSlots":0},"@settle_3356":{"entryPoint":4670,"id":3356,"parameterSlots":5,"returnSlots":2},"@transferOwnership_106":{"entryPoint":7134,"id":106,"parameterSlots":1,"returnSlots":0},"@unpause_3046":{"entryPoint":3027,"id":3046,"parameterSlots":0,"returnSlots":0},"@updateProtocolAddresses_3812":{"entryPoint":3745,"id":3812,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_3829":{"entryPoint":6126,"id":3829,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3771":{"entryPoint":4521,"id":3771,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":10756,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9966,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":10861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11953,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12774,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9556,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":12202,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_calldata_ptr":{"entryPoint":10124,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$4029_memory_ptr":{"entryPoint":10676,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10020,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":11658,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":10088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11214,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":10210,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12795,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9577,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11551,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":11974,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":10907,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64":{"entryPoint":11766,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":12288,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_bytes32t_bytes32":{"entryPoint":12365,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64":{"entryPoint":11679,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr":{"entryPoint":9728,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":11259,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11724,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9765,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":11304,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11172,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9666,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10445,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14930,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11069,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":13785,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":13241,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":16141,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":15131,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack":{"entryPoint":15455,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":15239,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":13515,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":13661,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack":{"entryPoint":14003,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack":{"entryPoint":15671,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":15887,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack":{"entryPoint":15563,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4_to_t_string_memory_ptr_fromStack":{"entryPoint":12553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack":{"entryPoint":15347,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":16033,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack":{"entryPoint":13895,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack":{"entryPoint":15779,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$4034_memory_ptr_to_t_struct$_InstitutionByCode_$4034_memory_ptr_fromStack":{"entryPoint":12128,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr":{"entryPoint":9681,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$3917_memory_ptr_to_t_struct$_Order_$3917_memory_ptr_fromStack":{"entryPoint":11319,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11274,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12072,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":12057,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint96_fromStack":{"entryPoint":14168,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":13211,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":11289,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":11739,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":12719,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12912,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9859,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11187,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10460,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":11889,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":14238,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed":{"entryPoint":14183,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14975,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11126,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":13800,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16176,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15166,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15490,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15274,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13550,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13696,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15706,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15922,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15598,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12588,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15382,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16068,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13930,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15814,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$4034_memory_ptr__to_t_struct$_InstitutionByCode_$4034_memory_ptr__fromStack_reversed":{"entryPoint":12175,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$3917_memory_ptr__to_t_struct$_Order_$3917_memory_ptr__fromStack_reversed":{"entryPoint":11523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":15011,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13286,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":13827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed":{"entryPoint":12087,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":10600,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9503,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":10627,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":9650,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":14304,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":9622,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":14293,"id":null,"parameterSlots":2,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":10999,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":9752,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9633,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11010,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12495,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12667,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":13066,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12953,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":13115,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":14070,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":14581,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9925,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11160,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9523,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":13728,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9893,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9987,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":11615,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13738,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":10041,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":14546,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":13751,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":14436,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint64_to_t_uint96":{"entryPoint":14134,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":13177,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":14722,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13226,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11027,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":14325,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13425,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":14694,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10551,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":13167,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":12840,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":14664,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12620,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":13019,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":13378,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12448,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10504,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":14470,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":10114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":10109,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10671,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":10119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9518,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9513,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":10487,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":14341,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":14651,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":14522,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":16100,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":15052,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2":{"entryPoint":15414,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":15198,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":13474,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":13582,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5":{"entryPoint":13962,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5":{"entryPoint":15630,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":15846,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7":{"entryPoint":15522,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4":{"entryPoint":12512,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1":{"entryPoint":15306,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15954,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243":{"entryPoint":13854,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8":{"entryPoint":15738,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":14354,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":14480,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9943,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11930,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9533,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9997,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":11635,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":10065,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":14517,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:52110:17","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:17","statements":[{"nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:17"},"nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:17"},"nodeType":"YulFunctionCall","src":"187:12:17"},"nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:17"},"nodeType":"YulFunctionCall","src":"310:12:17"},"nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nodeType":"YulBlock","src":"379:32:17","statements":[{"nodeType":"YulAssignment","src":"389:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:17"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:17","type":""}],"src":"334:77:17"},{"body":{"nodeType":"YulBlock","src":"460:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:17"},"nodeType":"YulFunctionCall","src":"490:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:17"},"nodeType":"YulFunctionCall","src":"480:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:17"},"nodeType":"YulFunctionCall","src":"473:43:17"},"nodeType":"YulIf","src":"470:63:17"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:17","type":""}],"src":"417:122:17"},{"body":{"nodeType":"YulBlock","src":"597:87:17","statements":[{"nodeType":"YulAssignment","src":"607:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:17"},"nodeType":"YulFunctionCall","src":"616:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:17"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:17"},"nodeType":"YulFunctionCall","src":"645:33:17"},"nodeType":"YulExpressionStatement","src":"645:33:17"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:17","type":""}],"src":"545:139:17"},{"body":{"nodeType":"YulBlock","src":"756:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:17"},"nodeType":"YulFunctionCall","src":"804:79:17"},"nodeType":"YulExpressionStatement","src":"804:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:17"},"nodeType":"YulFunctionCall","src":"773:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:17"},"nodeType":"YulFunctionCall","src":"769:32:17"},"nodeType":"YulIf","src":"766:119:17"},{"nodeType":"YulBlock","src":"895:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:17","type":""}]},{"nodeType":"YulAssignment","src":"939:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:17"},"nodeType":"YulFunctionCall","src":"970:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:17"},"nodeType":"YulFunctionCall","src":"949:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:17","type":""}],"src":"690:329:17"},{"body":{"nodeType":"YulBlock","src":"1128:40:17","statements":[{"nodeType":"YulAssignment","src":"1139:22:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:17"},"nodeType":"YulFunctionCall","src":"1149:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:17"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:17","type":""}],"src":"1025:143:17"},{"body":{"nodeType":"YulBlock","src":"1314:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:17"},"nodeType":"YulFunctionCall","src":"1324:19:17"},"nodeType":"YulExpressionStatement","src":"1324:19:17"},{"nodeType":"YulAssignment","src":"1352:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:17"},"nodeType":"YulFunctionCall","src":"1367:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:17"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:17","type":""}],"src":"1174:213:17"},{"body":{"nodeType":"YulBlock","src":"1494:60:17","statements":[{"nodeType":"YulAssignment","src":"1504:11:17","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:17"}]},{"nodeType":"YulAssignment","src":"1525:22:17","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:17"},"nodeType":"YulFunctionCall","src":"1533:14:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:17"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:17","type":""}],"src":"1393:161:17"},{"body":{"nodeType":"YulBlock","src":"1615:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:17"},"nodeType":"YulFunctionCall","src":"1637:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:17"},"nodeType":"YulFunctionCall","src":"1625:37:17"},"nodeType":"YulExpressionStatement","src":"1625:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:17","type":""}],"src":"1560:108:17"},{"body":{"nodeType":"YulBlock","src":"1864:391:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1874:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1890:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1895:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1886:3:17"},"nodeType":"YulFunctionCall","src":"1886:14:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1878:4:17","type":""}]},{"nodeType":"YulBlock","src":"1910:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1945:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1975:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1982:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1971:3:17"},"nodeType":"YulFunctionCall","src":"1971:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1965:5:17"},"nodeType":"YulFunctionCall","src":"1965:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1949:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2035:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2053:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2058:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2049:3:17"},"nodeType":"YulFunctionCall","src":"2049:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2001:33:17"},"nodeType":"YulFunctionCall","src":"2001:63:17"},"nodeType":"YulExpressionStatement","src":"2001:63:17"}]},{"nodeType":"YulBlock","src":"2084:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2119:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2149:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2156:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2145:3:17"},"nodeType":"YulFunctionCall","src":"2145:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2139:5:17"},"nodeType":"YulFunctionCall","src":"2139:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2123:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2209:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2227:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2232:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2223:3:17"},"nodeType":"YulFunctionCall","src":"2223:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2175:33:17"},"nodeType":"YulFunctionCall","src":"2175:63:17"},"nodeType":"YulExpressionStatement","src":"2175:63:17"}]}]},"name":"abi_encode_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1851:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1858:3:17","type":""}],"src":"1750:505:17"},{"body":{"nodeType":"YulBlock","src":"2399:157:17","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2501:6:17"},{"name":"pos","nodeType":"YulIdentifier","src":"2509:3:17"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulIdentifier","src":"2409:91:17"},"nodeType":"YulFunctionCall","src":"2409:104:17"},"nodeType":"YulExpressionStatement","src":"2409:104:17"},{"nodeType":"YulAssignment","src":"2522:28:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2540:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2545:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:17"},"nodeType":"YulFunctionCall","src":"2536:14:17"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2522:10:17"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2372:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2380:3:17","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2388:10:17","type":""}],"src":"2261:295:17"},{"body":{"nodeType":"YulBlock","src":"2666:38:17","statements":[{"nodeType":"YulAssignment","src":"2676:22:17","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2688:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2693:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2684:3:17"},"nodeType":"YulFunctionCall","src":"2684:14:17"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2676:4:17"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2653:3:17","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2661:4:17","type":""}],"src":"2562:142:17"},{"body":{"nodeType":"YulBlock","src":"2972:782:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2982:97:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3073:5:17"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2996:76:17"},"nodeType":"YulFunctionCall","src":"2996:83:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2986:6:17","type":""}]},{"nodeType":"YulAssignment","src":"3088:122:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3198:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"3203:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3095:102:17"},"nodeType":"YulFunctionCall","src":"3095:115:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3088:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"3219:100:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3313:5:17"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3234:78:17"},"nodeType":"YulFunctionCall","src":"3234:85:17"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3223:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3328:21:17","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3342:7:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3332:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3418:311:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3432:34:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3459:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3453:5:17"},"nodeType":"YulFunctionCall","src":"3453:13:17"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3436:13:17","type":""}]},{"nodeType":"YulAssignment","src":"3479:128:17","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3588:13:17"},{"name":"pos","nodeType":"YulIdentifier","src":"3603:3:17"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulIdentifier","src":"3486:101:17"},"nodeType":"YulFunctionCall","src":"3486:121:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3479:3:17"}]},{"nodeType":"YulAssignment","src":"3620:99:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3712:6:17"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3630:81:17"},"nodeType":"YulFunctionCall","src":"3630:89:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3620:6:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3380:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"3383:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3377:2:17"},"nodeType":"YulFunctionCall","src":"3377:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3391:18:17","statements":[{"nodeType":"YulAssignment","src":"3393:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3402:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"3405:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3398:3:17"},"nodeType":"YulFunctionCall","src":"3398:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3393:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3362:14:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3364:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3373:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3368:1:17","type":""}]}]},"src":"3358:371:17"},{"nodeType":"YulAssignment","src":"3738:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"3745:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3738:3:17"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2951:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2958:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2967:3:17","type":""}],"src":"2790:964:17"},{"body":{"nodeType":"YulBlock","src":"3966:283:17","statements":[{"nodeType":"YulAssignment","src":"3976:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3988:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3999:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3984:3:17"},"nodeType":"YulFunctionCall","src":"3984:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3976:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4023:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4034:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4019:3:17"},"nodeType":"YulFunctionCall","src":"4019:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4042:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4048:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4038:3:17"},"nodeType":"YulFunctionCall","src":"4038:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4012:6:17"},"nodeType":"YulFunctionCall","src":"4012:47:17"},"nodeType":"YulExpressionStatement","src":"4012:47:17"},{"nodeType":"YulAssignment","src":"4068:174:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4228:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"4237:4:17"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4076:151:17"},"nodeType":"YulFunctionCall","src":"4076:166:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4068:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3938:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3950:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3961:4:17","type":""}],"src":"3760:489:17"},{"body":{"nodeType":"YulBlock","src":"4300:81:17","statements":[{"nodeType":"YulAssignment","src":"4310:65:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4325:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"4332:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4321:3:17"},"nodeType":"YulFunctionCall","src":"4321:54:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4310:7:17"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4282:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4292:7:17","type":""}],"src":"4255:126:17"},{"body":{"nodeType":"YulBlock","src":"4432:51:17","statements":[{"nodeType":"YulAssignment","src":"4442:35:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4471:5:17"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4453:17:17"},"nodeType":"YulFunctionCall","src":"4453:24:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4442:7:17"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4414:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4424:7:17","type":""}],"src":"4387:96:17"},{"body":{"nodeType":"YulBlock","src":"4532:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"4589:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4598:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4601:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4591:6:17"},"nodeType":"YulFunctionCall","src":"4591:12:17"},"nodeType":"YulExpressionStatement","src":"4591:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4555:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4580:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4562:17:17"},"nodeType":"YulFunctionCall","src":"4562:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4552:2:17"},"nodeType":"YulFunctionCall","src":"4552:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4545:6:17"},"nodeType":"YulFunctionCall","src":"4545:43:17"},"nodeType":"YulIf","src":"4542:63:17"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4525:5:17","type":""}],"src":"4489:122:17"},{"body":{"nodeType":"YulBlock","src":"4669:87:17","statements":[{"nodeType":"YulAssignment","src":"4679:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4701:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4688:12:17"},"nodeType":"YulFunctionCall","src":"4688:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4679:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4744:5:17"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4717:26:17"},"nodeType":"YulFunctionCall","src":"4717:33:17"},"nodeType":"YulExpressionStatement","src":"4717:33:17"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4647:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"4655:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4663:5:17","type":""}],"src":"4617:139:17"},{"body":{"nodeType":"YulBlock","src":"4807:32:17","statements":[{"nodeType":"YulAssignment","src":"4817:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"4828:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4817:7:17"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4789:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4799:7:17","type":""}],"src":"4762:77:17"},{"body":{"nodeType":"YulBlock","src":"4888:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"4945:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4954:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4957:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4947:6:17"},"nodeType":"YulFunctionCall","src":"4947:12:17"},"nodeType":"YulExpressionStatement","src":"4947:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4911:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4936:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4918:17:17"},"nodeType":"YulFunctionCall","src":"4918:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4908:2:17"},"nodeType":"YulFunctionCall","src":"4908:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4901:6:17"},"nodeType":"YulFunctionCall","src":"4901:43:17"},"nodeType":"YulIf","src":"4898:63:17"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4881:5:17","type":""}],"src":"4845:122:17"},{"body":{"nodeType":"YulBlock","src":"5025:87:17","statements":[{"nodeType":"YulAssignment","src":"5035:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5057:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5044:12:17"},"nodeType":"YulFunctionCall","src":"5044:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5035:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5100:5:17"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"5073:26:17"},"nodeType":"YulFunctionCall","src":"5073:33:17"},"nodeType":"YulExpressionStatement","src":"5073:33:17"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5003:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"5011:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5019:5:17","type":""}],"src":"4973:139:17"},{"body":{"nodeType":"YulBlock","src":"5162:65:17","statements":[{"nodeType":"YulAssignment","src":"5172:49:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5187:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"5194:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5183:3:17"},"nodeType":"YulFunctionCall","src":"5183:38:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5172:7:17"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5144:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5154:7:17","type":""}],"src":"5118:109:17"},{"body":{"nodeType":"YulBlock","src":"5275:78:17","statements":[{"body":{"nodeType":"YulBlock","src":"5331:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5340:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5343:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5333:6:17"},"nodeType":"YulFunctionCall","src":"5333:12:17"},"nodeType":"YulExpressionStatement","src":"5333:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5298:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5322:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"5305:16:17"},"nodeType":"YulFunctionCall","src":"5305:23:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5295:2:17"},"nodeType":"YulFunctionCall","src":"5295:34:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5288:6:17"},"nodeType":"YulFunctionCall","src":"5288:42:17"},"nodeType":"YulIf","src":"5285:62:17"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5268:5:17","type":""}],"src":"5233:120:17"},{"body":{"nodeType":"YulBlock","src":"5410:86:17","statements":[{"nodeType":"YulAssignment","src":"5420:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5442:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5429:12:17"},"nodeType":"YulFunctionCall","src":"5429:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5420:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5484:5:17"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"5458:25:17"},"nodeType":"YulFunctionCall","src":"5458:32:17"},"nodeType":"YulExpressionStatement","src":"5458:32:17"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5388:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"5396:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5404:5:17","type":""}],"src":"5359:137:17"},{"body":{"nodeType":"YulBlock","src":"5591:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5608:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5611:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5601:6:17"},"nodeType":"YulFunctionCall","src":"5601:12:17"},"nodeType":"YulExpressionStatement","src":"5601:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5502:117:17"},{"body":{"nodeType":"YulBlock","src":"5714:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5731:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5734:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5724:6:17"},"nodeType":"YulFunctionCall","src":"5724:12:17"},"nodeType":"YulExpressionStatement","src":"5724:12:17"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"5625:117:17"},{"body":{"nodeType":"YulBlock","src":"5837:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5854:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5857:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5847:6:17"},"nodeType":"YulFunctionCall","src":"5847:12:17"},"nodeType":"YulExpressionStatement","src":"5847:12:17"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"5748:117:17"},{"body":{"nodeType":"YulBlock","src":"5960:478:17","statements":[{"body":{"nodeType":"YulBlock","src":"6009:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6011:77:17"},"nodeType":"YulFunctionCall","src":"6011:79:17"},"nodeType":"YulExpressionStatement","src":"6011:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5988:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5996:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5984:3:17"},"nodeType":"YulFunctionCall","src":"5984:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"6003:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5980:3:17"},"nodeType":"YulFunctionCall","src":"5980:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5973:6:17"},"nodeType":"YulFunctionCall","src":"5973:35:17"},"nodeType":"YulIf","src":"5970:122:17"},{"nodeType":"YulAssignment","src":"6101:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6124:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6111:12:17"},"nodeType":"YulFunctionCall","src":"6111:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6101:6:17"}]},{"body":{"nodeType":"YulBlock","src":"6174:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"6176:77:17"},"nodeType":"YulFunctionCall","src":"6176:79:17"},"nodeType":"YulExpressionStatement","src":"6176:79:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6146:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6154:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6143:2:17"},"nodeType":"YulFunctionCall","src":"6143:30:17"},"nodeType":"YulIf","src":"6140:117:17"},{"nodeType":"YulAssignment","src":"6266:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6282:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6290:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6278:3:17"},"nodeType":"YulFunctionCall","src":"6278:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6266:8:17"}]},{"body":{"nodeType":"YulBlock","src":"6349:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6351:77:17"},"nodeType":"YulFunctionCall","src":"6351:79:17"},"nodeType":"YulExpressionStatement","src":"6351:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"6314:8:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6328:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6336:4:17","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6324:3:17"},"nodeType":"YulFunctionCall","src":"6324:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6310:3:17"},"nodeType":"YulFunctionCall","src":"6310:32:17"},{"name":"end","nodeType":"YulIdentifier","src":"6344:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6307:2:17"},"nodeType":"YulFunctionCall","src":"6307:41:17"},"nodeType":"YulIf","src":"6304:128:17"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5927:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"5935:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"5943:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"5953:6:17","type":""}],"src":"5885:553:17"},{"body":{"nodeType":"YulBlock","src":"6665:1472:17","statements":[{"body":{"nodeType":"YulBlock","src":"6712:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6714:77:17"},"nodeType":"YulFunctionCall","src":"6714:79:17"},"nodeType":"YulExpressionStatement","src":"6714:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6686:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6695:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6682:3:17"},"nodeType":"YulFunctionCall","src":"6682:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6707:3:17","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6678:3:17"},"nodeType":"YulFunctionCall","src":"6678:33:17"},"nodeType":"YulIf","src":"6675:120:17"},{"nodeType":"YulBlock","src":"6805:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6820:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6834:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6824:6:17","type":""}]},{"nodeType":"YulAssignment","src":"6849:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6884:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6895:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6880:3:17"},"nodeType":"YulFunctionCall","src":"6880:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6904:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6859:20:17"},"nodeType":"YulFunctionCall","src":"6859:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6849:6:17"}]}]},{"nodeType":"YulBlock","src":"6932:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6947:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6961:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6951:6:17","type":""}]},{"nodeType":"YulAssignment","src":"6977:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7012:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7023:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7008:3:17"},"nodeType":"YulFunctionCall","src":"7008:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7032:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6987:20:17"},"nodeType":"YulFunctionCall","src":"6987:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6977:6:17"}]}]},{"nodeType":"YulBlock","src":"7060:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7075:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7089:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7079:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7105:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7140:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7151:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7136:3:17"},"nodeType":"YulFunctionCall","src":"7136:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7160:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7115:20:17"},"nodeType":"YulFunctionCall","src":"7115:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7105:6:17"}]}]},{"nodeType":"YulBlock","src":"7188:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7203:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7217:2:17","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7207:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7233:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7268:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7279:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7264:3:17"},"nodeType":"YulFunctionCall","src":"7264:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7288:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7243:20:17"},"nodeType":"YulFunctionCall","src":"7243:53:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7233:6:17"}]}]},{"nodeType":"YulBlock","src":"7316:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7331:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7345:3:17","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7335:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7362:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7396:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7407:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7392:3:17"},"nodeType":"YulFunctionCall","src":"7392:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7416:7:17"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"7372:19:17"},"nodeType":"YulFunctionCall","src":"7372:52:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7362:6:17"}]}]},{"nodeType":"YulBlock","src":"7444:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7459:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7473:3:17","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7463:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7490:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7525:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7536:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7521:3:17"},"nodeType":"YulFunctionCall","src":"7521:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7545:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7500:20:17"},"nodeType":"YulFunctionCall","src":"7500:53:17"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7490:6:17"}]}]},{"nodeType":"YulBlock","src":"7573:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7588:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7602:3:17","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7592:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7619:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7654:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7665:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7650:3:17"},"nodeType":"YulFunctionCall","src":"7650:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7674:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7629:20:17"},"nodeType":"YulFunctionCall","src":"7629:53:17"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7619:6:17"}]}]},{"nodeType":"YulBlock","src":"7702:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7717:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7731:3:17","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7721:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7748:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7783:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7794:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7779:3:17"},"nodeType":"YulFunctionCall","src":"7779:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7803:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7758:20:17"},"nodeType":"YulFunctionCall","src":"7758:53:17"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7748:6:17"}]}]},{"nodeType":"YulBlock","src":"7831:299:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7846:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7877:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7888:3:17","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7873:3:17"},"nodeType":"YulFunctionCall","src":"7873:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7860:12:17"},"nodeType":"YulFunctionCall","src":"7860:33:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7850:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7940:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7942:77:17"},"nodeType":"YulFunctionCall","src":"7942:79:17"},"nodeType":"YulExpressionStatement","src":"7942:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7912:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7920:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7909:2:17"},"nodeType":"YulFunctionCall","src":"7909:30:17"},"nodeType":"YulIf","src":"7906:117:17"},{"nodeType":"YulAssignment","src":"8037:83:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8092:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8103:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8088:3:17"},"nodeType":"YulFunctionCall","src":"8088:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8112:7:17"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"8055:32:17"},"nodeType":"YulFunctionCall","src":"8055:65:17"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"8037:6:17"},{"name":"value9","nodeType":"YulIdentifier","src":"8045:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6563:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6574:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6586:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6594:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6602:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6610:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6618:6:17","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6626:6:17","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6634:6:17","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6642:6:17","type":""},{"name":"value8","nodeType":"YulTypedName","src":"6650:6:17","type":""},{"name":"value9","nodeType":"YulTypedName","src":"6658:6:17","type":""}],"src":"6444:1693:17"},{"body":{"nodeType":"YulBlock","src":"8208:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8225:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8248:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8230:17:17"},"nodeType":"YulFunctionCall","src":"8230:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8218:6:17"},"nodeType":"YulFunctionCall","src":"8218:37:17"},"nodeType":"YulExpressionStatement","src":"8218:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8196:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8203:3:17","type":""}],"src":"8143:118:17"},{"body":{"nodeType":"YulBlock","src":"8365:124:17","statements":[{"nodeType":"YulAssignment","src":"8375:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8387:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8398:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8383:3:17"},"nodeType":"YulFunctionCall","src":"8383:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8375:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8455:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8468:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8479:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8464:3:17"},"nodeType":"YulFunctionCall","src":"8464:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8411:43:17"},"nodeType":"YulFunctionCall","src":"8411:71:17"},"nodeType":"YulExpressionStatement","src":"8411:71:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8337:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8349:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8360:4:17","type":""}],"src":"8267:222:17"},{"body":{"nodeType":"YulBlock","src":"8543:54:17","statements":[{"nodeType":"YulAssignment","src":"8553:38:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8571:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"8578:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8567:3:17"},"nodeType":"YulFunctionCall","src":"8567:14:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8587:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8583:3:17"},"nodeType":"YulFunctionCall","src":"8583:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8563:3:17"},"nodeType":"YulFunctionCall","src":"8563:28:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8553:6:17"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8526:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8536:6:17","type":""}],"src":"8495:102:17"},{"body":{"nodeType":"YulBlock","src":"8631:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8648:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8651:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8641:6:17"},"nodeType":"YulFunctionCall","src":"8641:88:17"},"nodeType":"YulExpressionStatement","src":"8641:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8745:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8748:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8738:6:17"},"nodeType":"YulFunctionCall","src":"8738:15:17"},"nodeType":"YulExpressionStatement","src":"8738:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8769:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8772:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8762:6:17"},"nodeType":"YulFunctionCall","src":"8762:15:17"},"nodeType":"YulExpressionStatement","src":"8762:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8603:180:17"},{"body":{"nodeType":"YulBlock","src":"8832:238:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8842:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8864:6:17"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8894:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8872:21:17"},"nodeType":"YulFunctionCall","src":"8872:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8860:3:17"},"nodeType":"YulFunctionCall","src":"8860:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"8846:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"9011:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9013:16:17"},"nodeType":"YulFunctionCall","src":"9013:18:17"},"nodeType":"YulExpressionStatement","src":"9013:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8954:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"8966:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8951:2:17"},"nodeType":"YulFunctionCall","src":"8951:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"8990:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9002:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8987:2:17"},"nodeType":"YulFunctionCall","src":"8987:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8948:2:17"},"nodeType":"YulFunctionCall","src":"8948:62:17"},"nodeType":"YulIf","src":"8945:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9049:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9053:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9042:6:17"},"nodeType":"YulFunctionCall","src":"9042:22:17"},"nodeType":"YulExpressionStatement","src":"9042:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8818:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"8826:4:17","type":""}],"src":"8789:281:17"},{"body":{"nodeType":"YulBlock","src":"9117:88:17","statements":[{"nodeType":"YulAssignment","src":"9127:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"9137:18:17"},"nodeType":"YulFunctionCall","src":"9137:20:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9127:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9186:6:17"},{"name":"size","nodeType":"YulIdentifier","src":"9194:4:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"9166:19:17"},"nodeType":"YulFunctionCall","src":"9166:33:17"},"nodeType":"YulExpressionStatement","src":"9166:33:17"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"9101:4:17","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9110:6:17","type":""}],"src":"9076:129:17"},{"body":{"nodeType":"YulBlock","src":"9322:229:17","statements":[{"body":{"nodeType":"YulBlock","src":"9427:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9429:16:17"},"nodeType":"YulFunctionCall","src":"9429:18:17"},"nodeType":"YulExpressionStatement","src":"9429:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9399:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9407:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9396:2:17"},"nodeType":"YulFunctionCall","src":"9396:30:17"},"nodeType":"YulIf","src":"9393:56:17"},{"nodeType":"YulAssignment","src":"9459:25:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9471:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9479:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9467:3:17"},"nodeType":"YulFunctionCall","src":"9467:17:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9459:4:17"}]},{"nodeType":"YulAssignment","src":"9521:23:17","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9533:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"9539:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9529:3:17"},"nodeType":"YulFunctionCall","src":"9529:15:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9521:4:17"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9306:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9317:4:17","type":""}],"src":"9211:340:17"},{"body":{"nodeType":"YulBlock","src":"9646:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9663:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9666:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9656:6:17"},"nodeType":"YulFunctionCall","src":"9656:12:17"},"nodeType":"YulExpressionStatement","src":"9656:12:17"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"9557:117:17"},{"body":{"nodeType":"YulBlock","src":"9769:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9786:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9789:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9779:6:17"},"nodeType":"YulFunctionCall","src":"9779:12:17"},"nodeType":"YulExpressionStatement","src":"9779:12:17"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"9680:117:17"},{"body":{"nodeType":"YulBlock","src":"9927:494:17","statements":[{"body":{"nodeType":"YulBlock","src":"9971:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"9973:77:17"},"nodeType":"YulFunctionCall","src":"9973:79:17"},"nodeType":"YulExpressionStatement","src":"9973:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"9948:3:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"9953:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9944:3:17"},"nodeType":"YulFunctionCall","src":"9944:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"9965:4:17","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9940:3:17"},"nodeType":"YulFunctionCall","src":"9940:30:17"},"nodeType":"YulIf","src":"9937:117:17"},{"nodeType":"YulAssignment","src":"10063:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10088:4:17","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10072:15:17"},"nodeType":"YulFunctionCall","src":"10072:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10063:5:17"}]},{"nodeType":"YulBlock","src":"10103:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10138:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10152:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10142:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10178:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"10185:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10174:3:17"},"nodeType":"YulFunctionCall","src":"10174:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10217:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"10228:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10213:3:17"},"nodeType":"YulFunctionCall","src":"10213:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"10237:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10192:20:17"},"nodeType":"YulFunctionCall","src":"10192:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10167:6:17"},"nodeType":"YulFunctionCall","src":"10167:75:17"},"nodeType":"YulExpressionStatement","src":"10167:75:17"}]},{"nodeType":"YulBlock","src":"10263:151:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10298:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10312:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10302:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10339:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"10346:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10335:3:17"},"nodeType":"YulFunctionCall","src":"10335:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10378:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"10389:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10374:3:17"},"nodeType":"YulFunctionCall","src":"10374:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"10398:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10353:20:17"},"nodeType":"YulFunctionCall","src":"10353:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10328:6:17"},"nodeType":"YulFunctionCall","src":"10328:75:17"},"nodeType":"YulExpressionStatement","src":"10328:75:17"}]}]},"name":"abi_decode_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9902:9:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"9913:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9921:5:17","type":""}],"src":"9843:578:17"},{"body":{"nodeType":"YulBlock","src":"10600:666:17","statements":[{"nodeType":"YulAssignment","src":"10610:119:17","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10721:6:17"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10635:85:17"},"nodeType":"YulFunctionCall","src":"10635:93:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10619:15:17"},"nodeType":"YulFunctionCall","src":"10619:110:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10610:5:17"}]},{"nodeType":"YulVariableDeclaration","src":"10738:16:17","value":{"name":"array","nodeType":"YulIdentifier","src":"10749:5:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"10742:3:17","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10771:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"10778:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10764:6:17"},"nodeType":"YulFunctionCall","src":"10764:21:17"},"nodeType":"YulExpressionStatement","src":"10764:21:17"},{"nodeType":"YulAssignment","src":"10794:23:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10805:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"10812:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10801:3:17"},"nodeType":"YulFunctionCall","src":"10801:16:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10794:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"10827:44:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10845:6:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10857:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"10865:4:17","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10853:3:17"},"nodeType":"YulFunctionCall","src":"10853:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10841:3:17"},"nodeType":"YulFunctionCall","src":"10841:30:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10831:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10899:103:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"10913:77:17"},"nodeType":"YulFunctionCall","src":"10913:79:17"},"nodeType":"YulExpressionStatement","src":"10913:79:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10886:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"10894:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10883:2:17"},"nodeType":"YulFunctionCall","src":"10883:15:17"},"nodeType":"YulIf","src":"10880:122:17"},{"body":{"nodeType":"YulBlock","src":"11087:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"11102:21:17","value":{"name":"src","nodeType":"YulIdentifier","src":"11120:3:17"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"11106:10:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11144:3:17"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"11199:10:17"},{"name":"end","nodeType":"YulIdentifier","src":"11211:3:17"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulIdentifier","src":"11149:49:17"},"nodeType":"YulFunctionCall","src":"11149:66:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11137:6:17"},"nodeType":"YulFunctionCall","src":"11137:79:17"},"nodeType":"YulExpressionStatement","src":"11137:79:17"},{"nodeType":"YulAssignment","src":"11229:21:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11240:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11245:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11236:3:17"},"nodeType":"YulFunctionCall","src":"11236:14:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"11229:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11040:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"11045:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11037:2:17"},"nodeType":"YulFunctionCall","src":"11037:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11053:25:17","statements":[{"nodeType":"YulAssignment","src":"11055:21:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11066:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11071:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11062:3:17"},"nodeType":"YulFunctionCall","src":"11062:14:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"11055:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"11015:21:17","statements":[{"nodeType":"YulVariableDeclaration","src":"11017:17:17","value":{"name":"offset","nodeType":"YulIdentifier","src":"11028:6:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"11021:3:17","type":""}]}]},"src":"11011:249:17"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10570:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"10578:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"10586:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10594:5:17","type":""}],"src":"10469:797:17"},{"body":{"nodeType":"YulBlock","src":"11420:322:17","statements":[{"body":{"nodeType":"YulBlock","src":"11469:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"11471:77:17"},"nodeType":"YulFunctionCall","src":"11471:79:17"},"nodeType":"YulExpressionStatement","src":"11471:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11448:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11456:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11444:3:17"},"nodeType":"YulFunctionCall","src":"11444:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"11463:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11440:3:17"},"nodeType":"YulFunctionCall","src":"11440:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11433:6:17"},"nodeType":"YulFunctionCall","src":"11433:35:17"},"nodeType":"YulIf","src":"11430:122:17"},{"nodeType":"YulVariableDeclaration","src":"11561:34:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11588:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11575:12:17"},"nodeType":"YulFunctionCall","src":"11575:20:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11565:6:17","type":""}]},{"nodeType":"YulAssignment","src":"11604:132:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11709:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11717:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11705:3:17"},"nodeType":"YulFunctionCall","src":"11705:17:17"},{"name":"length","nodeType":"YulIdentifier","src":"11724:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"11732:3:17"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11613:91:17"},"nodeType":"YulFunctionCall","src":"11613:123:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"11604:5:17"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11398:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"11406:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"11414:5:17","type":""}],"src":"11314:428:17"},{"body":{"nodeType":"YulBlock","src":"11885:605:17","statements":[{"body":{"nodeType":"YulBlock","src":"11931:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11933:77:17"},"nodeType":"YulFunctionCall","src":"11933:79:17"},"nodeType":"YulExpressionStatement","src":"11933:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11906:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11915:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11902:3:17"},"nodeType":"YulFunctionCall","src":"11902:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"11927:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11898:3:17"},"nodeType":"YulFunctionCall","src":"11898:32:17"},"nodeType":"YulIf","src":"11895:119:17"},{"nodeType":"YulBlock","src":"12024:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12039:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"12053:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12043:6:17","type":""}]},{"nodeType":"YulAssignment","src":"12068:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12103:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"12114:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12099:3:17"},"nodeType":"YulFunctionCall","src":"12099:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12123:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"12078:20:17"},"nodeType":"YulFunctionCall","src":"12078:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12068:6:17"}]}]},{"nodeType":"YulBlock","src":"12151:332:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12166:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12197:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12208:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12193:3:17"},"nodeType":"YulFunctionCall","src":"12193:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12180:12:17"},"nodeType":"YulFunctionCall","src":"12180:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12170:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"12259:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"12261:77:17"},"nodeType":"YulFunctionCall","src":"12261:79:17"},"nodeType":"YulExpressionStatement","src":"12261:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12231:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12239:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12228:2:17"},"nodeType":"YulFunctionCall","src":"12228:30:17"},"nodeType":"YulIf","src":"12225:117:17"},{"nodeType":"YulAssignment","src":"12356:117:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12445:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"12456:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12441:3:17"},"nodeType":"YulFunctionCall","src":"12441:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12465:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12366:74:17"},"nodeType":"YulFunctionCall","src":"12366:107:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12356:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11847:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11858:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11870:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11878:6:17","type":""}],"src":"11748:742:17"},{"body":{"nodeType":"YulBlock","src":"12554:40:17","statements":[{"nodeType":"YulAssignment","src":"12565:22:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12581:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12575:5:17"},"nodeType":"YulFunctionCall","src":"12575:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12565:6:17"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12537:5:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12547:6:17","type":""}],"src":"12496:98:17"},{"body":{"nodeType":"YulBlock","src":"12695:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12712:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"12717:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12705:6:17"},"nodeType":"YulFunctionCall","src":"12705:19:17"},"nodeType":"YulExpressionStatement","src":"12705:19:17"},{"nodeType":"YulAssignment","src":"12733:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12752:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"12757:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12748:3:17"},"nodeType":"YulFunctionCall","src":"12748:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12733:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12667:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"12672:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12683:11:17","type":""}],"src":"12600:168:17"},{"body":{"nodeType":"YulBlock","src":"12836:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12846:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"12855:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12850:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"12915:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12940:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"12945:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12936:3:17"},"nodeType":"YulFunctionCall","src":"12936:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12959:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"12964:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12955:3:17"},"nodeType":"YulFunctionCall","src":"12955:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12949:5:17"},"nodeType":"YulFunctionCall","src":"12949:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12929:6:17"},"nodeType":"YulFunctionCall","src":"12929:39:17"},"nodeType":"YulExpressionStatement","src":"12929:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12876:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"12879:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12873:2:17"},"nodeType":"YulFunctionCall","src":"12873:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12887:19:17","statements":[{"nodeType":"YulAssignment","src":"12889:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12898:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"12901:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12894:3:17"},"nodeType":"YulFunctionCall","src":"12894:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12889:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"12869:3:17","statements":[]},"src":"12865:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12998:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"13003:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12994:3:17"},"nodeType":"YulFunctionCall","src":"12994:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"13012:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12987:6:17"},"nodeType":"YulFunctionCall","src":"12987:27:17"},"nodeType":"YulExpressionStatement","src":"12987:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12818:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12823:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"12828:6:17","type":""}],"src":"12774:246:17"},{"body":{"nodeType":"YulBlock","src":"13116:283:17","statements":[{"nodeType":"YulVariableDeclaration","src":"13126:52:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13172:5:17"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13140:31:17"},"nodeType":"YulFunctionCall","src":"13140:38:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13130:6:17","type":""}]},{"nodeType":"YulAssignment","src":"13187:77:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13252:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"13257:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13194:57:17"},"nodeType":"YulFunctionCall","src":"13194:70:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13187:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13312:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"13319:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13308:3:17"},"nodeType":"YulFunctionCall","src":"13308:16:17"},{"name":"pos","nodeType":"YulIdentifier","src":"13326:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"13331:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13273:34:17"},"nodeType":"YulFunctionCall","src":"13273:65:17"},"nodeType":"YulExpressionStatement","src":"13273:65:17"},{"nodeType":"YulAssignment","src":"13347:46:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13358:3:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13385:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13363:21:17"},"nodeType":"YulFunctionCall","src":"13363:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13354:3:17"},"nodeType":"YulFunctionCall","src":"13354:39:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13347:3:17"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13097:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13104:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13112:3:17","type":""}],"src":"13026:373:17"},{"body":{"nodeType":"YulBlock","src":"13521:193:17","statements":[{"nodeType":"YulAssignment","src":"13531:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13543:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13554:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13539:3:17"},"nodeType":"YulFunctionCall","src":"13539:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13531:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13578:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13589:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13574:3:17"},"nodeType":"YulFunctionCall","src":"13574:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13597:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13603:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13593:3:17"},"nodeType":"YulFunctionCall","src":"13593:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13567:6:17"},"nodeType":"YulFunctionCall","src":"13567:47:17"},"nodeType":"YulExpressionStatement","src":"13567:47:17"},{"nodeType":"YulAssignment","src":"13623:84:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13693:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"13702:4:17"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13631:61:17"},"nodeType":"YulFunctionCall","src":"13631:76:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13623:4:17"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13493:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13505:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13516:4:17","type":""}],"src":"13405:309:17"},{"body":{"nodeType":"YulBlock","src":"13762:48:17","statements":[{"nodeType":"YulAssignment","src":"13772:32:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13797:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13790:6:17"},"nodeType":"YulFunctionCall","src":"13790:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13783:6:17"},"nodeType":"YulFunctionCall","src":"13783:21:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13772:7:17"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13744:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13754:7:17","type":""}],"src":"13720:90:17"},{"body":{"nodeType":"YulBlock","src":"13875:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13892:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13912:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13897:14:17"},"nodeType":"YulFunctionCall","src":"13897:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13885:6:17"},"nodeType":"YulFunctionCall","src":"13885:34:17"},"nodeType":"YulExpressionStatement","src":"13885:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13863:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13870:3:17","type":""}],"src":"13816:109:17"},{"body":{"nodeType":"YulBlock","src":"14023:118:17","statements":[{"nodeType":"YulAssignment","src":"14033:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14045:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14056:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14041:3:17"},"nodeType":"YulFunctionCall","src":"14041:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14033:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14107:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14120:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14131:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14116:3:17"},"nodeType":"YulFunctionCall","src":"14116:17:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14069:37:17"},"nodeType":"YulFunctionCall","src":"14069:65:17"},"nodeType":"YulExpressionStatement","src":"14069:65:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13995:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14007:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14018:4:17","type":""}],"src":"13931:210:17"},{"body":{"nodeType":"YulBlock","src":"14213:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"14259:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14261:77:17"},"nodeType":"YulFunctionCall","src":"14261:79:17"},"nodeType":"YulExpressionStatement","src":"14261:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14234:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"14243:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14230:3:17"},"nodeType":"YulFunctionCall","src":"14230:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"14255:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14226:3:17"},"nodeType":"YulFunctionCall","src":"14226:32:17"},"nodeType":"YulIf","src":"14223:119:17"},{"nodeType":"YulBlock","src":"14352:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14367:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"14381:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14371:6:17","type":""}]},{"nodeType":"YulAssignment","src":"14396:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14431:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"14442:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14427:3:17"},"nodeType":"YulFunctionCall","src":"14427:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14451:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14406:20:17"},"nodeType":"YulFunctionCall","src":"14406:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14396:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14183:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14194:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14206:6:17","type":""}],"src":"14147:329:17"},{"body":{"nodeType":"YulBlock","src":"14537:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14554:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14577:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"14559:17:17"},"nodeType":"YulFunctionCall","src":"14559:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14547:6:17"},"nodeType":"YulFunctionCall","src":"14547:37:17"},"nodeType":"YulExpressionStatement","src":"14547:37:17"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14525:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14532:3:17","type":""}],"src":"14482:108:17"},{"body":{"nodeType":"YulBlock","src":"14651:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14668:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14691:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"14673:17:17"},"nodeType":"YulFunctionCall","src":"14673:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14661:6:17"},"nodeType":"YulFunctionCall","src":"14661:37:17"},"nodeType":"YulExpressionStatement","src":"14661:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14639:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14646:3:17","type":""}],"src":"14596:108:17"},{"body":{"nodeType":"YulBlock","src":"14763:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14780:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14802:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"14785:16:17"},"nodeType":"YulFunctionCall","src":"14785:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14773:6:17"},"nodeType":"YulFunctionCall","src":"14773:36:17"},"nodeType":"YulExpressionStatement","src":"14773:36:17"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14751:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14758:3:17","type":""}],"src":"14710:105:17"},{"body":{"nodeType":"YulBlock","src":"14870:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14887:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14907:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"14892:14:17"},"nodeType":"YulFunctionCall","src":"14892:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14880:6:17"},"nodeType":"YulFunctionCall","src":"14880:34:17"},"nodeType":"YulExpressionStatement","src":"14880:34:17"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14858:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14865:3:17","type":""}],"src":"14821:99:17"},{"body":{"nodeType":"YulBlock","src":"15094:1836:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15104:28:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15120:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15125:6:17","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15116:3:17"},"nodeType":"YulFunctionCall","src":"15116:16:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"15108:4:17","type":""}]},{"nodeType":"YulBlock","src":"15142:166:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15179:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15209:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15216:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15205:3:17"},"nodeType":"YulFunctionCall","src":"15205:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15199:5:17"},"nodeType":"YulFunctionCall","src":"15199:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15183:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15269:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15287:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15292:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15283:3:17"},"nodeType":"YulFunctionCall","src":"15283:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"15235:33:17"},"nodeType":"YulFunctionCall","src":"15235:63:17"},"nodeType":"YulExpressionStatement","src":"15235:63:17"}]},{"nodeType":"YulBlock","src":"15318:165:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15354:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15384:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15391:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15380:3:17"},"nodeType":"YulFunctionCall","src":"15380:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15374:5:17"},"nodeType":"YulFunctionCall","src":"15374:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15358:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15444:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15462:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15467:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15458:3:17"},"nodeType":"YulFunctionCall","src":"15458:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"15410:33:17"},"nodeType":"YulFunctionCall","src":"15410:63:17"},"nodeType":"YulExpressionStatement","src":"15410:63:17"}]},{"nodeType":"YulBlock","src":"15493:178:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15542:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15572:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15579:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15568:3:17"},"nodeType":"YulFunctionCall","src":"15568:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15562:5:17"},"nodeType":"YulFunctionCall","src":"15562:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15546:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15632:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15650:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15655:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15646:3:17"},"nodeType":"YulFunctionCall","src":"15646:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"15598:33:17"},"nodeType":"YulFunctionCall","src":"15598:63:17"},"nodeType":"YulExpressionStatement","src":"15598:63:17"}]},{"nodeType":"YulBlock","src":"15681:169:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15721:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15751:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15758:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15747:3:17"},"nodeType":"YulFunctionCall","src":"15747:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15741:5:17"},"nodeType":"YulFunctionCall","src":"15741:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15725:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15811:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15829:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15834:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15825:3:17"},"nodeType":"YulFunctionCall","src":"15825:14:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15777:33:17"},"nodeType":"YulFunctionCall","src":"15777:63:17"},"nodeType":"YulExpressionStatement","src":"15777:63:17"}]},{"nodeType":"YulBlock","src":"15860:171:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15902:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15932:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15939:4:17","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15928:3:17"},"nodeType":"YulFunctionCall","src":"15928:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15922:5:17"},"nodeType":"YulFunctionCall","src":"15922:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15906:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15992:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16010:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16015:4:17","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16006:3:17"},"nodeType":"YulFunctionCall","src":"16006:14:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15958:33:17"},"nodeType":"YulFunctionCall","src":"15958:63:17"},"nodeType":"YulExpressionStatement","src":"15958:63:17"}]},{"nodeType":"YulBlock","src":"16041:162:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16076:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16106:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16113:4:17","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16102:3:17"},"nodeType":"YulFunctionCall","src":"16102:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16096:5:17"},"nodeType":"YulFunctionCall","src":"16096:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16080:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16164:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16182:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16187:4:17","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16178:3:17"},"nodeType":"YulFunctionCall","src":"16178:14:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"16132:31:17"},"nodeType":"YulFunctionCall","src":"16132:61:17"},"nodeType":"YulExpressionStatement","src":"16132:61:17"}]},{"nodeType":"YulBlock","src":"16213:165:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16255:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16285:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16292:4:17","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16281:3:17"},"nodeType":"YulFunctionCall","src":"16281:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16275:5:17"},"nodeType":"YulFunctionCall","src":"16275:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16259:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16339:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16357:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16362:4:17","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16353:3:17"},"nodeType":"YulFunctionCall","src":"16353:14:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"16311:27:17"},"nodeType":"YulFunctionCall","src":"16311:57:17"},"nodeType":"YulExpressionStatement","src":"16311:57:17"}]},{"nodeType":"YulBlock","src":"16388:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16432:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16462:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16469:4:17","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16458:3:17"},"nodeType":"YulFunctionCall","src":"16458:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16452:5:17"},"nodeType":"YulFunctionCall","src":"16452:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16436:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16522:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16540:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16545:4:17","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16536:3:17"},"nodeType":"YulFunctionCall","src":"16536:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"16488:33:17"},"nodeType":"YulFunctionCall","src":"16488:63:17"},"nodeType":"YulExpressionStatement","src":"16488:63:17"}]},{"nodeType":"YulBlock","src":"16571:172:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16612:45:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16642:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16649:6:17","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16638:3:17"},"nodeType":"YulFunctionCall","src":"16638:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16632:5:17"},"nodeType":"YulFunctionCall","src":"16632:25:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16616:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16702:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16720:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16725:6:17","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16716:3:17"},"nodeType":"YulFunctionCall","src":"16716:16:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"16670:31:17"},"nodeType":"YulFunctionCall","src":"16670:63:17"},"nodeType":"YulExpressionStatement","src":"16670:63:17"}]},{"nodeType":"YulBlock","src":"16753:170:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16790:45:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16820:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16827:6:17","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16816:3:17"},"nodeType":"YulFunctionCall","src":"16816:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16810:5:17"},"nodeType":"YulFunctionCall","src":"16810:25:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16794:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16882:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16900:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16905:6:17","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16896:3:17"},"nodeType":"YulFunctionCall","src":"16896:16:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"16848:33:17"},"nodeType":"YulFunctionCall","src":"16848:65:17"},"nodeType":"YulExpressionStatement","src":"16848:65:17"}]}]},"name":"abi_encode_t_struct$_Order_$3917_memory_ptr_to_t_struct$_Order_$3917_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15081:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15088:3:17","type":""}],"src":"14982:1948:17"},{"body":{"nodeType":"YulBlock","src":"17080:171:17","statements":[{"nodeType":"YulAssignment","src":"17090:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17102:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17113:3:17","type":"","value":"320"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17098:3:17"},"nodeType":"YulFunctionCall","src":"17098:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17090:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17217:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17230:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17241:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17226:3:17"},"nodeType":"YulFunctionCall","src":"17226:17:17"}],"functionName":{"name":"abi_encode_t_struct$_Order_$3917_memory_ptr_to_t_struct$_Order_$3917_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17127:89:17"},"nodeType":"YulFunctionCall","src":"17127:117:17"},"nodeType":"YulExpressionStatement","src":"17127:117:17"}]},"name":"abi_encode_tuple_t_struct$_Order_$3917_memory_ptr__to_t_struct$_Order_$3917_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17052:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17064:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17075:4:17","type":""}],"src":"16936:315:17"},{"body":{"nodeType":"YulBlock","src":"17340:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"17386:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17388:77:17"},"nodeType":"YulFunctionCall","src":"17388:79:17"},"nodeType":"YulExpressionStatement","src":"17388:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17361:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17370:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17357:3:17"},"nodeType":"YulFunctionCall","src":"17357:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"17382:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17353:3:17"},"nodeType":"YulFunctionCall","src":"17353:32:17"},"nodeType":"YulIf","src":"17350:119:17"},{"nodeType":"YulBlock","src":"17479:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"17494:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17508:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17498:6:17","type":""}]},{"nodeType":"YulAssignment","src":"17523:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17558:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"17569:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17554:3:17"},"nodeType":"YulFunctionCall","src":"17554:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17578:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"17533:20:17"},"nodeType":"YulFunctionCall","src":"17533:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17523:6:17"}]}]},{"nodeType":"YulBlock","src":"17606:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"17621:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17635:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17625:6:17","type":""}]},{"nodeType":"YulAssignment","src":"17651:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17686:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"17697:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17682:3:17"},"nodeType":"YulFunctionCall","src":"17682:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17706:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17661:20:17"},"nodeType":"YulFunctionCall","src":"17661:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17651:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17302:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17313:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17325:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17333:6:17","type":""}],"src":"17257:474:17"},{"body":{"nodeType":"YulBlock","src":"17781:57:17","statements":[{"nodeType":"YulAssignment","src":"17791:41:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17806:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"17813:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17802:3:17"},"nodeType":"YulFunctionCall","src":"17802:30:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17791:7:17"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17763:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17773:7:17","type":""}],"src":"17737:101:17"},{"body":{"nodeType":"YulBlock","src":"17886:78:17","statements":[{"body":{"nodeType":"YulBlock","src":"17942:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17951:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17954:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17944:6:17"},"nodeType":"YulFunctionCall","src":"17944:12:17"},"nodeType":"YulExpressionStatement","src":"17944:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17909:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17933:5:17"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"17916:16:17"},"nodeType":"YulFunctionCall","src":"17916:23:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17906:2:17"},"nodeType":"YulFunctionCall","src":"17906:34:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17899:6:17"},"nodeType":"YulFunctionCall","src":"17899:42:17"},"nodeType":"YulIf","src":"17896:62:17"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17879:5:17","type":""}],"src":"17844:120:17"},{"body":{"nodeType":"YulBlock","src":"18021:86:17","statements":[{"nodeType":"YulAssignment","src":"18031:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18053:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18040:12:17"},"nodeType":"YulFunctionCall","src":"18040:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18031:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18095:5:17"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"18069:25:17"},"nodeType":"YulFunctionCall","src":"18069:32:17"},"nodeType":"YulExpressionStatement","src":"18069:32:17"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17999:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"18007:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18015:5:17","type":""}],"src":"17970:137:17"},{"body":{"nodeType":"YulBlock","src":"18178:262:17","statements":[{"body":{"nodeType":"YulBlock","src":"18224:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18226:77:17"},"nodeType":"YulFunctionCall","src":"18226:79:17"},"nodeType":"YulExpressionStatement","src":"18226:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18199:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"18208:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18195:3:17"},"nodeType":"YulFunctionCall","src":"18195:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"18220:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18191:3:17"},"nodeType":"YulFunctionCall","src":"18191:32:17"},"nodeType":"YulIf","src":"18188:119:17"},{"nodeType":"YulBlock","src":"18317:116:17","statements":[{"nodeType":"YulVariableDeclaration","src":"18332:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"18346:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18336:6:17","type":""}]},{"nodeType":"YulAssignment","src":"18361:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18395:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"18406:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18391:3:17"},"nodeType":"YulFunctionCall","src":"18391:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18415:7:17"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"18371:19:17"},"nodeType":"YulFunctionCall","src":"18371:52:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18361:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18148:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18159:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18171:6:17","type":""}],"src":"18113:327:17"},{"body":{"nodeType":"YulBlock","src":"18511:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18528:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18551:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"18533:17:17"},"nodeType":"YulFunctionCall","src":"18533:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18521:6:17"},"nodeType":"YulFunctionCall","src":"18521:37:17"},"nodeType":"YulExpressionStatement","src":"18521:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18499:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18506:3:17","type":""}],"src":"18446:118:17"},{"body":{"nodeType":"YulBlock","src":"18668:124:17","statements":[{"nodeType":"YulAssignment","src":"18678:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18690:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18701:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18686:3:17"},"nodeType":"YulFunctionCall","src":"18686:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18678:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18758:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18771:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18782:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18767:3:17"},"nodeType":"YulFunctionCall","src":"18767:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18714:43:17"},"nodeType":"YulFunctionCall","src":"18714:71:17"},"nodeType":"YulExpressionStatement","src":"18714:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18640:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18652:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18663:4:17","type":""}],"src":"18570:222:17"},{"body":{"nodeType":"YulBlock","src":"18931:776:17","statements":[{"body":{"nodeType":"YulBlock","src":"18978:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18980:77:17"},"nodeType":"YulFunctionCall","src":"18980:79:17"},"nodeType":"YulExpressionStatement","src":"18980:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18952:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"18961:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18948:3:17"},"nodeType":"YulFunctionCall","src":"18948:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"18973:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18944:3:17"},"nodeType":"YulFunctionCall","src":"18944:33:17"},"nodeType":"YulIf","src":"18941:120:17"},{"nodeType":"YulBlock","src":"19071:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19086:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19100:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19090:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19115:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19150:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"19161:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19146:3:17"},"nodeType":"YulFunctionCall","src":"19146:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19170:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19125:20:17"},"nodeType":"YulFunctionCall","src":"19125:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19115:6:17"}]}]},{"nodeType":"YulBlock","src":"19198:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19213:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19227:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19217:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19243:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19278:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"19289:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19274:3:17"},"nodeType":"YulFunctionCall","src":"19274:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19298:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19253:20:17"},"nodeType":"YulFunctionCall","src":"19253:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19243:6:17"}]}]},{"nodeType":"YulBlock","src":"19326:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19341:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19355:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19345:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19371:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19406:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"19417:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19402:3:17"},"nodeType":"YulFunctionCall","src":"19402:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19426:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"19381:20:17"},"nodeType":"YulFunctionCall","src":"19381:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"19371:6:17"}]}]},{"nodeType":"YulBlock","src":"19454:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19469:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19483:2:17","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19473:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19499:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19534:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"19545:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19530:3:17"},"nodeType":"YulFunctionCall","src":"19530:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19554:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19509:20:17"},"nodeType":"YulFunctionCall","src":"19509:53:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"19499:6:17"}]}]},{"nodeType":"YulBlock","src":"19582:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19597:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19611:3:17","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19601:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19628:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19662:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"19673:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19658:3:17"},"nodeType":"YulFunctionCall","src":"19658:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19682:7:17"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"19638:19:17"},"nodeType":"YulFunctionCall","src":"19638:52:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"19628:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18869:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18880:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18892:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18900:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18908:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18916:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"18924:6:17","type":""}],"src":"18798:909:17"},{"body":{"nodeType":"YulBlock","src":"19839:206:17","statements":[{"nodeType":"YulAssignment","src":"19849:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19861:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19872:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19857:3:17"},"nodeType":"YulFunctionCall","src":"19857:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19849:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19929:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19942:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19953:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19938:3:17"},"nodeType":"YulFunctionCall","src":"19938:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"19885:43:17"},"nodeType":"YulFunctionCall","src":"19885:71:17"},"nodeType":"YulExpressionStatement","src":"19885:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20010:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20023:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20034:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20019:3:17"},"nodeType":"YulFunctionCall","src":"20019:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19966:43:17"},"nodeType":"YulFunctionCall","src":"19966:72:17"},"nodeType":"YulExpressionStatement","src":"19966:72:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19803:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19815:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19823:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19834:4:17","type":""}],"src":"19713:332:17"},{"body":{"nodeType":"YulBlock","src":"20091:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"20145:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20154:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20157:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20147:6:17"},"nodeType":"YulFunctionCall","src":"20147:12:17"},"nodeType":"YulExpressionStatement","src":"20147:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20114:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20136:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"20121:14:17"},"nodeType":"YulFunctionCall","src":"20121:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"20111:2:17"},"nodeType":"YulFunctionCall","src":"20111:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20104:6:17"},"nodeType":"YulFunctionCall","src":"20104:40:17"},"nodeType":"YulIf","src":"20101:60:17"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20084:5:17","type":""}],"src":"20051:116:17"},{"body":{"nodeType":"YulBlock","src":"20222:84:17","statements":[{"nodeType":"YulAssignment","src":"20232:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20254:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20241:12:17"},"nodeType":"YulFunctionCall","src":"20241:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20232:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20294:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"20270:23:17"},"nodeType":"YulFunctionCall","src":"20270:30:17"},"nodeType":"YulExpressionStatement","src":"20270:30:17"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"20200:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"20208:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"20216:5:17","type":""}],"src":"20173:133:17"},{"body":{"nodeType":"YulBlock","src":"20409:516:17","statements":[{"body":{"nodeType":"YulBlock","src":"20455:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20457:77:17"},"nodeType":"YulFunctionCall","src":"20457:79:17"},"nodeType":"YulExpressionStatement","src":"20457:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20430:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"20439:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20426:3:17"},"nodeType":"YulFunctionCall","src":"20426:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"20451:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20422:3:17"},"nodeType":"YulFunctionCall","src":"20422:32:17"},"nodeType":"YulIf","src":"20419:119:17"},{"nodeType":"YulBlock","src":"20548:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20563:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20577:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20567:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20592:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20627:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20638:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20623:3:17"},"nodeType":"YulFunctionCall","src":"20623:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20647:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"20602:20:17"},"nodeType":"YulFunctionCall","src":"20602:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20592:6:17"}]}]},{"nodeType":"YulBlock","src":"20675:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20690:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20704:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20694:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20720:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20755:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20766:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20751:3:17"},"nodeType":"YulFunctionCall","src":"20751:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20775:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20730:20:17"},"nodeType":"YulFunctionCall","src":"20730:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20720:6:17"}]}]},{"nodeType":"YulBlock","src":"20803:115:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20818:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20832:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20822:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20848:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20880:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20891:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20876:3:17"},"nodeType":"YulFunctionCall","src":"20876:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20900:7:17"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"20858:17:17"},"nodeType":"YulFunctionCall","src":"20858:50:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20848:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20363:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20374:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20386:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20394:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20402:6:17","type":""}],"src":"20312:613:17"},{"body":{"nodeType":"YulBlock","src":"20994:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21011:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21033:5:17"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"21016:16:17"},"nodeType":"YulFunctionCall","src":"21016:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21004:6:17"},"nodeType":"YulFunctionCall","src":"21004:36:17"},"nodeType":"YulExpressionStatement","src":"21004:36:17"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20982:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20989:3:17","type":""}],"src":"20931:115:17"},{"body":{"nodeType":"YulBlock","src":"21117:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21134:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21157:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21139:17:17"},"nodeType":"YulFunctionCall","src":"21139:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21127:6:17"},"nodeType":"YulFunctionCall","src":"21127:37:17"},"nodeType":"YulExpressionStatement","src":"21127:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21105:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21112:3:17","type":""}],"src":"21052:118:17"},{"body":{"nodeType":"YulBlock","src":"21300:204:17","statements":[{"nodeType":"YulAssignment","src":"21310:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21322:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21333:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21318:3:17"},"nodeType":"YulFunctionCall","src":"21318:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21310:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21388:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21401:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21412:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21397:3:17"},"nodeType":"YulFunctionCall","src":"21397:17:17"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"21346:41:17"},"nodeType":"YulFunctionCall","src":"21346:69:17"},"nodeType":"YulExpressionStatement","src":"21346:69:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21469:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21482:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21493:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21478:3:17"},"nodeType":"YulFunctionCall","src":"21478:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21425:43:17"},"nodeType":"YulFunctionCall","src":"21425:72:17"},"nodeType":"YulExpressionStatement","src":"21425:72:17"}]},"name":"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21264:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21276:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21284:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21295:4:17","type":""}],"src":"21176:328:17"},{"body":{"nodeType":"YulBlock","src":"21734:395:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21744:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21760:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"21765:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21756:3:17"},"nodeType":"YulFunctionCall","src":"21756:14:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"21748:4:17","type":""}]},{"nodeType":"YulBlock","src":"21780:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21815:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21845:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"21852:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21841:3:17"},"nodeType":"YulFunctionCall","src":"21841:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21835:5:17"},"nodeType":"YulFunctionCall","src":"21835:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21819:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21905:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21923:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"21928:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21919:3:17"},"nodeType":"YulFunctionCall","src":"21919:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"21871:33:17"},"nodeType":"YulFunctionCall","src":"21871:63:17"},"nodeType":"YulExpressionStatement","src":"21871:63:17"}]},{"nodeType":"YulBlock","src":"21954:168:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21993:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22023:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"22030:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22019:3:17"},"nodeType":"YulFunctionCall","src":"22019:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22013:5:17"},"nodeType":"YulFunctionCall","src":"22013:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21997:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"22083:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22101:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"22106:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22097:3:17"},"nodeType":"YulFunctionCall","src":"22097:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"22049:33:17"},"nodeType":"YulFunctionCall","src":"22049:63:17"},"nodeType":"YulExpressionStatement","src":"22049:63:17"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$4034_memory_ptr_to_t_struct$_InstitutionByCode_$4034_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21721:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21728:3:17","type":""}],"src":"21598:531:17"},{"body":{"nodeType":"YulBlock","src":"22303:194:17","statements":[{"nodeType":"YulAssignment","src":"22313:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22325:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22336:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22321:3:17"},"nodeType":"YulFunctionCall","src":"22321:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22313:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22463:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22476:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22487:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22472:3:17"},"nodeType":"YulFunctionCall","src":"22472:17:17"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$4034_memory_ptr_to_t_struct$_InstitutionByCode_$4034_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22349:113:17"},"nodeType":"YulFunctionCall","src":"22349:141:17"},"nodeType":"YulExpressionStatement","src":"22349:141:17"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$4034_memory_ptr__to_t_struct$_InstitutionByCode_$4034_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22275:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22287:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22298:4:17","type":""}],"src":"22135:362:17"},{"body":{"nodeType":"YulBlock","src":"22590:478:17","statements":[{"body":{"nodeType":"YulBlock","src":"22639:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"22641:77:17"},"nodeType":"YulFunctionCall","src":"22641:79:17"},"nodeType":"YulExpressionStatement","src":"22641:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22618:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"22626:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22614:3:17"},"nodeType":"YulFunctionCall","src":"22614:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"22633:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22610:3:17"},"nodeType":"YulFunctionCall","src":"22610:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22603:6:17"},"nodeType":"YulFunctionCall","src":"22603:35:17"},"nodeType":"YulIf","src":"22600:122:17"},{"nodeType":"YulAssignment","src":"22731:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22754:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"22741:12:17"},"nodeType":"YulFunctionCall","src":"22741:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22731:6:17"}]},{"body":{"nodeType":"YulBlock","src":"22804:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"22806:77:17"},"nodeType":"YulFunctionCall","src":"22806:79:17"},"nodeType":"YulExpressionStatement","src":"22806:79:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22776:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"22784:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22773:2:17"},"nodeType":"YulFunctionCall","src":"22773:30:17"},"nodeType":"YulIf","src":"22770:117:17"},{"nodeType":"YulAssignment","src":"22896:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22912:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"22920:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22908:3:17"},"nodeType":"YulFunctionCall","src":"22908:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22896:8:17"}]},{"body":{"nodeType":"YulBlock","src":"22979:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"22981:77:17"},"nodeType":"YulFunctionCall","src":"22981:79:17"},"nodeType":"YulExpressionStatement","src":"22981:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"22944:8:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22958:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"22966:4:17","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22954:3:17"},"nodeType":"YulFunctionCall","src":"22954:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22940:3:17"},"nodeType":"YulFunctionCall","src":"22940:32:17"},{"name":"end","nodeType":"YulIdentifier","src":"22974:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22937:2:17"},"nodeType":"YulFunctionCall","src":"22937:41:17"},"nodeType":"YulIf","src":"22934:128:17"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22557:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"22565:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"22573:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"22583:6:17","type":""}],"src":"22516:552:17"},{"body":{"nodeType":"YulBlock","src":"23159:442:17","statements":[{"body":{"nodeType":"YulBlock","src":"23205:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23207:77:17"},"nodeType":"YulFunctionCall","src":"23207:79:17"},"nodeType":"YulExpressionStatement","src":"23207:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23180:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"23189:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23176:3:17"},"nodeType":"YulFunctionCall","src":"23176:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"23201:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23172:3:17"},"nodeType":"YulFunctionCall","src":"23172:32:17"},"nodeType":"YulIf","src":"23169:119:17"},{"nodeType":"YulBlock","src":"23298:296:17","statements":[{"nodeType":"YulVariableDeclaration","src":"23313:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23344:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23355:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23340:3:17"},"nodeType":"YulFunctionCall","src":"23340:17:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23327:12:17"},"nodeType":"YulFunctionCall","src":"23327:31:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23317:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"23405:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"23407:77:17"},"nodeType":"YulFunctionCall","src":"23407:79:17"},"nodeType":"YulExpressionStatement","src":"23407:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23377:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"23385:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23374:2:17"},"nodeType":"YulFunctionCall","src":"23374:30:17"},"nodeType":"YulIf","src":"23371:117:17"},{"nodeType":"YulAssignment","src":"23502:82:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23556:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"23567:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23552:3:17"},"nodeType":"YulFunctionCall","src":"23552:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23576:7:17"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"23520:31:17"},"nodeType":"YulFunctionCall","src":"23520:64:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23502:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"23510:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23121:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23132:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23144:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23152:6:17","type":""}],"src":"23074:527:17"},{"body":{"nodeType":"YulBlock","src":"23707:519:17","statements":[{"body":{"nodeType":"YulBlock","src":"23753:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23755:77:17"},"nodeType":"YulFunctionCall","src":"23755:79:17"},"nodeType":"YulExpressionStatement","src":"23755:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23728:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"23737:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23724:3:17"},"nodeType":"YulFunctionCall","src":"23724:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"23749:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23720:3:17"},"nodeType":"YulFunctionCall","src":"23720:32:17"},"nodeType":"YulIf","src":"23717:119:17"},{"nodeType":"YulBlock","src":"23846:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"23861:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"23875:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23865:6:17","type":""}]},{"nodeType":"YulAssignment","src":"23890:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23925:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"23936:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23921:3:17"},"nodeType":"YulFunctionCall","src":"23921:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23945:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"23900:20:17"},"nodeType":"YulFunctionCall","src":"23900:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23890:6:17"}]}]},{"nodeType":"YulBlock","src":"23973:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"23988:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"24002:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23992:6:17","type":""}]},{"nodeType":"YulAssignment","src":"24018:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24053:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"24064:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24049:3:17"},"nodeType":"YulFunctionCall","src":"24049:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24073:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24028:20:17"},"nodeType":"YulFunctionCall","src":"24028:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"24018:6:17"}]}]},{"nodeType":"YulBlock","src":"24101:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"24116:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"24130:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24120:6:17","type":""}]},{"nodeType":"YulAssignment","src":"24146:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24181:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"24192:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24177:3:17"},"nodeType":"YulFunctionCall","src":"24177:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24201:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"24156:20:17"},"nodeType":"YulFunctionCall","src":"24156:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"24146:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23661:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23672:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23684:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23692:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23700:6:17","type":""}],"src":"23607:619:17"},{"body":{"nodeType":"YulBlock","src":"24260:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24277:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24280:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24270:6:17"},"nodeType":"YulFunctionCall","src":"24270:88:17"},"nodeType":"YulExpressionStatement","src":"24270:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24374:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24377:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24367:6:17"},"nodeType":"YulFunctionCall","src":"24367:15:17"},"nodeType":"YulExpressionStatement","src":"24367:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24398:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24401:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24391:6:17"},"nodeType":"YulFunctionCall","src":"24391:15:17"},"nodeType":"YulExpressionStatement","src":"24391:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"24232:180:17"},{"body":{"nodeType":"YulBlock","src":"24514:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24531:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"24536:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24524:6:17"},"nodeType":"YulFunctionCall","src":"24524:19:17"},"nodeType":"YulExpressionStatement","src":"24524:19:17"},{"nodeType":"YulAssignment","src":"24552:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24571:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"24576:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24567:3:17"},"nodeType":"YulFunctionCall","src":"24567:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"24552:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24486:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"24491:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"24502:11:17","type":""}],"src":"24418:169:17"},{"body":{"nodeType":"YulBlock","src":"24699:62:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24721:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"24729:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24717:3:17"},"nodeType":"YulFunctionCall","src":"24717:14:17"},{"hexValue":"496e76616c69644d65737361676548617368","kind":"string","nodeType":"YulLiteral","src":"24733:20:17","type":"","value":"InvalidMessageHash"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24710:6:17"},"nodeType":"YulFunctionCall","src":"24710:44:17"},"nodeType":"YulExpressionStatement","src":"24710:44:17"}]},"name":"store_literal_in_memory_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24691:6:17","type":""}],"src":"24593:168:17"},{"body":{"nodeType":"YulBlock","src":"24913:220:17","statements":[{"nodeType":"YulAssignment","src":"24923:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24989:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"24994:2:17","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24930:58:17"},"nodeType":"YulFunctionCall","src":"24930:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24923:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25095:3:17"}],"functionName":{"name":"store_literal_in_memory_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","nodeType":"YulIdentifier","src":"25006:88:17"},"nodeType":"YulFunctionCall","src":"25006:93:17"},"nodeType":"YulExpressionStatement","src":"25006:93:17"},{"nodeType":"YulAssignment","src":"25108:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25119:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"25124:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25115:3:17"},"nodeType":"YulFunctionCall","src":"25115:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25108:3:17"}]}]},"name":"abi_encode_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24901:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24909:3:17","type":""}],"src":"24767:366:17"},{"body":{"nodeType":"YulBlock","src":"25310:248:17","statements":[{"nodeType":"YulAssignment","src":"25320:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25332:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25343:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25328:3:17"},"nodeType":"YulFunctionCall","src":"25328:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25320:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25367:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25378:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25363:3:17"},"nodeType":"YulFunctionCall","src":"25363:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25386:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25392:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25382:3:17"},"nodeType":"YulFunctionCall","src":"25382:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25356:6:17"},"nodeType":"YulFunctionCall","src":"25356:47:17"},"nodeType":"YulExpressionStatement","src":"25356:47:17"},{"nodeType":"YulAssignment","src":"25412:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25546:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25420:124:17"},"nodeType":"YulFunctionCall","src":"25420:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25412:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25290:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25305:4:17","type":""}],"src":"25139:419:17"},{"body":{"nodeType":"YulBlock","src":"25592:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25609:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25612:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25602:6:17"},"nodeType":"YulFunctionCall","src":"25602:88:17"},"nodeType":"YulExpressionStatement","src":"25602:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25706:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25709:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25699:6:17"},"nodeType":"YulFunctionCall","src":"25699:15:17"},"nodeType":"YulExpressionStatement","src":"25699:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25730:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25733:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25723:6:17"},"nodeType":"YulFunctionCall","src":"25723:15:17"},"nodeType":"YulExpressionStatement","src":"25723:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"25564:180:17"},{"body":{"nodeType":"YulBlock","src":"25794:147:17","statements":[{"nodeType":"YulAssignment","src":"25804:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25827:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25809:17:17"},"nodeType":"YulFunctionCall","src":"25809:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25804:1:17"}]},{"nodeType":"YulAssignment","src":"25838:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25861:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25843:17:17"},"nodeType":"YulFunctionCall","src":"25843:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25838:1:17"}]},{"nodeType":"YulAssignment","src":"25872:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25883:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"25886:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25879:3:17"},"nodeType":"YulFunctionCall","src":"25879:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"25872:3:17"}]},{"body":{"nodeType":"YulBlock","src":"25912:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25914:16:17"},"nodeType":"YulFunctionCall","src":"25914:18:17"},"nodeType":"YulExpressionStatement","src":"25914:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25904:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"25907:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25901:2:17"},"nodeType":"YulFunctionCall","src":"25901:10:17"},"nodeType":"YulIf","src":"25898:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25781:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"25784:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"25790:3:17","type":""}],"src":"25750:191:17"},{"body":{"nodeType":"YulBlock","src":"26101:288:17","statements":[{"nodeType":"YulAssignment","src":"26111:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26123:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26134:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26119:3:17"},"nodeType":"YulFunctionCall","src":"26119:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26111:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26191:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26204:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26215:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26200:3:17"},"nodeType":"YulFunctionCall","src":"26200:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26147:43:17"},"nodeType":"YulFunctionCall","src":"26147:71:17"},"nodeType":"YulExpressionStatement","src":"26147:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26272:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26285:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26296:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26281:3:17"},"nodeType":"YulFunctionCall","src":"26281:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26228:43:17"},"nodeType":"YulFunctionCall","src":"26228:72:17"},"nodeType":"YulExpressionStatement","src":"26228:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26354:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26367:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26378:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26363:3:17"},"nodeType":"YulFunctionCall","src":"26363:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26310:43:17"},"nodeType":"YulFunctionCall","src":"26310:72:17"},"nodeType":"YulExpressionStatement","src":"26310:72:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26057:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26069:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26077:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26085:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26096:4:17","type":""}],"src":"25947:442:17"},{"body":{"nodeType":"YulBlock","src":"26455:77:17","statements":[{"nodeType":"YulAssignment","src":"26465:22:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26480:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26474:5:17"},"nodeType":"YulFunctionCall","src":"26474:13:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26465:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26520:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"26496:23:17"},"nodeType":"YulFunctionCall","src":"26496:30:17"},"nodeType":"YulExpressionStatement","src":"26496:30:17"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"26433:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"26441:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26449:5:17","type":""}],"src":"26395:137:17"},{"body":{"nodeType":"YulBlock","src":"26612:271:17","statements":[{"body":{"nodeType":"YulBlock","src":"26658:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"26660:77:17"},"nodeType":"YulFunctionCall","src":"26660:79:17"},"nodeType":"YulExpressionStatement","src":"26660:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26633:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"26642:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26629:3:17"},"nodeType":"YulFunctionCall","src":"26629:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"26654:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26625:3:17"},"nodeType":"YulFunctionCall","src":"26625:32:17"},"nodeType":"YulIf","src":"26622:119:17"},{"nodeType":"YulBlock","src":"26751:125:17","statements":[{"nodeType":"YulVariableDeclaration","src":"26766:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"26780:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"26770:6:17","type":""}]},{"nodeType":"YulAssignment","src":"26795:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26838:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"26849:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26834:3:17"},"nodeType":"YulFunctionCall","src":"26834:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"26858:7:17"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"26805:28:17"},"nodeType":"YulFunctionCall","src":"26805:61:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"26795:6:17"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26582:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26593:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26605:6:17","type":""}],"src":"26538:345:17"},{"body":{"nodeType":"YulBlock","src":"26932:190:17","statements":[{"nodeType":"YulAssignment","src":"26942:33:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26969:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26951:17:17"},"nodeType":"YulFunctionCall","src":"26951:24:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26942:5:17"}]},{"body":{"nodeType":"YulBlock","src":"27065:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27067:16:17"},"nodeType":"YulFunctionCall","src":"27067:18:17"},"nodeType":"YulExpressionStatement","src":"27067:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26990:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"26997:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26987:2:17"},"nodeType":"YulFunctionCall","src":"26987:77:17"},"nodeType":"YulIf","src":"26984:103:17"},{"nodeType":"YulAssignment","src":"27096:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27107:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"27114:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27103:3:17"},"nodeType":"YulFunctionCall","src":"27103:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27096:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26918:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26928:3:17","type":""}],"src":"26889:233:17"},{"body":{"nodeType":"YulBlock","src":"27254:206:17","statements":[{"nodeType":"YulAssignment","src":"27264:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27276:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27287:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27272:3:17"},"nodeType":"YulFunctionCall","src":"27272:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27264:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27344:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27357:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27368:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27353:3:17"},"nodeType":"YulFunctionCall","src":"27353:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27300:43:17"},"nodeType":"YulFunctionCall","src":"27300:71:17"},"nodeType":"YulExpressionStatement","src":"27300:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27425:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27438:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27449:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27434:3:17"},"nodeType":"YulFunctionCall","src":"27434:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27381:43:17"},"nodeType":"YulFunctionCall","src":"27381:72:17"},"nodeType":"YulExpressionStatement","src":"27381:72:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27218:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27230:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27238:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27249:4:17","type":""}],"src":"27128:332:17"},{"body":{"nodeType":"YulBlock","src":"27514:362:17","statements":[{"nodeType":"YulAssignment","src":"27524:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27547:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27529:17:17"},"nodeType":"YulFunctionCall","src":"27529:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"27524:1:17"}]},{"nodeType":"YulAssignment","src":"27558:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27581:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27563:17:17"},"nodeType":"YulFunctionCall","src":"27563:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"27558:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"27592:28:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27615:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"27618:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"27611:3:17"},"nodeType":"YulFunctionCall","src":"27611:9:17"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"27596:11:17","type":""}]},{"nodeType":"YulAssignment","src":"27629:41:17","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"27658:11:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"27640:17:17"},"nodeType":"YulFunctionCall","src":"27640:30:17"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"27629:7:17"}]},{"body":{"nodeType":"YulBlock","src":"27847:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27849:16:17"},"nodeType":"YulFunctionCall","src":"27849:18:17"},"nodeType":"YulExpressionStatement","src":"27849:18:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27780:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27773:6:17"},"nodeType":"YulFunctionCall","src":"27773:9:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"27803:1:17"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"27810:7:17"},{"name":"x","nodeType":"YulIdentifier","src":"27819:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"27806:3:17"},"nodeType":"YulFunctionCall","src":"27806:15:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"27800:2:17"},"nodeType":"YulFunctionCall","src":"27800:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"27753:2:17"},"nodeType":"YulFunctionCall","src":"27753:83:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"27733:6:17"},"nodeType":"YulFunctionCall","src":"27733:113:17"},"nodeType":"YulIf","src":"27730:139:17"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"27497:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"27500:1:17","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"27506:7:17","type":""}],"src":"27466:410:17"},{"body":{"nodeType":"YulBlock","src":"27910:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27927:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27930:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27920:6:17"},"nodeType":"YulFunctionCall","src":"27920:88:17"},"nodeType":"YulExpressionStatement","src":"27920:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28024:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28027:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28017:6:17"},"nodeType":"YulFunctionCall","src":"28017:15:17"},"nodeType":"YulExpressionStatement","src":"28017:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28048:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28051:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28041:6:17"},"nodeType":"YulFunctionCall","src":"28041:15:17"},"nodeType":"YulExpressionStatement","src":"28041:15:17"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"27882:180:17"},{"body":{"nodeType":"YulBlock","src":"28110:143:17","statements":[{"nodeType":"YulAssignment","src":"28120:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28143:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28125:17:17"},"nodeType":"YulFunctionCall","src":"28125:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28120:1:17"}]},{"nodeType":"YulAssignment","src":"28154:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28177:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28159:17:17"},"nodeType":"YulFunctionCall","src":"28159:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28154:1:17"}]},{"body":{"nodeType":"YulBlock","src":"28201:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"28203:16:17"},"nodeType":"YulFunctionCall","src":"28203:18:17"},"nodeType":"YulExpressionStatement","src":"28203:18:17"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28198:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28191:6:17"},"nodeType":"YulFunctionCall","src":"28191:9:17"},"nodeType":"YulIf","src":"28188:35:17"},{"nodeType":"YulAssignment","src":"28233:14:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28242:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"28245:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28238:3:17"},"nodeType":"YulFunctionCall","src":"28238:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"28233:1:17"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28099:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"28102:1:17","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"28108:1:17","type":""}],"src":"28068:185:17"},{"body":{"nodeType":"YulBlock","src":"28304:149:17","statements":[{"nodeType":"YulAssignment","src":"28314:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28337:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28319:17:17"},"nodeType":"YulFunctionCall","src":"28319:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28314:1:17"}]},{"nodeType":"YulAssignment","src":"28348:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28371:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28353:17:17"},"nodeType":"YulFunctionCall","src":"28353:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28348:1:17"}]},{"nodeType":"YulAssignment","src":"28382:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28394:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"28397:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28390:3:17"},"nodeType":"YulFunctionCall","src":"28390:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"28382:4:17"}]},{"body":{"nodeType":"YulBlock","src":"28424:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28426:16:17"},"nodeType":"YulFunctionCall","src":"28426:18:17"},"nodeType":"YulExpressionStatement","src":"28426:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"28415:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"28421:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28412:2:17"},"nodeType":"YulFunctionCall","src":"28412:11:17"},"nodeType":"YulIf","src":"28409:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28290:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"28293:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"28299:4:17","type":""}],"src":"28259:194:17"},{"body":{"nodeType":"YulBlock","src":"28491:28:17","statements":[{"nodeType":"YulAssignment","src":"28501:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"28508:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28501:3:17"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28477:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28487:3:17","type":""}],"src":"28459:60:17"},{"body":{"nodeType":"YulBlock","src":"28584:81:17","statements":[{"nodeType":"YulAssignment","src":"28594:65:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28651:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28634:16:17"},"nodeType":"YulFunctionCall","src":"28634:23:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"28625:8:17"},"nodeType":"YulFunctionCall","src":"28625:33:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28607:17:17"},"nodeType":"YulFunctionCall","src":"28607:52:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"28594:9:17"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28564:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"28574:9:17","type":""}],"src":"28525:140:17"},{"body":{"nodeType":"YulBlock","src":"28735:65:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28752:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28787:5:17"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"28757:29:17"},"nodeType":"YulFunctionCall","src":"28757:36:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28745:6:17"},"nodeType":"YulFunctionCall","src":"28745:49:17"},"nodeType":"YulExpressionStatement","src":"28745:49:17"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28723:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28730:3:17","type":""}],"src":"28671:129:17"},{"body":{"nodeType":"YulBlock","src":"28870:82:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28893:3:17"},{"name":"src","nodeType":"YulIdentifier","src":"28898:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"28903:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"28880:12:17"},"nodeType":"YulFunctionCall","src":"28880:30:17"},"nodeType":"YulExpressionStatement","src":"28880:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"28930:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"28935:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28926:3:17"},"nodeType":"YulFunctionCall","src":"28926:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"28944:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28919:6:17"},"nodeType":"YulFunctionCall","src":"28919:27:17"},"nodeType":"YulExpressionStatement","src":"28919:27:17"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"28852:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"28857:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"28862:6:17","type":""}],"src":"28806:146:17"},{"body":{"nodeType":"YulBlock","src":"29084:215:17","statements":[{"nodeType":"YulAssignment","src":"29094:78:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29160:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29165:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29101:58:17"},"nodeType":"YulFunctionCall","src":"29101:71:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29094:3:17"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"29219:5:17"},{"name":"pos","nodeType":"YulIdentifier","src":"29226:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29231:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"29182:36:17"},"nodeType":"YulFunctionCall","src":"29182:56:17"},"nodeType":"YulExpressionStatement","src":"29182:56:17"},{"nodeType":"YulAssignment","src":"29247:46:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29258:3:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"29285:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"29263:21:17"},"nodeType":"YulFunctionCall","src":"29263:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29254:3:17"},"nodeType":"YulFunctionCall","src":"29254:39:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29247:3:17"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"29057:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"29064:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29072:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29080:3:17","type":""}],"src":"28982:317:17"},{"body":{"nodeType":"YulBlock","src":"29544:534:17","statements":[{"nodeType":"YulAssignment","src":"29554:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29566:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29577:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29562:3:17"},"nodeType":"YulFunctionCall","src":"29562:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29554:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29635:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29648:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29659:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29644:3:17"},"nodeType":"YulFunctionCall","src":"29644:17:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29591:43:17"},"nodeType":"YulFunctionCall","src":"29591:71:17"},"nodeType":"YulExpressionStatement","src":"29591:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29715:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29728:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29739:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29724:3:17"},"nodeType":"YulFunctionCall","src":"29724:18:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29672:42:17"},"nodeType":"YulFunctionCall","src":"29672:71:17"},"nodeType":"YulExpressionStatement","src":"29672:71:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29797:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29810:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29821:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29806:3:17"},"nodeType":"YulFunctionCall","src":"29806:18:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29753:43:17"},"nodeType":"YulFunctionCall","src":"29753:72:17"},"nodeType":"YulExpressionStatement","src":"29753:72:17"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29879:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29892:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29903:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29888:3:17"},"nodeType":"YulFunctionCall","src":"29888:18:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29835:43:17"},"nodeType":"YulFunctionCall","src":"29835:72:17"},"nodeType":"YulExpressionStatement","src":"29835:72:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29928:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29939:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29924:3:17"},"nodeType":"YulFunctionCall","src":"29924:19:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29949:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"29955:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29945:3:17"},"nodeType":"YulFunctionCall","src":"29945:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29917:6:17"},"nodeType":"YulFunctionCall","src":"29917:49:17"},"nodeType":"YulExpressionStatement","src":"29917:49:17"},{"nodeType":"YulAssignment","src":"29975:96:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"30049:6:17"},{"name":"value5","nodeType":"YulIdentifier","src":"30057:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"30066:4:17"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29983:65:17"},"nodeType":"YulFunctionCall","src":"29983:88:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29975:4:17"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29476:9:17","type":""},{"name":"value5","nodeType":"YulTypedName","src":"29488:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29496:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29504:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29512:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29520:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29528:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29539:4:17","type":""}],"src":"29305:773:17"},{"body":{"nodeType":"YulBlock","src":"30112:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30129:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30132:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30122:6:17"},"nodeType":"YulFunctionCall","src":"30122:88:17"},"nodeType":"YulExpressionStatement","src":"30122:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30226:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"30229:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30219:6:17"},"nodeType":"YulFunctionCall","src":"30219:15:17"},"nodeType":"YulExpressionStatement","src":"30219:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30250:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30253:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30243:6:17"},"nodeType":"YulFunctionCall","src":"30243:15:17"},"nodeType":"YulExpressionStatement","src":"30243:15:17"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"30084:180:17"},{"body":{"nodeType":"YulBlock","src":"30321:269:17","statements":[{"nodeType":"YulAssignment","src":"30331:22:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30345:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"30351:1:17","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30341:3:17"},"nodeType":"YulFunctionCall","src":"30341:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"30331:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"30362:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30392:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"30398:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30388:3:17"},"nodeType":"YulFunctionCall","src":"30388:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"30366:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"30439:51:17","statements":[{"nodeType":"YulAssignment","src":"30453:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"30467:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"30475:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30463:3:17"},"nodeType":"YulFunctionCall","src":"30463:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"30453:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"30419:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30412:6:17"},"nodeType":"YulFunctionCall","src":"30412:26:17"},"nodeType":"YulIf","src":"30409:81:17"},{"body":{"nodeType":"YulBlock","src":"30542:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"30556:16:17"},"nodeType":"YulFunctionCall","src":"30556:18:17"},"nodeType":"YulExpressionStatement","src":"30556:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"30506:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"30529:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"30537:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30526:2:17"},"nodeType":"YulFunctionCall","src":"30526:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"30503:2:17"},"nodeType":"YulFunctionCall","src":"30503:38:17"},"nodeType":"YulIf","src":"30500:84:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"30305:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"30314:6:17","type":""}],"src":"30270:320:17"},{"body":{"nodeType":"YulBlock","src":"30702:66:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30724:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"30732:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30720:3:17"},"nodeType":"YulFunctionCall","src":"30720:14:17"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"30736:24:17","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30713:6:17"},"nodeType":"YulFunctionCall","src":"30713:48:17"},"nodeType":"YulExpressionStatement","src":"30713:48:17"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30694:6:17","type":""}],"src":"30596:172:17"},{"body":{"nodeType":"YulBlock","src":"30920:220:17","statements":[{"nodeType":"YulAssignment","src":"30930:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30996:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"31001:2:17","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30937:58:17"},"nodeType":"YulFunctionCall","src":"30937:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30930:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31102:3:17"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"31013:88:17"},"nodeType":"YulFunctionCall","src":"31013:93:17"},"nodeType":"YulExpressionStatement","src":"31013:93:17"},{"nodeType":"YulAssignment","src":"31115:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31126:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"31131:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31122:3:17"},"nodeType":"YulFunctionCall","src":"31122:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31115:3:17"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30908:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30916:3:17","type":""}],"src":"30774:366:17"},{"body":{"nodeType":"YulBlock","src":"31317:248:17","statements":[{"nodeType":"YulAssignment","src":"31327:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31339:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31350:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31335:3:17"},"nodeType":"YulFunctionCall","src":"31335:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31327:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31374:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31385:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31370:3:17"},"nodeType":"YulFunctionCall","src":"31370:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31393:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"31399:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31389:3:17"},"nodeType":"YulFunctionCall","src":"31389:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31363:6:17"},"nodeType":"YulFunctionCall","src":"31363:47:17"},"nodeType":"YulExpressionStatement","src":"31363:47:17"},{"nodeType":"YulAssignment","src":"31419:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31553:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31427:124:17"},"nodeType":"YulFunctionCall","src":"31427:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31419:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31297:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31312:4:17","type":""}],"src":"31146:419:17"},{"body":{"nodeType":"YulBlock","src":"31677:127:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31699:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"31707:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31695:3:17"},"nodeType":"YulFunctionCall","src":"31695:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"31711:34:17","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31688:6:17"},"nodeType":"YulFunctionCall","src":"31688:58:17"},"nodeType":"YulExpressionStatement","src":"31688:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31767:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"31775:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31763:3:17"},"nodeType":"YulFunctionCall","src":"31763:15:17"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"31780:16:17","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31756:6:17"},"nodeType":"YulFunctionCall","src":"31756:41:17"},"nodeType":"YulExpressionStatement","src":"31756:41:17"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31669:6:17","type":""}],"src":"31571:233:17"},{"body":{"nodeType":"YulBlock","src":"31956:220:17","statements":[{"nodeType":"YulAssignment","src":"31966:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32032:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"32037:2:17","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31973:58:17"},"nodeType":"YulFunctionCall","src":"31973:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31966:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32138:3:17"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"32049:88:17"},"nodeType":"YulFunctionCall","src":"32049:93:17"},"nodeType":"YulExpressionStatement","src":"32049:93:17"},{"nodeType":"YulAssignment","src":"32151:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32162:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"32167:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32158:3:17"},"nodeType":"YulFunctionCall","src":"32158:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32151:3:17"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31944:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31952:3:17","type":""}],"src":"31810:366:17"},{"body":{"nodeType":"YulBlock","src":"32353:248:17","statements":[{"nodeType":"YulAssignment","src":"32363:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32375:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"32386:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32371:3:17"},"nodeType":"YulFunctionCall","src":"32371:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32363:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32410:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"32421:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32406:3:17"},"nodeType":"YulFunctionCall","src":"32406:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32429:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"32435:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32425:3:17"},"nodeType":"YulFunctionCall","src":"32425:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32399:6:17"},"nodeType":"YulFunctionCall","src":"32399:47:17"},"nodeType":"YulExpressionStatement","src":"32399:47:17"},{"nodeType":"YulAssignment","src":"32455:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32589:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32463:124:17"},"nodeType":"YulFunctionCall","src":"32463:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32455:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32333:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32348:4:17","type":""}],"src":"32182:419:17"},{"body":{"nodeType":"YulBlock","src":"32660:32:17","statements":[{"nodeType":"YulAssignment","src":"32670:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"32681:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"32670:7:17"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32642:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"32652:7:17","type":""}],"src":"32607:85:17"},{"body":{"nodeType":"YulBlock","src":"32741:43:17","statements":[{"nodeType":"YulAssignment","src":"32751:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32766:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"32773:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32762:3:17"},"nodeType":"YulFunctionCall","src":"32762:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"32751:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32723:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"32733:7:17","type":""}],"src":"32698:86:17"},{"body":{"nodeType":"YulBlock","src":"32856:88:17","statements":[{"nodeType":"YulAssignment","src":"32866:72:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32930:5:17"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"32904:25:17"},"nodeType":"YulFunctionCall","src":"32904:32:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"32895:8:17"},"nodeType":"YulFunctionCall","src":"32895:42:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"32879:15:17"},"nodeType":"YulFunctionCall","src":"32879:59:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"32866:9:17"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32836:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"32846:9:17","type":""}],"src":"32790:154:17"},{"body":{"nodeType":"YulBlock","src":"33021:72:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33038:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33080:5:17"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"33043:36:17"},"nodeType":"YulFunctionCall","src":"33043:43:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33031:6:17"},"nodeType":"YulFunctionCall","src":"33031:56:17"},"nodeType":"YulExpressionStatement","src":"33031:56:17"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33009:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33016:3:17","type":""}],"src":"32950:143:17"},{"body":{"nodeType":"YulBlock","src":"33203:130:17","statements":[{"nodeType":"YulAssignment","src":"33213:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33225:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"33236:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33221:3:17"},"nodeType":"YulFunctionCall","src":"33221:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33213:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33299:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33312:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"33323:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33308:3:17"},"nodeType":"YulFunctionCall","src":"33308:17:17"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"33249:49:17"},"nodeType":"YulFunctionCall","src":"33249:77:17"},"nodeType":"YulExpressionStatement","src":"33249:77:17"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33175:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33187:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33198:4:17","type":""}],"src":"33099:234:17"},{"body":{"nodeType":"YulBlock","src":"33435:122:17","statements":[{"nodeType":"YulAssignment","src":"33445:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33457:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"33468:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33453:3:17"},"nodeType":"YulFunctionCall","src":"33453:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33445:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33523:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33536:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"33547:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33532:3:17"},"nodeType":"YulFunctionCall","src":"33532:17:17"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"33481:41:17"},"nodeType":"YulFunctionCall","src":"33481:69:17"},"nodeType":"YulExpressionStatement","src":"33481:69:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33407:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33419:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33430:4:17","type":""}],"src":"33339:218:17"},{"body":{"nodeType":"YulBlock","src":"33669:58:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33691:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"33699:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33687:3:17"},"nodeType":"YulFunctionCall","src":"33687:14:17"},{"hexValue":"4f6e6c7941676772656761746f72","kind":"string","nodeType":"YulLiteral","src":"33703:16:17","type":"","value":"OnlyAggregator"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33680:6:17"},"nodeType":"YulFunctionCall","src":"33680:40:17"},"nodeType":"YulExpressionStatement","src":"33680:40:17"}]},"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33661:6:17","type":""}],"src":"33563:164:17"},{"body":{"nodeType":"YulBlock","src":"33879:220:17","statements":[{"nodeType":"YulAssignment","src":"33889:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33955:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"33960:2:17","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33896:58:17"},"nodeType":"YulFunctionCall","src":"33896:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33889:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34061:3:17"}],"functionName":{"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulIdentifier","src":"33972:88:17"},"nodeType":"YulFunctionCall","src":"33972:93:17"},"nodeType":"YulExpressionStatement","src":"33972:93:17"},{"nodeType":"YulAssignment","src":"34074:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34085:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"34090:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34081:3:17"},"nodeType":"YulFunctionCall","src":"34081:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34074:3:17"}]}]},"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33867:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33875:3:17","type":""}],"src":"33733:366:17"},{"body":{"nodeType":"YulBlock","src":"34276:248:17","statements":[{"nodeType":"YulAssignment","src":"34286:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34298:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"34309:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34294:3:17"},"nodeType":"YulFunctionCall","src":"34294:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34286:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34333:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"34344:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34329:3:17"},"nodeType":"YulFunctionCall","src":"34329:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34352:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"34358:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34348:3:17"},"nodeType":"YulFunctionCall","src":"34348:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34322:6:17"},"nodeType":"YulFunctionCall","src":"34322:47:17"},"nodeType":"YulExpressionStatement","src":"34322:47:17"},{"nodeType":"YulAssignment","src":"34378:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34512:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34386:124:17"},"nodeType":"YulFunctionCall","src":"34386:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34378:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34256:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34271:4:17","type":""}],"src":"34105:419:17"},{"body":{"nodeType":"YulBlock","src":"34636:58:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34658:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"34666:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34654:3:17"},"nodeType":"YulFunctionCall","src":"34654:14:17"},{"hexValue":"4f7264657246756c66696c6c6564","kind":"string","nodeType":"YulLiteral","src":"34670:16:17","type":"","value":"OrderFulfilled"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34647:6:17"},"nodeType":"YulFunctionCall","src":"34647:40:17"},"nodeType":"YulExpressionStatement","src":"34647:40:17"}]},"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34628:6:17","type":""}],"src":"34530:164:17"},{"body":{"nodeType":"YulBlock","src":"34846:220:17","statements":[{"nodeType":"YulAssignment","src":"34856:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34922:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"34927:2:17","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34863:58:17"},"nodeType":"YulFunctionCall","src":"34863:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34856:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35028:3:17"}],"functionName":{"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulIdentifier","src":"34939:88:17"},"nodeType":"YulFunctionCall","src":"34939:93:17"},"nodeType":"YulExpressionStatement","src":"34939:93:17"},{"nodeType":"YulAssignment","src":"35041:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35052:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"35057:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35048:3:17"},"nodeType":"YulFunctionCall","src":"35048:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35041:3:17"}]}]},"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34834:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34842:3:17","type":""}],"src":"34700:366:17"},{"body":{"nodeType":"YulBlock","src":"35243:248:17","statements":[{"nodeType":"YulAssignment","src":"35253:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35265:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"35276:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35261:3:17"},"nodeType":"YulFunctionCall","src":"35261:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35253:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35300:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"35311:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35296:3:17"},"nodeType":"YulFunctionCall","src":"35296:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35319:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"35325:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35315:3:17"},"nodeType":"YulFunctionCall","src":"35315:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35289:6:17"},"nodeType":"YulFunctionCall","src":"35289:47:17"},"nodeType":"YulExpressionStatement","src":"35289:47:17"},{"nodeType":"YulAssignment","src":"35345:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35479:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35353:124:17"},"nodeType":"YulFunctionCall","src":"35353:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35345:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35223:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35238:4:17","type":""}],"src":"35072:419:17"},{"body":{"nodeType":"YulBlock","src":"35541:172:17","statements":[{"nodeType":"YulAssignment","src":"35551:24:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35573:1:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"35556:16:17"},"nodeType":"YulFunctionCall","src":"35556:19:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"35551:1:17"}]},{"nodeType":"YulAssignment","src":"35584:24:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35606:1:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"35589:16:17"},"nodeType":"YulFunctionCall","src":"35589:19:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"35584:1:17"}]},{"nodeType":"YulAssignment","src":"35617:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35629:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"35632:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35625:3:17"},"nodeType":"YulFunctionCall","src":"35625:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"35617:4:17"}]},{"body":{"nodeType":"YulBlock","src":"35684:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"35686:16:17"},"nodeType":"YulFunctionCall","src":"35686:18:17"},"nodeType":"YulExpressionStatement","src":"35686:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"35650:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"35656:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35647:2:17"},"nodeType":"YulFunctionCall","src":"35647:36:17"},"nodeType":"YulIf","src":"35644:62:17"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"35527:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"35530:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"35536:4:17","type":""}],"src":"35497:216:17"},{"body":{"nodeType":"YulBlock","src":"35777:80:17","statements":[{"nodeType":"YulAssignment","src":"35787:64:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35843:5:17"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"35826:16:17"},"nodeType":"YulFunctionCall","src":"35826:23:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"35817:8:17"},"nodeType":"YulFunctionCall","src":"35817:33:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"35800:16:17"},"nodeType":"YulFunctionCall","src":"35800:51:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"35787:9:17"}]}]},"name":"convert_t_uint64_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35757:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"35767:9:17","type":""}],"src":"35719:138:17"},{"body":{"nodeType":"YulBlock","src":"35926:64:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35943:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35977:5:17"}],"functionName":{"name":"convert_t_uint64_to_t_uint96","nodeType":"YulIdentifier","src":"35948:28:17"},"nodeType":"YulFunctionCall","src":"35948:35:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35936:6:17"},"nodeType":"YulFunctionCall","src":"35936:48:17"},"nodeType":"YulExpressionStatement","src":"35936:48:17"}]},"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35914:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"35921:3:17","type":""}],"src":"35863:127:17"},{"body":{"nodeType":"YulBlock","src":"36148:286:17","statements":[{"nodeType":"YulAssignment","src":"36158:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36170:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36181:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36166:3:17"},"nodeType":"YulFunctionCall","src":"36166:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36158:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36238:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36251:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36262:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36247:3:17"},"nodeType":"YulFunctionCall","src":"36247:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"36194:43:17"},"nodeType":"YulFunctionCall","src":"36194:71:17"},"nodeType":"YulExpressionStatement","src":"36194:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36319:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36332:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36343:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36328:3:17"},"nodeType":"YulFunctionCall","src":"36328:18:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"36275:43:17"},"nodeType":"YulFunctionCall","src":"36275:72:17"},"nodeType":"YulExpressionStatement","src":"36275:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"36399:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36412:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36423:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36408:3:17"},"nodeType":"YulFunctionCall","src":"36408:18:17"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"36357:41:17"},"nodeType":"YulFunctionCall","src":"36357:70:17"},"nodeType":"YulExpressionStatement","src":"36357:70:17"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36104:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"36116:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36124:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36132:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36143:4:17","type":""}],"src":"35996:438:17"},{"body":{"nodeType":"YulBlock","src":"36588:282:17","statements":[{"nodeType":"YulAssignment","src":"36598:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36610:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36621:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36606:3:17"},"nodeType":"YulFunctionCall","src":"36606:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36598:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36678:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36691:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36702:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36687:3:17"},"nodeType":"YulFunctionCall","src":"36687:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"36634:43:17"},"nodeType":"YulFunctionCall","src":"36634:71:17"},"nodeType":"YulExpressionStatement","src":"36634:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36759:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36772:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36783:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36768:3:17"},"nodeType":"YulFunctionCall","src":"36768:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"36715:43:17"},"nodeType":"YulFunctionCall","src":"36715:72:17"},"nodeType":"YulExpressionStatement","src":"36715:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"36835:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36848:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36859:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36844:3:17"},"nodeType":"YulFunctionCall","src":"36844:18:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"36797:37:17"},"nodeType":"YulFunctionCall","src":"36797:66:17"},"nodeType":"YulExpressionStatement","src":"36797:66:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36544:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"36556:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36564:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36572:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36583:4:17","type":""}],"src":"36440:430:17"},{"body":{"nodeType":"YulBlock","src":"36941:31:17","statements":[{"nodeType":"YulAssignment","src":"36952:13:17","value":{"name":"len","nodeType":"YulIdentifier","src":"36962:3:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"36952:6:17"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36919:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"36926:3:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"36934:6:17","type":""}],"src":"36876:96:17"},{"body":{"nodeType":"YulBlock","src":"37031:87:17","statements":[{"nodeType":"YulAssignment","src":"37041:11:17","value":{"name":"ptr","nodeType":"YulIdentifier","src":"37049:3:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37041:4:17"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37069:1:17","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"37072:3:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37062:6:17"},"nodeType":"YulFunctionCall","src":"37062:14:17"},"nodeType":"YulExpressionStatement","src":"37062:14:17"},{"nodeType":"YulAssignment","src":"37085:26:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37103:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"37106:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"37093:9:17"},"nodeType":"YulFunctionCall","src":"37093:18:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"37085:4:17"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"37018:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"37026:4:17","type":""}],"src":"36978:140:17"},{"body":{"nodeType":"YulBlock","src":"37168:49:17","statements":[{"nodeType":"YulAssignment","src":"37178:33:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37196:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"37203:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37192:3:17"},"nodeType":"YulFunctionCall","src":"37192:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"37208:2:17","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"37188:3:17"},"nodeType":"YulFunctionCall","src":"37188:23:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37178:6:17"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37151:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"37161:6:17","type":""}],"src":"37124:93:17"},{"body":{"nodeType":"YulBlock","src":"37276:54:17","statements":[{"nodeType":"YulAssignment","src":"37286:37:17","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"37311:4:17"},{"name":"value","nodeType":"YulIdentifier","src":"37317:5:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"37307:3:17"},"nodeType":"YulFunctionCall","src":"37307:16:17"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"37286:8:17"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"37251:4:17","type":""},{"name":"value","nodeType":"YulTypedName","src":"37257:5:17","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"37267:8:17","type":""}],"src":"37223:107:17"},{"body":{"nodeType":"YulBlock","src":"37412:317:17","statements":[{"nodeType":"YulVariableDeclaration","src":"37422:35:17","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"37443:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"37455:1:17","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"37439:3:17"},"nodeType":"YulFunctionCall","src":"37439:18:17"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"37426:9:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"37466:109:17","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"37497:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"37508:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"37478:18:17"},"nodeType":"YulFunctionCall","src":"37478:97:17"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"37470:4:17","type":""}]},{"nodeType":"YulAssignment","src":"37584:51:17","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"37615:9:17"},{"name":"toInsert","nodeType":"YulIdentifier","src":"37626:8:17"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"37596:18:17"},"nodeType":"YulFunctionCall","src":"37596:39:17"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"37584:8:17"}]},{"nodeType":"YulAssignment","src":"37644:30:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37657:5:17"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"37668:4:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"37664:3:17"},"nodeType":"YulFunctionCall","src":"37664:9:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37653:3:17"},"nodeType":"YulFunctionCall","src":"37653:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"37644:5:17"}]},{"nodeType":"YulAssignment","src":"37683:40:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37696:5:17"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"37707:8:17"},{"name":"mask","nodeType":"YulIdentifier","src":"37717:4:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37703:3:17"},"nodeType":"YulFunctionCall","src":"37703:19:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"37693:2:17"},"nodeType":"YulFunctionCall","src":"37693:30:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"37683:6:17"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37373:5:17","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"37380:10:17","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"37392:8:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"37405:6:17","type":""}],"src":"37336:393:17"},{"body":{"nodeType":"YulBlock","src":"37795:82:17","statements":[{"nodeType":"YulAssignment","src":"37805:66:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37863:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"37845:17:17"},"nodeType":"YulFunctionCall","src":"37845:24:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"37836:8:17"},"nodeType":"YulFunctionCall","src":"37836:34:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"37818:17:17"},"nodeType":"YulFunctionCall","src":"37818:53:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"37805:9:17"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37775:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"37785:9:17","type":""}],"src":"37735:142:17"},{"body":{"nodeType":"YulBlock","src":"37930:28:17","statements":[{"nodeType":"YulAssignment","src":"37940:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"37947:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"37940:3:17"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37916:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"37926:3:17","type":""}],"src":"37883:75:17"},{"body":{"nodeType":"YulBlock","src":"38040:193:17","statements":[{"nodeType":"YulVariableDeclaration","src":"38050:63:17","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"38105:7:17"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"38074:30:17"},"nodeType":"YulFunctionCall","src":"38074:39:17"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"38054:16:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38129:4:17"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38169:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"38163:5:17"},"nodeType":"YulFunctionCall","src":"38163:11:17"},{"name":"offset","nodeType":"YulIdentifier","src":"38176:6:17"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"38208:16:17"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"38184:23:17"},"nodeType":"YulFunctionCall","src":"38184:41:17"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"38135:27:17"},"nodeType":"YulFunctionCall","src":"38135:91:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"38122:6:17"},"nodeType":"YulFunctionCall","src":"38122:105:17"},"nodeType":"YulExpressionStatement","src":"38122:105:17"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"38017:4:17","type":""},{"name":"offset","nodeType":"YulTypedName","src":"38023:6:17","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"38031:7:17","type":""}],"src":"37964:269:17"},{"body":{"nodeType":"YulBlock","src":"38288:24:17","statements":[{"nodeType":"YulAssignment","src":"38298:8:17","value":{"kind":"number","nodeType":"YulLiteral","src":"38305:1:17","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"38298:3:17"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"38284:3:17","type":""}],"src":"38239:73:17"},{"body":{"nodeType":"YulBlock","src":"38371:136:17","statements":[{"nodeType":"YulVariableDeclaration","src":"38381:46:17","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"38395:30:17"},"nodeType":"YulFunctionCall","src":"38395:32:17"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"38385:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"38480:4:17"},{"name":"offset","nodeType":"YulIdentifier","src":"38486:6:17"},{"name":"zero_0","nodeType":"YulIdentifier","src":"38494:6:17"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"38436:43:17"},"nodeType":"YulFunctionCall","src":"38436:65:17"},"nodeType":"YulExpressionStatement","src":"38436:65:17"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"38357:4:17","type":""},{"name":"offset","nodeType":"YulTypedName","src":"38363:6:17","type":""}],"src":"38318:189:17"},{"body":{"nodeType":"YulBlock","src":"38563:136:17","statements":[{"body":{"nodeType":"YulBlock","src":"38630:63:17","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38674:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"38681:1:17","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"38644:29:17"},"nodeType":"YulFunctionCall","src":"38644:39:17"},"nodeType":"YulExpressionStatement","src":"38644:39:17"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38583:5:17"},{"name":"end","nodeType":"YulIdentifier","src":"38590:3:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38580:2:17"},"nodeType":"YulFunctionCall","src":"38580:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"38595:26:17","statements":[{"nodeType":"YulAssignment","src":"38597:22:17","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"38610:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"38617:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38606:3:17"},"nodeType":"YulFunctionCall","src":"38606:13:17"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"38597:5:17"}]}]},"pre":{"nodeType":"YulBlock","src":"38577:2:17","statements":[]},"src":"38573:120:17"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"38551:5:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"38558:3:17","type":""}],"src":"38513:186:17"},{"body":{"nodeType":"YulBlock","src":"38783:463:17","statements":[{"body":{"nodeType":"YulBlock","src":"38809:430:17","statements":[{"nodeType":"YulVariableDeclaration","src":"38823:53:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"38870:5:17"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"38839:30:17"},"nodeType":"YulFunctionCall","src":"38839:37:17"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"38827:8:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"38889:63:17","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"38912:8:17"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"38940:10:17"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"38922:17:17"},"nodeType":"YulFunctionCall","src":"38922:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38908:3:17"},"nodeType":"YulFunctionCall","src":"38908:44:17"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"38893:11:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"39109:27:17","statements":[{"nodeType":"YulAssignment","src":"39111:23:17","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"39126:8:17"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"39111:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"39093:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"39105:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"39090:2:17"},"nodeType":"YulFunctionCall","src":"39090:18:17"},"nodeType":"YulIf","src":"39087:49:17"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"39178:11:17"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"39195:8:17"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"39223:3:17"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"39205:17:17"},"nodeType":"YulFunctionCall","src":"39205:22:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39191:3:17"},"nodeType":"YulFunctionCall","src":"39191:37:17"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"39149:28:17"},"nodeType":"YulFunctionCall","src":"39149:80:17"},"nodeType":"YulExpressionStatement","src":"39149:80:17"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"38800:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"38805:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"38797:2:17"},"nodeType":"YulFunctionCall","src":"38797:11:17"},"nodeType":"YulIf","src":"38794:445:17"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"38759:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"38766:3:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"38771:10:17","type":""}],"src":"38705:541:17"},{"body":{"nodeType":"YulBlock","src":"39315:54:17","statements":[{"nodeType":"YulAssignment","src":"39325:37:17","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"39350:4:17"},{"name":"value","nodeType":"YulIdentifier","src":"39356:5:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"39346:3:17"},"nodeType":"YulFunctionCall","src":"39346:16:17"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"39325:8:17"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"39290:4:17","type":""},{"name":"value","nodeType":"YulTypedName","src":"39296:5:17","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"39306:8:17","type":""}],"src":"39252:117:17"},{"body":{"nodeType":"YulBlock","src":"39426:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"39436:68:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39485:1:17","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"39488:5:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"39481:3:17"},"nodeType":"YulFunctionCall","src":"39481:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39500:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"39496:3:17"},"nodeType":"YulFunctionCall","src":"39496:6:17"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"39452:28:17"},"nodeType":"YulFunctionCall","src":"39452:51:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"39448:3:17"},"nodeType":"YulFunctionCall","src":"39448:56:17"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"39440:4:17","type":""}]},{"nodeType":"YulAssignment","src":"39513:25:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39527:4:17"},{"name":"mask","nodeType":"YulIdentifier","src":"39533:4:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"39523:3:17"},"nodeType":"YulFunctionCall","src":"39523:15:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"39513:6:17"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"39403:4:17","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"39409:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"39419:6:17","type":""}],"src":"39375:169:17"},{"body":{"nodeType":"YulBlock","src":"39630:214:17","statements":[{"nodeType":"YulAssignment","src":"39763:37:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39790:4:17"},{"name":"len","nodeType":"YulIdentifier","src":"39796:3:17"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"39771:18:17"},"nodeType":"YulFunctionCall","src":"39771:29:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"39763:4:17"}]},{"nodeType":"YulAssignment","src":"39809:29:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"39820:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39830:1:17","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"39833:3:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"39826:3:17"},"nodeType":"YulFunctionCall","src":"39826:11:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"39817:2:17"},"nodeType":"YulFunctionCall","src":"39817:21:17"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"39809:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"39611:4:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"39617:3:17","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"39625:4:17","type":""}],"src":"39549:295:17"},{"body":{"nodeType":"YulBlock","src":"39946:1301:17","statements":[{"nodeType":"YulVariableDeclaration","src":"39957:57:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40005:3:17"},{"name":"len","nodeType":"YulIdentifier","src":"40010:3:17"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"39971:33:17"},"nodeType":"YulFunctionCall","src":"39971:43:17"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"39961:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"40099:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"40101:16:17"},"nodeType":"YulFunctionCall","src":"40101:18:17"},"nodeType":"YulExpressionStatement","src":"40101:18:17"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40071:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"40079:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"40068:2:17"},"nodeType":"YulFunctionCall","src":"40068:30:17"},"nodeType":"YulIf","src":"40065:56:17"},{"nodeType":"YulVariableDeclaration","src":"40131:52:17","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40177:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"40171:5:17"},"nodeType":"YulFunctionCall","src":"40171:11:17"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"40145:25:17"},"nodeType":"YulFunctionCall","src":"40145:38:17"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"40135:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40275:4:17"},{"name":"oldLen","nodeType":"YulIdentifier","src":"40281:6:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"40289:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"40230:44:17"},"nodeType":"YulFunctionCall","src":"40230:66:17"},"nodeType":"YulExpressionStatement","src":"40230:66:17"},{"nodeType":"YulVariableDeclaration","src":"40306:18:17","value":{"kind":"number","nodeType":"YulLiteral","src":"40323:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"40310:9:17","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"40371:624:17","statements":[{"nodeType":"YulVariableDeclaration","src":"40385:37:17","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40404:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40416:4:17","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"40412:3:17"},"nodeType":"YulFunctionCall","src":"40412:9:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40400:3:17"},"nodeType":"YulFunctionCall","src":"40400:22:17"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"40389:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"40436:50:17","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40481:4:17"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"40450:30:17"},"nodeType":"YulFunctionCall","src":"40450:36:17"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"40440:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"40499:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"40508:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"40503:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"40567:170:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40592:6:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40617:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"40622:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40613:3:17"},"nodeType":"YulFunctionCall","src":"40613:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"40600:12:17"},"nodeType":"YulFunctionCall","src":"40600:33:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40585:6:17"},"nodeType":"YulFunctionCall","src":"40585:49:17"},"nodeType":"YulExpressionStatement","src":"40585:49:17"},{"nodeType":"YulAssignment","src":"40651:24:17","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40665:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"40673:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40661:3:17"},"nodeType":"YulFunctionCall","src":"40661:14:17"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40651:6:17"}]},{"nodeType":"YulAssignment","src":"40692:31:17","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"40709:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"40720:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40705:3:17"},"nodeType":"YulFunctionCall","src":"40705:18:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"40692:9:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"40533:1:17"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"40536:7:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40530:2:17"},"nodeType":"YulFunctionCall","src":"40530:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"40545:21:17","statements":[{"nodeType":"YulAssignment","src":"40547:17:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"40556:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"40559:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40552:3:17"},"nodeType":"YulFunctionCall","src":"40552:12:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"40547:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"40526:3:17","statements":[]},"src":"40522:215:17"},{"body":{"nodeType":"YulBlock","src":"40773:163:17","statements":[{"nodeType":"YulVariableDeclaration","src":"40791:50:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40825:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"40830:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40821:3:17"},"nodeType":"YulFunctionCall","src":"40821:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"40808:12:17"},"nodeType":"YulFunctionCall","src":"40808:33:17"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"40795:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"40865:6:17"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"40892:9:17"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40907:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"40915:4:17","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40903:3:17"},"nodeType":"YulFunctionCall","src":"40903:17:17"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"40873:18:17"},"nodeType":"YulFunctionCall","src":"40873:48:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40858:6:17"},"nodeType":"YulFunctionCall","src":"40858:64:17"},"nodeType":"YulExpressionStatement","src":"40858:64:17"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"40756:7:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"40765:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40753:2:17"},"nodeType":"YulFunctionCall","src":"40753:19:17"},"nodeType":"YulIf","src":"40750:186:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"40956:4:17"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40970:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"40978:1:17","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"40966:3:17"},"nodeType":"YulFunctionCall","src":"40966:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"40982:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40962:3:17"},"nodeType":"YulFunctionCall","src":"40962:22:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"40949:6:17"},"nodeType":"YulFunctionCall","src":"40949:36:17"},"nodeType":"YulExpressionStatement","src":"40949:36:17"}]},"nodeType":"YulCase","src":"40364:631:17","value":{"kind":"number","nodeType":"YulLiteral","src":"40369:1:17","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"41012:229:17","statements":[{"nodeType":"YulVariableDeclaration","src":"41026:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"41039:1:17","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"41030:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"41063:74:17","statements":[{"nodeType":"YulAssignment","src":"41081:42:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"41107:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"41112:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41103:3:17"},"nodeType":"YulFunctionCall","src":"41103:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"41090:12:17"},"nodeType":"YulFunctionCall","src":"41090:33:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"41081:5:17"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"41056:6:17"},"nodeType":"YulIf","src":"41053:84:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41157:4:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41216:5:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"41223:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"41163:52:17"},"nodeType":"YulFunctionCall","src":"41163:67:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"41150:6:17"},"nodeType":"YulFunctionCall","src":"41150:81:17"},"nodeType":"YulExpressionStatement","src":"41150:81:17"}]},"nodeType":"YulCase","src":"41004:237:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"40344:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"40352:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"40341:2:17"},"nodeType":"YulFunctionCall","src":"40341:14:17"},"nodeType":"YulSwitch","src":"40334:907:17"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"39930:4:17","type":""},{"name":"src","nodeType":"YulTypedName","src":"39936:3:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"39941:3:17","type":""}],"src":"39849:1398:17"},{"body":{"nodeType":"YulBlock","src":"41375:214:17","statements":[{"nodeType":"YulAssignment","src":"41385:77:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41450:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"41455:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41392:57:17"},"nodeType":"YulFunctionCall","src":"41392:70:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41385:3:17"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"41509:5:17"},{"name":"pos","nodeType":"YulIdentifier","src":"41516:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"41521:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"41472:36:17"},"nodeType":"YulFunctionCall","src":"41472:56:17"},"nodeType":"YulExpressionStatement","src":"41472:56:17"},{"nodeType":"YulAssignment","src":"41537:46:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41548:3:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"41575:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"41553:21:17"},"nodeType":"YulFunctionCall","src":"41553:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41544:3:17"},"nodeType":"YulFunctionCall","src":"41544:39:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41537:3:17"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"41348:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"41355:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"41363:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41371:3:17","type":""}],"src":"41275:314:17"},{"body":{"nodeType":"YulBlock","src":"41721:203:17","statements":[{"nodeType":"YulAssignment","src":"41731:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41743:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"41754:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41739:3:17"},"nodeType":"YulFunctionCall","src":"41739:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41731:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41778:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"41789:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41774:3:17"},"nodeType":"YulFunctionCall","src":"41774:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41797:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"41803:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41793:3:17"},"nodeType":"YulFunctionCall","src":"41793:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41767:6:17"},"nodeType":"YulFunctionCall","src":"41767:47:17"},"nodeType":"YulExpressionStatement","src":"41767:47:17"},{"nodeType":"YulAssignment","src":"41823:94:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41895:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"41903:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"41912:4:17"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41831:63:17"},"nodeType":"YulFunctionCall","src":"41831:86:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41823:4:17"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41685:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41697:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41705:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41716:4:17","type":""}],"src":"41595:329:17"},{"body":{"nodeType":"YulBlock","src":"42056:206:17","statements":[{"nodeType":"YulAssignment","src":"42066:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42078:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"42089:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42074:3:17"},"nodeType":"YulFunctionCall","src":"42074:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42066:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"42146:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42159:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"42170:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42155:3:17"},"nodeType":"YulFunctionCall","src":"42155:17:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"42102:43:17"},"nodeType":"YulFunctionCall","src":"42102:71:17"},"nodeType":"YulExpressionStatement","src":"42102:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"42227:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42240:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"42251:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42236:3:17"},"nodeType":"YulFunctionCall","src":"42236:18:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"42183:43:17"},"nodeType":"YulFunctionCall","src":"42183:72:17"},"nodeType":"YulExpressionStatement","src":"42183:72:17"}]},"name":"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42020:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42032:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42040:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42051:4:17","type":""}],"src":"41930:332:17"},{"body":{"nodeType":"YulBlock","src":"42374:119:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42396:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"42404:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42392:3:17"},"nodeType":"YulFunctionCall","src":"42392:14:17"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"42408:34:17","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42385:6:17"},"nodeType":"YulFunctionCall","src":"42385:58:17"},"nodeType":"YulExpressionStatement","src":"42385:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42464:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"42472:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42460:3:17"},"nodeType":"YulFunctionCall","src":"42460:15:17"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"42477:8:17","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42453:6:17"},"nodeType":"YulFunctionCall","src":"42453:33:17"},"nodeType":"YulExpressionStatement","src":"42453:33:17"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42366:6:17","type":""}],"src":"42268:225:17"},{"body":{"nodeType":"YulBlock","src":"42645:220:17","statements":[{"nodeType":"YulAssignment","src":"42655:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42721:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"42726:2:17","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42662:58:17"},"nodeType":"YulFunctionCall","src":"42662:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42655:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42827:3:17"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"42738:88:17"},"nodeType":"YulFunctionCall","src":"42738:93:17"},"nodeType":"YulExpressionStatement","src":"42738:93:17"},{"nodeType":"YulAssignment","src":"42840:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42851:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"42856:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42847:3:17"},"nodeType":"YulFunctionCall","src":"42847:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42840:3:17"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42633:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42641:3:17","type":""}],"src":"42499:366:17"},{"body":{"nodeType":"YulBlock","src":"43042:248:17","statements":[{"nodeType":"YulAssignment","src":"43052:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43064:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"43075:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43060:3:17"},"nodeType":"YulFunctionCall","src":"43060:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43052:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43099:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"43110:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43095:3:17"},"nodeType":"YulFunctionCall","src":"43095:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43118:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"43124:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43114:3:17"},"nodeType":"YulFunctionCall","src":"43114:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43088:6:17"},"nodeType":"YulFunctionCall","src":"43088:47:17"},"nodeType":"YulExpressionStatement","src":"43088:47:17"},{"nodeType":"YulAssignment","src":"43144:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43278:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43152:124:17"},"nodeType":"YulFunctionCall","src":"43152:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43144:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43022:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43037:4:17","type":""}],"src":"42871:419:17"},{"body":{"nodeType":"YulBlock","src":"43402:60:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43424:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"43432:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43420:3:17"},"nodeType":"YulFunctionCall","src":"43420:14:17"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"43436:18:17","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43413:6:17"},"nodeType":"YulFunctionCall","src":"43413:42:17"},"nodeType":"YulExpressionStatement","src":"43413:42:17"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43394:6:17","type":""}],"src":"43296:166:17"},{"body":{"nodeType":"YulBlock","src":"43614:220:17","statements":[{"nodeType":"YulAssignment","src":"43624:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43690:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"43695:2:17","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43631:58:17"},"nodeType":"YulFunctionCall","src":"43631:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43624:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43796:3:17"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"43707:88:17"},"nodeType":"YulFunctionCall","src":"43707:93:17"},"nodeType":"YulExpressionStatement","src":"43707:93:17"},{"nodeType":"YulAssignment","src":"43809:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43820:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"43825:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43816:3:17"},"nodeType":"YulFunctionCall","src":"43816:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43809:3:17"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43602:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43610:3:17","type":""}],"src":"43468:366:17"},{"body":{"nodeType":"YulBlock","src":"44011:248:17","statements":[{"nodeType":"YulAssignment","src":"44021:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44033:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"44044:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44029:3:17"},"nodeType":"YulFunctionCall","src":"44029:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44021:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44068:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"44079:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44064:3:17"},"nodeType":"YulFunctionCall","src":"44064:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44087:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"44093:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44083:3:17"},"nodeType":"YulFunctionCall","src":"44083:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44057:6:17"},"nodeType":"YulFunctionCall","src":"44057:47:17"},"nodeType":"YulExpressionStatement","src":"44057:47:17"},{"nodeType":"YulAssignment","src":"44113:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44247:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44121:124:17"},"nodeType":"YulFunctionCall","src":"44121:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44113:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43991:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44006:4:17","type":""}],"src":"43840:419:17"},{"body":{"nodeType":"YulBlock","src":"44371:61:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44393:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"44401:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44389:3:17"},"nodeType":"YulFunctionCall","src":"44389:14:17"},{"hexValue":"546f6b656e4e6f74537570706f72746564","kind":"string","nodeType":"YulLiteral","src":"44405:19:17","type":"","value":"TokenNotSupported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44382:6:17"},"nodeType":"YulFunctionCall","src":"44382:43:17"},"nodeType":"YulExpressionStatement","src":"44382:43:17"}]},"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44363:6:17","type":""}],"src":"44265:167:17"},{"body":{"nodeType":"YulBlock","src":"44584:220:17","statements":[{"nodeType":"YulAssignment","src":"44594:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44660:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"44665:2:17","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44601:58:17"},"nodeType":"YulFunctionCall","src":"44601:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44594:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44766:3:17"}],"functionName":{"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulIdentifier","src":"44677:88:17"},"nodeType":"YulFunctionCall","src":"44677:93:17"},"nodeType":"YulExpressionStatement","src":"44677:93:17"},{"nodeType":"YulAssignment","src":"44779:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44790:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"44795:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44786:3:17"},"nodeType":"YulFunctionCall","src":"44786:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44779:3:17"}]}]},"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44572:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44580:3:17","type":""}],"src":"44438:366:17"},{"body":{"nodeType":"YulBlock","src":"44981:248:17","statements":[{"nodeType":"YulAssignment","src":"44991:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45003:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"45014:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44999:3:17"},"nodeType":"YulFunctionCall","src":"44999:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44991:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45038:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"45049:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45034:3:17"},"nodeType":"YulFunctionCall","src":"45034:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45057:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"45063:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45053:3:17"},"nodeType":"YulFunctionCall","src":"45053:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45027:6:17"},"nodeType":"YulFunctionCall","src":"45027:47:17"},"nodeType":"YulExpressionStatement","src":"45027:47:17"},{"nodeType":"YulAssignment","src":"45083:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45217:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45091:124:17"},"nodeType":"YulFunctionCall","src":"45091:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45083:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44961:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44976:4:17","type":""}],"src":"44810:419:17"},{"body":{"nodeType":"YulBlock","src":"45341:56:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45363:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"45371:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45359:3:17"},"nodeType":"YulFunctionCall","src":"45359:14:17"},{"hexValue":"416d6f756e7449735a65726f","kind":"string","nodeType":"YulLiteral","src":"45375:14:17","type":"","value":"AmountIsZero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45352:6:17"},"nodeType":"YulFunctionCall","src":"45352:38:17"},"nodeType":"YulExpressionStatement","src":"45352:38:17"}]},"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45333:6:17","type":""}],"src":"45235:162:17"},{"body":{"nodeType":"YulBlock","src":"45549:220:17","statements":[{"nodeType":"YulAssignment","src":"45559:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45625:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"45630:2:17","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45566:58:17"},"nodeType":"YulFunctionCall","src":"45566:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45559:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45731:3:17"}],"functionName":{"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulIdentifier","src":"45642:88:17"},"nodeType":"YulFunctionCall","src":"45642:93:17"},"nodeType":"YulExpressionStatement","src":"45642:93:17"},{"nodeType":"YulAssignment","src":"45744:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45755:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"45760:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45751:3:17"},"nodeType":"YulFunctionCall","src":"45751:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45744:3:17"}]}]},"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45537:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45545:3:17","type":""}],"src":"45403:366:17"},{"body":{"nodeType":"YulBlock","src":"45946:248:17","statements":[{"nodeType":"YulAssignment","src":"45956:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45968:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"45979:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45964:3:17"},"nodeType":"YulFunctionCall","src":"45964:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45956:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46003:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"46014:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45999:3:17"},"nodeType":"YulFunctionCall","src":"45999:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46022:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"46028:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46018:3:17"},"nodeType":"YulFunctionCall","src":"46018:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45992:6:17"},"nodeType":"YulFunctionCall","src":"45992:47:17"},"nodeType":"YulExpressionStatement","src":"45992:47:17"},{"nodeType":"YulAssignment","src":"46048:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46182:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46056:124:17"},"nodeType":"YulFunctionCall","src":"46056:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46048:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45926:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45941:4:17","type":""}],"src":"45775:419:17"},{"body":{"nodeType":"YulBlock","src":"46306:60:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46328:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"46336:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46324:3:17"},"nodeType":"YulFunctionCall","src":"46324:14:17"},{"hexValue":"5468726f775a65726f41646472657373","kind":"string","nodeType":"YulLiteral","src":"46340:18:17","type":"","value":"ThrowZeroAddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46317:6:17"},"nodeType":"YulFunctionCall","src":"46317:42:17"},"nodeType":"YulExpressionStatement","src":"46317:42:17"}]},"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46298:6:17","type":""}],"src":"46200:166:17"},{"body":{"nodeType":"YulBlock","src":"46518:220:17","statements":[{"nodeType":"YulAssignment","src":"46528:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46594:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"46599:2:17","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46535:58:17"},"nodeType":"YulFunctionCall","src":"46535:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46528:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46700:3:17"}],"functionName":{"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulIdentifier","src":"46611:88:17"},"nodeType":"YulFunctionCall","src":"46611:93:17"},"nodeType":"YulExpressionStatement","src":"46611:93:17"},{"nodeType":"YulAssignment","src":"46713:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46724:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"46729:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46720:3:17"},"nodeType":"YulFunctionCall","src":"46720:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46713:3:17"}]}]},"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46506:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46514:3:17","type":""}],"src":"46372:366:17"},{"body":{"nodeType":"YulBlock","src":"46915:248:17","statements":[{"nodeType":"YulAssignment","src":"46925:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46937:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"46948:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46933:3:17"},"nodeType":"YulFunctionCall","src":"46933:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46925:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46972:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"46983:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46968:3:17"},"nodeType":"YulFunctionCall","src":"46968:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46991:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"46997:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46987:3:17"},"nodeType":"YulFunctionCall","src":"46987:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46961:6:17"},"nodeType":"YulFunctionCall","src":"46961:47:17"},"nodeType":"YulExpressionStatement","src":"46961:47:17"},{"nodeType":"YulAssignment","src":"47017:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47151:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47025:124:17"},"nodeType":"YulFunctionCall","src":"47025:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47017:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46895:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46910:4:17","type":""}],"src":"46744:419:17"},{"body":{"nodeType":"YulBlock","src":"47275:66:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47297:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"47305:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47293:3:17"},"nodeType":"YulFunctionCall","src":"47293:14:17"},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","kind":"string","nodeType":"YulLiteral","src":"47309:24:17","type":"","value":"InvalidInstitutionCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47286:6:17"},"nodeType":"YulFunctionCall","src":"47286:48:17"},"nodeType":"YulExpressionStatement","src":"47286:48:17"}]},"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47267:6:17","type":""}],"src":"47169:172:17"},{"body":{"nodeType":"YulBlock","src":"47493:220:17","statements":[{"nodeType":"YulAssignment","src":"47503:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47569:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"47574:2:17","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47510:58:17"},"nodeType":"YulFunctionCall","src":"47510:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47503:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47675:3:17"}],"functionName":{"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulIdentifier","src":"47586:88:17"},"nodeType":"YulFunctionCall","src":"47586:93:17"},"nodeType":"YulExpressionStatement","src":"47586:93:17"},{"nodeType":"YulAssignment","src":"47688:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47699:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"47704:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47695:3:17"},"nodeType":"YulFunctionCall","src":"47695:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47688:3:17"}]}]},"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"47481:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"47489:3:17","type":""}],"src":"47347:366:17"},{"body":{"nodeType":"YulBlock","src":"47890:248:17","statements":[{"nodeType":"YulAssignment","src":"47900:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47912:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"47923:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47908:3:17"},"nodeType":"YulFunctionCall","src":"47908:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47900:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47947:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"47958:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47943:3:17"},"nodeType":"YulFunctionCall","src":"47943:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47966:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"47972:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47962:3:17"},"nodeType":"YulFunctionCall","src":"47962:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47936:6:17"},"nodeType":"YulFunctionCall","src":"47936:47:17"},"nodeType":"YulExpressionStatement","src":"47936:47:17"},{"nodeType":"YulAssignment","src":"47992:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48126:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48000:124:17"},"nodeType":"YulFunctionCall","src":"48000:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47992:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47870:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47885:4:17","type":""}],"src":"47719:419:17"},{"body":{"nodeType":"YulBlock","src":"48250:69:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48272:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"48280:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48268:3:17"},"nodeType":"YulFunctionCall","src":"48268:14:17"},{"hexValue":"496e76616c696453656e646572466565526563697069656e74","kind":"string","nodeType":"YulLiteral","src":"48284:27:17","type":"","value":"InvalidSenderFeeRecipient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48261:6:17"},"nodeType":"YulFunctionCall","src":"48261:51:17"},"nodeType":"YulExpressionStatement","src":"48261:51:17"}]},"name":"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"48242:6:17","type":""}],"src":"48144:175:17"},{"body":{"nodeType":"YulBlock","src":"48471:220:17","statements":[{"nodeType":"YulAssignment","src":"48481:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48547:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"48552:2:17","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48488:58:17"},"nodeType":"YulFunctionCall","src":"48488:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48481:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48653:3:17"}],"functionName":{"name":"store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","nodeType":"YulIdentifier","src":"48564:88:17"},"nodeType":"YulFunctionCall","src":"48564:93:17"},"nodeType":"YulExpressionStatement","src":"48564:93:17"},{"nodeType":"YulAssignment","src":"48666:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48677:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"48682:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48673:3:17"},"nodeType":"YulFunctionCall","src":"48673:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"48666:3:17"}]}]},"name":"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48459:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48467:3:17","type":""}],"src":"48325:366:17"},{"body":{"nodeType":"YulBlock","src":"48868:248:17","statements":[{"nodeType":"YulAssignment","src":"48878:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48890:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"48901:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48886:3:17"},"nodeType":"YulFunctionCall","src":"48886:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48878:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48925:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"48936:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48921:3:17"},"nodeType":"YulFunctionCall","src":"48921:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48944:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"48950:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48940:3:17"},"nodeType":"YulFunctionCall","src":"48940:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48914:6:17"},"nodeType":"YulFunctionCall","src":"48914:47:17"},"nodeType":"YulExpressionStatement","src":"48914:47:17"},{"nodeType":"YulAssignment","src":"48970:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49104:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48978:124:17"},"nodeType":"YulFunctionCall","src":"48978:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48970:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48848:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48863:4:17","type":""}],"src":"48697:419:17"},{"body":{"nodeType":"YulBlock","src":"49228:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"49250:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"49258:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49246:3:17"},"nodeType":"YulFunctionCall","src":"49246:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"49262:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49239:6:17"},"nodeType":"YulFunctionCall","src":"49239:58:17"},"nodeType":"YulExpressionStatement","src":"49239:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"49220:6:17","type":""}],"src":"49122:182:17"},{"body":{"nodeType":"YulBlock","src":"49456:220:17","statements":[{"nodeType":"YulAssignment","src":"49466:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49532:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"49537:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49473:58:17"},"nodeType":"YulFunctionCall","src":"49473:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"49466:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49638:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"49549:88:17"},"nodeType":"YulFunctionCall","src":"49549:93:17"},"nodeType":"YulExpressionStatement","src":"49549:93:17"},{"nodeType":"YulAssignment","src":"49651:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49662:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"49667:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49658:3:17"},"nodeType":"YulFunctionCall","src":"49658:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49651:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49444:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49452:3:17","type":""}],"src":"49310:366:17"},{"body":{"nodeType":"YulBlock","src":"49853:248:17","statements":[{"nodeType":"YulAssignment","src":"49863:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49875:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"49886:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49871:3:17"},"nodeType":"YulFunctionCall","src":"49871:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49863:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49910:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"49921:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49906:3:17"},"nodeType":"YulFunctionCall","src":"49906:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49929:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"49935:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49925:3:17"},"nodeType":"YulFunctionCall","src":"49925:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49899:6:17"},"nodeType":"YulFunctionCall","src":"49899:47:17"},"nodeType":"YulExpressionStatement","src":"49899:47:17"},{"nodeType":"YulAssignment","src":"49955:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50089:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49963:124:17"},"nodeType":"YulFunctionCall","src":"49963:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49955:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49833:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49848:4:17","type":""}],"src":"49682:419:17"},{"body":{"nodeType":"YulBlock","src":"50213:124:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50235:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"50243:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50231:3:17"},"nodeType":"YulFunctionCall","src":"50231:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"50247:34:17","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50224:6:17"},"nodeType":"YulFunctionCall","src":"50224:58:17"},"nodeType":"YulExpressionStatement","src":"50224:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50303:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"50311:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50299:3:17"},"nodeType":"YulFunctionCall","src":"50299:15:17"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"50316:13:17","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50292:6:17"},"nodeType":"YulFunctionCall","src":"50292:38:17"},"nodeType":"YulExpressionStatement","src":"50292:38:17"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"50205:6:17","type":""}],"src":"50107:230:17"},{"body":{"nodeType":"YulBlock","src":"50489:220:17","statements":[{"nodeType":"YulAssignment","src":"50499:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50565:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"50570:2:17","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50506:58:17"},"nodeType":"YulFunctionCall","src":"50506:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"50499:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50671:3:17"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"50582:88:17"},"nodeType":"YulFunctionCall","src":"50582:93:17"},"nodeType":"YulExpressionStatement","src":"50582:93:17"},{"nodeType":"YulAssignment","src":"50684:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50695:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"50700:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50691:3:17"},"nodeType":"YulFunctionCall","src":"50691:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"50684:3:17"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"50477:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"50485:3:17","type":""}],"src":"50343:366:17"},{"body":{"nodeType":"YulBlock","src":"50886:248:17","statements":[{"nodeType":"YulAssignment","src":"50896:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50908:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"50919:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50904:3:17"},"nodeType":"YulFunctionCall","src":"50904:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50896:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50943:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"50954:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50939:3:17"},"nodeType":"YulFunctionCall","src":"50939:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50962:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"50968:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50958:3:17"},"nodeType":"YulFunctionCall","src":"50958:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50932:6:17"},"nodeType":"YulFunctionCall","src":"50932:47:17"},"nodeType":"YulExpressionStatement","src":"50932:47:17"},{"nodeType":"YulAssignment","src":"50988:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51122:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50996:124:17"},"nodeType":"YulFunctionCall","src":"50996:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50988:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50866:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50881:4:17","type":""}],"src":"50715:419:17"},{"body":{"nodeType":"YulBlock","src":"51246:64:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51268:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"51276:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51264:3:17"},"nodeType":"YulFunctionCall","src":"51264:14:17"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"51280:22:17","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51257:6:17"},"nodeType":"YulFunctionCall","src":"51257:46:17"},"nodeType":"YulExpressionStatement","src":"51257:46:17"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"51238:6:17","type":""}],"src":"51140:170:17"},{"body":{"nodeType":"YulBlock","src":"51462:220:17","statements":[{"nodeType":"YulAssignment","src":"51472:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51538:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"51543:2:17","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51479:58:17"},"nodeType":"YulFunctionCall","src":"51479:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"51472:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51644:3:17"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"51555:88:17"},"nodeType":"YulFunctionCall","src":"51555:93:17"},"nodeType":"YulExpressionStatement","src":"51555:93:17"},{"nodeType":"YulAssignment","src":"51657:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51668:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"51673:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51664:3:17"},"nodeType":"YulFunctionCall","src":"51664:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"51657:3:17"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51450:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"51458:3:17","type":""}],"src":"51316:366:17"},{"body":{"nodeType":"YulBlock","src":"51859:248:17","statements":[{"nodeType":"YulAssignment","src":"51869:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51881:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"51892:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51877:3:17"},"nodeType":"YulFunctionCall","src":"51877:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51869:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51916:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"51927:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51912:3:17"},"nodeType":"YulFunctionCall","src":"51912:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51935:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"51941:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"51931:3:17"},"nodeType":"YulFunctionCall","src":"51931:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51905:6:17"},"nodeType":"YulFunctionCall","src":"51905:47:17"},"nodeType":"YulExpressionStatement","src":"51905:47:17"},{"nodeType":"YulAssignment","src":"51961:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"52095:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51969:124:17"},"nodeType":"YulFunctionCall","src":"51969:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51961:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51839:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51854:4:17","type":""}],"src":"51688:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct SharedStructs.Institution -> struct SharedStructs.Institution\n    function abi_encode_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct SharedStructs.Institution[] -> struct SharedStructs.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$4029_memory_ptr_to_t_struct$_Institution_$4029_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9 {\n        if slt(sub(dataEnd, headStart), 288) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value7 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 256))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value8, value9 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct SharedStructs.Institution\n    function abi_decode_t_struct$_Institution_$4029_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct SharedStructs.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4029_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct SharedStructs.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$3917_memory_ptr_to_t_struct$_Order_$3917_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0140)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // protocolFee\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x0100))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0120))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0120))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$3917_memory_ptr__to_t_struct$_Order_$3917_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 320)\n\n        abi_encode_t_struct$_Order_$3917_memory_ptr_to_t_struct$_Order_$3917_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_addresst_uint64(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    // struct SharedStructs.InstitutionByCode -> struct SharedStructs.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$4034_memory_ptr_to_t_struct$_InstitutionByCode_$4034_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$4034_memory_ptr__to_t_struct$_InstitutionByCode_$4034_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$4034_memory_ptr_to_t_struct$_InstitutionByCode_$4034_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidMessageHash\")\n\n    }\n\n    function abi_encode_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value4, value5,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(memPtr) {\n\n        mstore(add(memPtr, 0), \"OnlyAggregator\")\n\n    }\n\n    function abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(memPtr) {\n\n        mstore(add(memPtr, 0), \"OrderFulfilled\")\n\n    }\n\n    function abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function convert_t_uint64_to_t_uint96(value) -> converted {\n        converted := cleanup_t_uint96(identity(cleanup_t_uint64(value)))\n    }\n\n    function abi_encode_t_uint64_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, convert_t_uint64_to_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint96_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"TokenNotSupported\")\n\n    }\n\n    function abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"AmountIsZero\")\n\n    }\n\n    function abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(memPtr) {\n\n        mstore(add(memPtr, 0), \"ThrowZeroAddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidInstitutionCode\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidSenderFeeRecipient\")\n\n    }\n\n    function abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101375760003560e01c80638129fc1c116100b857806399e3c0b41161007c57806399e3c0b414610303578063b810c6361461031f578063c22801031461033e578063cb79455b1461036e578063d28a8d321461038a578063f2fde38b146103ba57610137565b80638129fc1c146102845780638456cb591461028e57806384630736146102985780638da5cb5b146102b45780639015dced146102d257610137565b80635c975abb116100ff5780635c975abb146101e0578063715018a6146101fe57806375151b6314610208578063768c6ec01461023857806379a0effb1461026857610137565b8063026213381461013c5780632654ec7e1461016c578063322008821461019c5780633ad59dbc146101b85780633f4ba83a146101d6575b600080fd5b61015660048036038101906101519190612569565b6103d6565b6040516101639190612683565b60405180910390f35b610186600480360381019061018191906127e2565b610514565b60405161019391906128dc565b60405180910390f35b6101b660048036038101906101b19190612a9b565b610a2d565b005b6101c0610b41565b6040516101cd9190612b76565b60405180910390f35b6101de610bd3565b005b6101e8610be5565b6040516101f59190612bb3565b60405180910390f35b610206610bfc565b005b610222600480360381019061021d9190612bce565b610c10565b60405161022f9190612bb3565b60405180910390f35b610252600480360381019061024d9190612569565b610c66565b60405161025f9190612d03565b60405180910390f35b610282600480360381019061027d9190612d1f565b610ea1565b005b61028c611047565b005b610296611197565b005b6102b260048036038101906102ad9190612d9f565b6111a9565b005b6102bc611214565b6040516102c99190612ddb565b60405180910390f35b6102ec60048036038101906102e79190612df6565b61123e565b6040516102fa929190612e71565b60405180910390f35b61031d60048036038101906103189190612ec6565b611652565b005b610327611788565b604051610335929190612f37565b60405180910390f35b61035860048036038101906103539190612569565b6117ad565b6040516103659190612f8f565b60405180910390f35b61038860048036038101906103839190613000565b6117ee565b005b6103a4600480360381019061039f919061304d565b611845565b6040516103b19190612bb3565b60405180910390f35b6103d460048036038101906103cf9190612bce565b611bde565b005b60606000609c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104535783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061040d565b50505050905060008151905060008167ffffffffffffffff81111561047b5761047a612908565b5b6040519080825280602002602001820160405280156104b457816020015b6104a1612416565b8152602001906001900390816104995790505b50905060005b82811015610508578381815181106104d5576104d46130a0565b5b60200260200101518282815181106104f0576104ef6130a0565b5b602002602001018190525080806001019150506104ba565b50809350505050919050565b600061051e611c61565b61052c8b8b8689898e611cab565b60008383905011610572576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105699061312c565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330888e61059c919061317b565b6040518463ffffffff1660e01b81526004016105ba939291906131af565b6020604051808303816000875af11580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906131fb565b5060d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061064e90613228565b91905055503360d160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016106a5929190613270565b6040516020818303038152906040528051906020012090506000606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168c6106ee9190613299565b6106f8919061330a565b90506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152602001828152602001896bffffffffffffffffffffffff1681526020016000151581526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff168152602001828d6107cb919061333b565b81525060d0600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060c082015181600501600c6101000a81548160ff02191690831515021790555060e08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101008201518160060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555061012082015181600701559050508160d06000848152602001908152602001600020600701548d73ffffffffffffffffffffffffffffffffffffffff167f94bed2b14a43efaec8c295ba3fbce0aa493e61643c3adb49774ca7df08d5a919848c8f8f8b8b604051610a16969594939291906133e6565b60405180910390a4509a9950505050505050505050565b610a35611ec5565b60008151905060005b81811015610b3b57609c6000858152602001908152602001600020838281518110610a6c57610a6b6130a0565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610ad157610ad06130a0565b5b602002602001015160200151815260200185815250609d6000858481518110610afd57610afc6130a0565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610a3e565b50505050565b606060688054610b5090613471565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90613471565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b5050505050905090565b610bdb611ec5565b610be3611f43565b565b6000609e60009054906101000a900460ff16905090565b610c04611ec5565b610c0e6000611fa6565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610c6e612436565b60d06000838152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160058201600c9054906101000a900460ff161515151581526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016007820154815250509050919050565b610ea9611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f906134ee565b60405180910390fd5b7f74726561737572790000000000000000000000000000000000000000000000008203610f815780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f72000000000000000000000000000000000000000000008203610fea5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161103b9190612ddb565b60405180910390a15050565b60008060019054906101000a900460ff161590508080156110785750600160008054906101000a900460ff1660ff16105b806110a557506110873061206c565b1580156110a45750600160008054906101000a900460ff1660ff16145b5b6110e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110db90613580565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611121576001600060016101000a81548160ff0219169083151502179055505b620186a060658190555061113361208f565b61113b6120e8565b80156111945760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161118b91906135e8565b60405180910390a15b50565b61119f611ec5565b6111a7612141565b565b6111b1611ec5565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e26446816040516112099190613603565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c89061366a565b60405180910390fd5b60d06000878152602001908152602001600020600501600c9054906101000a900460ff1615611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c906136d6565b60405180910390fd5b600060d0600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508367ffffffffffffffff1660d0600089815260200190815260200160002060060160148282829054906101000a90046bffffffffffffffffffffffff166113b791906136f6565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600060d0600089815260200190815260200160002060060160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361155957600160d06000898152602001908152602001600020600501600c6101000a81548160ff021916908315150217905550600060d0600089815260200190815260200160002060030154111561148157611480876121a4565b5b600060d06000898152602001908152602001600020600401541115611558578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660d060008b8152602001908152602001600020600401546040518363ffffffff1660e01b8152600401611513929190613270565b6020604051808303816000875af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906131fb565b505b5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660d060008b8152602001908152602001600020600701546040518363ffffffff1660e01b81526004016115aa929190613270565b6020604051808303816000875af11580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed91906131fb565b508473ffffffffffffffffffffffffffffffffffffffff16877fa9ec2b6676d3ea3e8da117193c71b1b85fcdbc72f077a624f950241eb38f13c28a898860405161163993929190613767565b60405180910390a3868192509250509550959350505050565b61165a611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c0906134ee565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036117485780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161177b9392919061379e565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b6117b56124ff565b609d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6117f6611ec5565b818160689182611807929190613982565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051611839929190613a7f565b60405180910390a15050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce9061366a565b60405180910390fd5b60d06000848152602001908152602001600020600501600c9054906101000a900460ff161561193b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611932906136d6565b60405180910390fd5b60008460d060008681526020019081526020016000206007015461195f919061333b565b905060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b81526004016119f4929190613270565b6020604051808303816000875af1158015611a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906131fb565b50600160d06000868152602001908152602001600020600501600c6101000a81548160ff021916908315150217905550600060d0600086815260200190815260200160002060060160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060d0600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60d0600087815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b54929190613270565b6020604051808303816000875af1158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9791906131fb565b50837f79252c381c5280f78c77f378791e42b506843a48916430480eab95a898cdae9f8685604051611bca929190613aa3565b60405180910390a260019150509392505050565b611be6611ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613b3e565b60405180910390fd5b611c5e81611fa6565b50565b611c69610be5565b15611ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca090613baa565b60405180910390fd5b565b609b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2e90613c16565b60405180910390fd5b60008511611d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7190613c82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de090613cee565b60405180910390fd5b6000801b609d60008381526020019081526020016000206000015403611e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3b90613d5a565b60405180910390fd5b6000821115611ebd57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ebc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb390613dc6565b60405180910390fd5b5b505050505050565b611ecd6122f8565b73ffffffffffffffffffffffffffffffffffffffff16611eeb611214565b73ffffffffffffffffffffffffffffffffffffffff1614611f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3890613e32565b60405180910390fd5b565b611f4b612300565b6000609e60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611f8f6122f8565b604051611f9c9190612ddb565b60405180910390a1565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166120de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d590613ec4565b60405180910390fd5b6120e6612349565b565b600060019054906101000a900460ff16612137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212e90613ec4565b60405180910390fd5b61213f6123aa565b565b612149611c61565b6001609e60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861218d6122f8565b60405161219a9190612ddb565b60405180910390a1565b600060d0600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060d0600084815260200190815260200160002060030154905060d0600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161226b929190613270565b6020604051808303816000875af115801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae91906131fb565b50808273ffffffffffffffffffffffffffffffffffffffff167f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c250160405160405180910390a3505050565b600033905090565b612308610be5565b612347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233e90613f30565b60405180910390fd5b565b600060019054906101000a900460ff16612398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238f90613ec4565b60405180910390fd5b6123a86123a36122f8565b611fa6565b565b600060019054906101000a900460ff166123f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f090613ec4565b60405180910390fd5b6000609e60006101000a81548160ff021916908315150217905550565b604051806040016040528060008019168152602001600080191681525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61254681612533565b811461255157600080fd5b50565b6000813590506125638161253d565b92915050565b60006020828403121561257f5761257e612529565b5b600061258d84828501612554565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125cb81612533565b82525050565b6040820160008201516125e760008501826125c2565b5060208201516125fa60208501826125c2565b50505050565b600061260c83836125d1565b60408301905092915050565b6000602082019050919050565b600061263082612596565b61263a81856125a1565b9350612645836125b2565b8060005b8381101561267657815161265d8882612600565b975061266883612618565b925050600181019050612649565b5085935050505092915050565b6000602082019050818103600083015261269d8184612625565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126d0826126a5565b9050919050565b6126e0816126c5565b81146126eb57600080fd5b50565b6000813590506126fd816126d7565b92915050565b6000819050919050565b61271681612703565b811461272157600080fd5b50565b6000813590506127338161270d565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61275a81612739565b811461276557600080fd5b50565b60008135905061277781612751565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126127a2576127a161277d565b5b8235905067ffffffffffffffff8111156127bf576127be612782565b5b6020830191508360018202830111156127db576127da612787565b5b9250929050565b6000806000806000806000806000806101208b8d03121561280657612805612529565b5b60006128148d828e016126ee565b9a505060206128258d828e01612724565b99505060406128368d828e01612554565b98505060606128478d828e01612554565b97505060806128588d828e01612768565b96505060a06128698d828e016126ee565b95505060c061287a8d828e01612724565b94505060e061288b8d828e016126ee565b9350506101008b013567ffffffffffffffff8111156128ad576128ac61252e565b5b6128b98d828e0161278c565b92509250509295989b9194979a5092959850565b6128d681612533565b82525050565b60006020820190506128f160008301846128cd565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612940826128f7565b810181811067ffffffffffffffff8211171561295f5761295e612908565b5b80604052505050565b600061297261251f565b905061297e8282612937565b919050565b600067ffffffffffffffff82111561299e5761299d612908565b5b602082029050602081019050919050565b600080fd5b6000604082840312156129ca576129c96129af565b5b6129d46040612968565b905060006129e484828501612554565b60008301525060206129f884828501612554565b60208301525092915050565b6000612a17612a1284612983565b612968565b90508083825260208201905060408402830185811115612a3a57612a39612787565b5b835b81811015612a635780612a4f88826129b4565b845260208401935050604081019050612a3c565b5050509392505050565b600082601f830112612a8257612a8161277d565b5b8135612a92848260208601612a04565b91505092915050565b60008060408385031215612ab257612ab1612529565b5b6000612ac085828601612554565b925050602083013567ffffffffffffffff811115612ae157612ae061252e565b5b612aed85828601612a6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b31578082015181840152602081019050612b16565b60008484015250505050565b6000612b4882612af7565b612b528185612b02565b9350612b62818560208601612b13565b612b6b816128f7565b840191505092915050565b60006020820190508181036000830152612b908184612b3d565b905092915050565b60008115159050919050565b612bad81612b98565b82525050565b6000602082019050612bc86000830184612ba4565b92915050565b600060208284031215612be457612be3612529565b5b6000612bf2848285016126ee565b91505092915050565b612c04816126c5565b82525050565b612c1381612703565b82525050565b612c2281612739565b82525050565b612c3181612b98565b82525050565b61014082016000820151612c4e6000850182612bfb565b506020820151612c616020850182612bfb565b506040820151612c746040850182612bfb565b506060820151612c876060850182612c0a565b506080820151612c9a6080850182612c0a565b5060a0820151612cad60a0850182612c19565b5060c0820151612cc060c0850182612c28565b5060e0820151612cd360e0850182612bfb565b50610100820151612ce8610100850182612c19565b50610120820151612cfd610120850182612c0a565b50505050565b600061014082019050612d196000830184612c37565b92915050565b60008060408385031215612d3657612d35612529565b5b6000612d4485828601612554565b9250506020612d55858286016126ee565b9150509250929050565b600067ffffffffffffffff82169050919050565b612d7c81612d5f565b8114612d8757600080fd5b50565b600081359050612d9981612d73565b92915050565b600060208284031215612db557612db4612529565b5b6000612dc384828501612d8a565b91505092915050565b612dd5816126c5565b82525050565b6000602082019050612df06000830184612dcc565b92915050565b600080600080600060a08688031215612e1257612e11612529565b5b6000612e2088828901612554565b9550506020612e3188828901612554565b9450506040612e4288828901612554565b9350506060612e53888289016126ee565b9250506080612e6488828901612d8a565b9150509295509295909350565b6000604082019050612e8660008301856128cd565b612e936020830184612dcc565b9392505050565b612ea381612b98565b8114612eae57600080fd5b50565b600081359050612ec081612e9a565b92915050565b600080600060608486031215612edf57612ede612529565b5b6000612eed86828701612554565b9350506020612efe868287016126ee565b9250506040612f0f86828701612eb1565b9150509250925092565b612f2281612d5f565b82525050565b612f3181612703565b82525050565b6000604082019050612f4c6000830185612f19565b612f596020830184612f28565b9392505050565b604082016000820151612f7660008501826125c2565b506020820151612f8960208501826125c2565b50505050565b6000604082019050612fa46000830184612f60565b92915050565b60008083601f840112612fc057612fbf61277d565b5b8235905067ffffffffffffffff811115612fdd57612fdc612782565b5b602083019150836001820283011115612ff957612ff8612787565b5b9250929050565b6000806020838503121561301757613016612529565b5b600083013567ffffffffffffffff8111156130355761303461252e565b5b61304185828601612faa565b92509250509250929050565b60008060006060848603121561306657613065612529565b5b600061307486828701612724565b935050602061308586828701612554565b925050604061309686828701612554565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f496e76616c69644d657373616765486173680000000000000000000000000000600082015250565b60006131166012836130cf565b9150613121826130e0565b602082019050919050565b6000602082019050818103600083015261314581613109565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061318682612703565b915061319183612703565b92508282019050808211156131a9576131a861314c565b5b92915050565b60006060820190506131c46000830186612dcc565b6131d16020830185612dcc565b6131de6040830184612f28565b949350505050565b6000815190506131f581612e9a565b92915050565b60006020828403121561321157613210612529565b5b600061321f848285016131e6565b91505092915050565b600061323382612703565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132655761326461314c565b5b600182019050919050565b60006040820190506132856000830185612dcc565b6132926020830184612f28565b9392505050565b60006132a482612703565b91506132af83612703565b92508282026132bd81612703565b915082820484148315176132d4576132d361314c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061331582612703565b915061332083612703565b9250826133305761332f6132db565b5b828204905092915050565b600061334682612703565b915061335183612703565b92508282039050818111156133695761336861314c565b5b92915050565b6000819050919050565b600061339461338f61338a84612739565b61336f565b612703565b9050919050565b6133a481613379565b82525050565b82818337600083830152505050565b60006133c583856130cf565b93506133d28385846133aa565b6133db836128f7565b840190509392505050565b600060a0820190506133fb6000830189612f28565b613408602083018861339b565b61341560408301876128cd565b61342260608301866128cd565b81810360808301526134358184866133b9565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061348957607f821691505b60208210810361349c5761349b613442565b5b50919050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b60006134d86016836130cf565b91506134e3826134a2565b602082019050919050565b60006020820190508181036000830152613507816134cb565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061356a602e836130cf565b91506135758261350e565b604082019050919050565b600060208201905081810360008301526135998161355d565b9050919050565b6000819050919050565b600060ff82169050919050565b60006135d26135cd6135c8846135a0565b61336f565b6135aa565b9050919050565b6135e2816135b7565b82525050565b60006020820190506135fd60008301846135d9565b92915050565b60006020820190506136186000830184612f19565b92915050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b6000613654600e836130cf565b915061365f8261361e565b602082019050919050565b6000602082019050818103600083015261368381613647565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b60006136c0600e836130cf565b91506136cb8261368a565b602082019050919050565b600060208201905081810360008301526136ef816136b3565b9050919050565b600061370182612739565b915061370c83612739565b925082820390506bffffffffffffffffffffffff8111156137305761372f61314c565b5b92915050565b600061375161374c61374784612d5f565b61336f565b612739565b9050919050565b61376181613736565b82525050565b600060608201905061377c60008301866128cd565b61378960208301856128cd565b6137966040830184613758565b949350505050565b60006060820190506137b360008301866128cd565b6137c06020830185612dcc565b6137cd6040830184612ba4565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613805565b61384c8683613805565b95508019841693508086168417925050509392505050565b600061387f61387a61387584612703565b61336f565b612703565b9050919050565b6000819050919050565b61389983613864565b6138ad6138a582613886565b848454613812565b825550505050565b600090565b6138c26138b5565b6138cd818484613890565b505050565b5b818110156138f1576138e66000826138ba565b6001810190506138d3565b5050565b601f82111561393657613907816137e0565b613910846137f5565b8101602085101561391f578190505b61393361392b856137f5565b8301826138d2565b50505b505050565b600082821c905092915050565b60006139596000198460080261393b565b1980831691505092915050565b60006139728383613948565b9150826002028217905092915050565b61398c83836137d5565b67ffffffffffffffff8111156139a5576139a4612908565b5b6139af8254613471565b6139ba8282856138f5565b6000601f8311600181146139e957600084156139d7578287013590505b6139e18582613966565b865550613a49565b601f1984166139f7866137e0565b60005b82811015613a1f578489013582556001820191506020850194506020810190506139fa565b86831015613a3c5784890135613a38601f891682613948565b8355505b6001600288020188555050505b50505050505050565b6000613a5e8385612b02565b9350613a6b8385846133aa565b613a74836128f7565b840190509392505050565b60006020820190508181036000830152613a9a818486613a52565b90509392505050565b6000604082019050613ab86000830185612f28565b613ac560208301846128cd565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613b286026836130cf565b9150613b3382613acc565b604082019050919050565b60006020820190508181036000830152613b5781613b1b565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613b946010836130cf565b9150613b9f82613b5e565b602082019050919050565b60006020820190508181036000830152613bc381613b87565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613c006011836130cf565b9150613c0b82613bca565b602082019050919050565b60006020820190508181036000830152613c2f81613bf3565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613c6c600c836130cf565b9150613c7782613c36565b602082019050919050565b60006020820190508181036000830152613c9b81613c5f565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613cd86010836130cf565b9150613ce382613ca2565b602082019050919050565b60006020820190508181036000830152613d0781613ccb565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613d446016836130cf565b9150613d4f82613d0e565b602082019050919050565b60006020820190508181036000830152613d7381613d37565b9050919050565b7f496e76616c696453656e646572466565526563697069656e7400000000000000600082015250565b6000613db06019836130cf565b9150613dbb82613d7a565b602082019050919050565b60006020820190508181036000830152613ddf81613da3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e1c6020836130cf565b9150613e2782613de6565b602082019050919050565b60006020820190508181036000830152613e4b81613e0f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613eae602b836130cf565b9150613eb982613e52565b604082019050919050565b60006020820190508181036000830152613edd81613ea1565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613f1a6014836130cf565b9150613f2582613ee4565b602082019050919050565b60006020820190508181036000830152613f4981613f0d565b905091905056fea264697066735822122026b224a9fe39179f554d9e0f6cfd5bbbe11ee1e5ac5b6989ea85352cd5cd7feb64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8129FC1C GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x99E3C0B4 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x31F JUMPI DUP1 PUSH4 0xC2280103 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xD28A8D32 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3BA JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x284 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x9015DCED EQ PUSH2 0x2D2 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x268 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0x3D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x2683 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x27E2 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x193 SWAP2 SWAP1 PUSH2 0x28DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B1 SWAP2 SWAP1 PUSH2 0x2A9B JUMP JUMPDEST PUSH2 0xA2D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH2 0xB41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x2B76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DE PUSH2 0xBD3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0xBFC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x2BCE JUMP JUMPDEST PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0xC66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x2D03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x2D1F JUMP JUMPDEST PUSH2 0xEA1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28C PUSH2 0x1047 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x296 PUSH2 0x1197 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x2D9F JUMP JUMPDEST PUSH2 0x11A9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x2DF6 JUMP JUMPDEST PUSH2 0x123E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP3 SWAP2 SWAP1 PUSH2 0x2E71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x318 SWAP2 SWAP1 PUSH2 0x2EC6 JUMP JUMPDEST PUSH2 0x1652 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x327 PUSH2 0x1788 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x335 SWAP3 SWAP2 SWAP1 PUSH2 0x2F37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x353 SWAP2 SWAP1 PUSH2 0x2569 JUMP JUMPDEST PUSH2 0x17AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x2F8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x388 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x383 SWAP2 SWAP1 PUSH2 0x3000 JUMP JUMPDEST PUSH2 0x17EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x304D JUMP JUMPDEST PUSH2 0x1845 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x2BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CF SWAP2 SWAP1 PUSH2 0x2BCE JUMP JUMPDEST PUSH2 0x1BDE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x453 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x47B JUMPI PUSH2 0x47A PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B4 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4A1 PUSH2 0x2416 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x499 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x508 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F0 JUMPI PUSH2 0x4EF PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51E PUSH2 0x1C61 JUMP JUMPDEST PUSH2 0x52C DUP12 DUP12 DUP7 DUP10 DUP10 DUP15 PUSH2 0x1CAB JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 SWAP1 POP GT PUSH2 0x572 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x569 SWAP1 PUSH2 0x312C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP9 DUP15 PUSH2 0x59C SWAP2 SWAP1 PUSH2 0x317B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x64E SWAP1 PUSH2 0x3228 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xD1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6A5 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP13 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3299 JUMP JUMPDEST PUSH2 0x6F8 SWAP2 SWAP1 PUSH2 0x330A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP14 PUSH2 0x7CB SWAP2 SWAP1 PUSH2 0x333B JUMP JUMPDEST DUP2 MSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE SWAP1 POP POP DUP2 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x94BED2B14A43EFAEC8C295BA3FBCE0AA493E61643C3ADB49774CA7DF08D5A919 DUP5 DUP13 DUP16 DUP16 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0xA16 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xA35 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA6C JUMPI PUSH2 0xA6B PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD1 JUMPI PUSH2 0xAD0 PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAFD JUMPI PUSH2 0xAFC PUSH2 0x30A0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xA3E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xB50 SWAP1 PUSH2 0x3471 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB7C SWAP1 PUSH2 0x3471 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB9E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBAC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBDB PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0xBE3 PUSH2 0x1F43 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC04 PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x0 PUSH2 0x1FA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC6E PUSH2 0x2436 JUMP JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEA9 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF0F SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0xF81 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0xFEA JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1078 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x10A5 JUMPI POP PUSH2 0x1087 ADDRESS PUSH2 0x206C JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x10A4 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x10E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10DB SWAP1 PUSH2 0x3580 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1121 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1133 PUSH2 0x208F JUMP JUMPDEST PUSH2 0x113B PUSH2 0x20E8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x118B SWAP2 SWAP1 PUSH2 0x35E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x119F PUSH2 0x1EC5 JUMP JUMPDEST PUSH2 0x11A7 PUSH2 0x2141 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11B1 PUSH2 0x1EC5 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1209 SWAP2 SWAP1 PUSH2 0x3603 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C8 SWAP1 PUSH2 0x366A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132C SWAP1 PUSH2 0x36D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x13B7 SWAP2 SWAP1 PUSH2 0x36F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1559 JUMPI PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0x1481 JUMPI PUSH2 0x1480 DUP8 PUSH2 0x21A4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD GT ISZERO PUSH2 0x1558 JUMPI DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1513 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1532 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1556 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP JUMPDEST JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP7 PUSH1 0xD0 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15AA SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x15C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15ED SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH32 0xA9EC2B6676D3EA3E8DA117193C71B1B85FCDBC72F077A624F950241EB38F13C2 DUP11 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1639 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3767 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP7 DUP2 SWAP3 POP SWAP3 POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165A PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16C0 SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x1748 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x177B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x379E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x17B5 PUSH2 0x24FF JUMP JUMPDEST PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17F6 PUSH2 0x1EC5 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1807 SWAP3 SWAP2 SWAP1 PUSH2 0x3982 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1839 SWAP3 SWAP2 SWAP1 PUSH2 0x3A7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18CE SWAP1 PUSH2 0x366A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x193B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1932 SWAP1 PUSH2 0x36D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD SLOAD PUSH2 0x195F SWAP2 SWAP1 PUSH2 0x333B JUMP JUMPDEST SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F4 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A13 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xD0 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xD0 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B54 SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B73 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B97 SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP4 PUSH32 0x79252C381C5280F78C77F378791E42B506843A48916430480EAB95A898CDAE9F DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1BCA SWAP3 SWAP2 SWAP1 PUSH2 0x3AA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BE6 PUSH2 0x1EC5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C4C SWAP1 PUSH2 0x3B3E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C5E DUP2 PUSH2 0x1FA6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C69 PUSH2 0xBE5 JUMP JUMPDEST ISZERO PUSH2 0x1CA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA0 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D2E SWAP1 PUSH2 0x3C16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 GT PUSH2 0x1D7A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D71 SWAP1 PUSH2 0x3C82 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE0 SWAP1 PUSH2 0x3CEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1E44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3B SWAP1 PUSH2 0x3D5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH2 0x1EBD JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EB3 SWAP1 PUSH2 0x3DC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1ECD PUSH2 0x22F8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EEB PUSH2 0x1214 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F38 SWAP1 PUSH2 0x3E32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1F4B PUSH2 0x2300 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1F8F PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F9C SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D5 SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20E6 PUSH2 0x2349 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2137 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x212E SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x213F PUSH2 0x23AA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2149 PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x218D PUSH2 0x22F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x219A SWAP2 SWAP1 PUSH2 0x2DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0xD0 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x226B SWAP3 SWAP2 SWAP1 PUSH2 0x3270 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22AE SWAP2 SWAP1 PUSH2 0x31FB JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x44F6938CA4A10313AABB76F874CCED61E35710A734A126E4AFB34461BF8C2501 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2308 PUSH2 0xBE5 JUMP JUMPDEST PUSH2 0x2347 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x233E SWAP1 PUSH2 0x3F30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2398 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x238F SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23A8 PUSH2 0x23A3 PUSH2 0x22F8 JUMP JUMPDEST PUSH2 0x1FA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23F0 SWAP1 PUSH2 0x3EC4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9E PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2546 DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP2 EQ PUSH2 0x2551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2563 DUP2 PUSH2 0x253D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257F JUMPI PUSH2 0x257E PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258D DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25CB DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x25E7 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x25FA PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260C DUP4 DUP4 PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2630 DUP3 PUSH2 0x2596 JUMP JUMPDEST PUSH2 0x263A DUP2 DUP6 PUSH2 0x25A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x2645 DUP4 PUSH2 0x25B2 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2676 JUMPI DUP2 MLOAD PUSH2 0x265D DUP9 DUP3 PUSH2 0x2600 JUMP JUMPDEST SWAP8 POP PUSH2 0x2668 DUP4 PUSH2 0x2618 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2649 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x269D DUP2 DUP5 PUSH2 0x2625 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D0 DUP3 PUSH2 0x26A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E0 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP2 EQ PUSH2 0x26EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26FD DUP2 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2716 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP2 EQ PUSH2 0x2721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2733 DUP2 PUSH2 0x270D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x275A DUP2 PUSH2 0x2739 JUMP JUMPDEST DUP2 EQ PUSH2 0x2765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2777 DUP2 PUSH2 0x2751 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x27A2 JUMPI PUSH2 0x27A1 PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27BF JUMPI PUSH2 0x27BE PUSH2 0x2782 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x27DB JUMPI PUSH2 0x27DA PUSH2 0x2787 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2806 JUMPI PUSH2 0x2805 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2814 DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2825 DUP14 DUP3 DUP15 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2836 DUP14 DUP3 DUP15 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2847 DUP14 DUP3 DUP15 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2858 DUP14 DUP3 DUP15 ADD PUSH2 0x2768 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2869 DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x287A DUP14 DUP3 DUP15 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x288B DUP14 DUP3 DUP15 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28AD JUMPI PUSH2 0x28AC PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x28B9 DUP14 DUP3 DUP15 ADD PUSH2 0x278C JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH2 0x28D6 DUP2 PUSH2 0x2533 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2940 DUP3 PUSH2 0x28F7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x295F JUMPI PUSH2 0x295E PUSH2 0x2908 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2972 PUSH2 0x251F JUMP JUMPDEST SWAP1 POP PUSH2 0x297E DUP3 DUP3 PUSH2 0x2937 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x299E JUMPI PUSH2 0x299D PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29CA JUMPI PUSH2 0x29C9 PUSH2 0x29AF JUMP JUMPDEST JUMPDEST PUSH2 0x29D4 PUSH1 0x40 PUSH2 0x2968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29E4 DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x29F8 DUP5 DUP3 DUP6 ADD PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A17 PUSH2 0x2A12 DUP5 PUSH2 0x2983 JUMP JUMPDEST PUSH2 0x2968 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A3A JUMPI PUSH2 0x2A39 PUSH2 0x2787 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2A63 JUMPI DUP1 PUSH2 0x2A4F DUP9 DUP3 PUSH2 0x29B4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2A3C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A82 JUMPI PUSH2 0x2A81 PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A92 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AC0 DUP6 DUP3 DUP7 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2AE1 JUMPI PUSH2 0x2AE0 PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x2AED DUP6 DUP3 DUP7 ADD PUSH2 0x2A6D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B31 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B48 DUP3 PUSH2 0x2AF7 JUMP JUMPDEST PUSH2 0x2B52 DUP2 DUP6 PUSH2 0x2B02 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B62 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2B13 JUMP JUMPDEST PUSH2 0x2B6B DUP2 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B90 DUP2 DUP5 PUSH2 0x2B3D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BAD DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BA4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE4 JUMPI PUSH2 0x2BE3 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BF2 DUP5 DUP3 DUP6 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C04 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C13 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C22 DUP2 PUSH2 0x2739 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C31 DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x140 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C4E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C61 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2C74 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2C87 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2C9A PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2CAD PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2C19 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2CC0 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2C28 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2CD3 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2BFB JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2CE8 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2C19 JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x2CFD PUSH2 0x120 DUP6 ADD DUP3 PUSH2 0x2C0A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 ADD SWAP1 POP PUSH2 0x2D19 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C37 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D36 JUMPI PUSH2 0x2D35 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D44 DUP6 DUP3 DUP7 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2D55 DUP6 DUP3 DUP7 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D7C DUP2 PUSH2 0x2D5F JUMP JUMPDEST DUP2 EQ PUSH2 0x2D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2D99 DUP2 PUSH2 0x2D73 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DB5 JUMPI PUSH2 0x2DB4 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DC3 DUP5 DUP3 DUP6 ADD PUSH2 0x2D8A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DD5 DUP2 PUSH2 0x26C5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DF0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2E12 JUMPI PUSH2 0x2E11 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E20 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2E31 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2E42 DUP9 DUP3 DUP10 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2E53 DUP9 DUP3 DUP10 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2E64 DUP9 DUP3 DUP10 ADD PUSH2 0x2D8A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E86 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x2E93 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DCC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2EA3 DUP2 PUSH2 0x2B98 JUMP JUMPDEST DUP2 EQ PUSH2 0x2EAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EC0 DUP2 PUSH2 0x2E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2EDF JUMPI PUSH2 0x2EDE PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2EED DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2EFE DUP7 DUP3 DUP8 ADD PUSH2 0x26EE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F0F DUP7 DUP3 DUP8 ADD PUSH2 0x2EB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F22 DUP2 PUSH2 0x2D5F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2F31 DUP2 PUSH2 0x2703 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F4C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F19 JUMP JUMPDEST PUSH2 0x2F59 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2F76 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2F89 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25C2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2FA4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F60 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FC0 JUMPI PUSH2 0x2FBF PUSH2 0x277D JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FDD JUMPI PUSH2 0x2FDC PUSH2 0x2782 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2FF9 JUMPI PUSH2 0x2FF8 PUSH2 0x2787 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3017 JUMPI PUSH2 0x3016 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3035 JUMPI PUSH2 0x3034 PUSH2 0x252E JUMP JUMPDEST JUMPDEST PUSH2 0x3041 DUP6 DUP3 DUP7 ADD PUSH2 0x2FAA JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3066 JUMPI PUSH2 0x3065 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3074 DUP7 DUP3 DUP8 ADD PUSH2 0x2724 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3085 DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3096 DUP7 DUP3 DUP8 ADD PUSH2 0x2554 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E76616C69644D657373616765486173680000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3116 PUSH1 0x12 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3121 DUP3 PUSH2 0x30E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3145 DUP2 PUSH2 0x3109 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3186 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3191 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x31A9 JUMPI PUSH2 0x31A8 PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31C4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x31D1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x31DE PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x31F5 DUP2 PUSH2 0x2E9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3211 JUMPI PUSH2 0x3210 PUSH2 0x2529 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x321F DUP5 DUP3 DUP6 ADD PUSH2 0x31E6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3265 JUMPI PUSH2 0x3264 PUSH2 0x314C JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3285 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x3292 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F28 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32A4 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x32AF DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x32BD DUP2 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x32D4 JUMPI PUSH2 0x32D3 PUSH2 0x314C JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3315 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3320 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3330 JUMPI PUSH2 0x332F PUSH2 0x32DB JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3346 DUP3 PUSH2 0x2703 JUMP JUMPDEST SWAP2 POP PUSH2 0x3351 DUP4 PUSH2 0x2703 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3369 JUMPI PUSH2 0x3368 PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3394 PUSH2 0x338F PUSH2 0x338A DUP5 PUSH2 0x2739 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2703 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33A4 DUP2 PUSH2 0x3379 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33C5 DUP4 DUP6 PUSH2 0x30CF JUMP JUMPDEST SWAP4 POP PUSH2 0x33D2 DUP4 DUP6 DUP5 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x33DB DUP4 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x33FB PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2F28 JUMP JUMPDEST PUSH2 0x3408 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x339B JUMP JUMPDEST PUSH2 0x3415 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3422 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x3435 DUP2 DUP5 DUP7 PUSH2 0x33B9 JUMP JUMPDEST SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3489 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x349C JUMPI PUSH2 0x349B PUSH2 0x3442 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34D8 PUSH1 0x16 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x34E3 DUP3 PUSH2 0x34A2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3507 DUP2 PUSH2 0x34CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x356A PUSH1 0x2E DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3575 DUP3 PUSH2 0x350E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3599 DUP2 PUSH2 0x355D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35D2 PUSH2 0x35CD PUSH2 0x35C8 DUP5 PUSH2 0x35A0 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x35AA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35E2 DUP2 PUSH2 0x35B7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x35FD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x35D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3618 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F19 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3654 PUSH1 0xE DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x365F DUP3 PUSH2 0x361E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3683 DUP2 PUSH2 0x3647 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36C0 PUSH1 0xE DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x36CB DUP3 PUSH2 0x368A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36EF DUP2 PUSH2 0x36B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3701 DUP3 PUSH2 0x2739 JUMP JUMPDEST SWAP2 POP PUSH2 0x370C DUP4 PUSH2 0x2739 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3730 JUMPI PUSH2 0x372F PUSH2 0x314C JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3751 PUSH2 0x374C PUSH2 0x3747 DUP5 PUSH2 0x2D5F JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2739 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3761 DUP2 PUSH2 0x3736 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x377C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3789 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x3796 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3758 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x37B3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x37C0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2DCC JUMP JUMPDEST PUSH2 0x37CD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BA4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3842 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3805 JUMP JUMPDEST PUSH2 0x384C DUP7 DUP4 PUSH2 0x3805 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x387F PUSH2 0x387A PUSH2 0x3875 DUP5 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x336F JUMP JUMPDEST PUSH2 0x2703 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3899 DUP4 PUSH2 0x3864 JUMP JUMPDEST PUSH2 0x38AD PUSH2 0x38A5 DUP3 PUSH2 0x3886 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3812 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x38C2 PUSH2 0x38B5 JUMP JUMPDEST PUSH2 0x38CD DUP2 DUP5 DUP5 PUSH2 0x3890 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x38F1 JUMPI PUSH2 0x38E6 PUSH1 0x0 DUP3 PUSH2 0x38BA JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x38D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3936 JUMPI PUSH2 0x3907 DUP2 PUSH2 0x37E0 JUMP JUMPDEST PUSH2 0x3910 DUP5 PUSH2 0x37F5 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x391F JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3933 PUSH2 0x392B DUP6 PUSH2 0x37F5 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x38D2 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3959 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x393B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3972 DUP4 DUP4 PUSH2 0x3948 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x398C DUP4 DUP4 PUSH2 0x37D5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39A5 JUMPI PUSH2 0x39A4 PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x39AF DUP3 SLOAD PUSH2 0x3471 JUMP JUMPDEST PUSH2 0x39BA DUP3 DUP3 DUP6 PUSH2 0x38F5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x39E9 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x39D7 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x39E1 DUP6 DUP3 PUSH2 0x3966 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3A49 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x39F7 DUP7 PUSH2 0x37E0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3A1F JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39FA JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3A3C JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x3A38 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3948 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A5E DUP4 DUP6 PUSH2 0x2B02 JUMP JUMPDEST SWAP4 POP PUSH2 0x3A6B DUP4 DUP6 DUP5 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x3A74 DUP4 PUSH2 0x28F7 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9A DUP2 DUP5 DUP7 PUSH2 0x3A52 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3AB8 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F28 JUMP JUMPDEST PUSH2 0x3AC5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x28CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B28 PUSH1 0x26 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B33 DUP3 PUSH2 0x3ACC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B57 DUP2 PUSH2 0x3B1B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B94 PUSH1 0x10 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B9F DUP3 PUSH2 0x3B5E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BC3 DUP2 PUSH2 0x3B87 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C00 PUSH1 0x11 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C0B DUP3 PUSH2 0x3BCA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C2F DUP2 PUSH2 0x3BF3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C6C PUSH1 0xC DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C77 DUP3 PUSH2 0x3C36 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C9B DUP2 PUSH2 0x3C5F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CD8 PUSH1 0x10 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3CE3 DUP3 PUSH2 0x3CA2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D07 DUP2 PUSH2 0x3CCB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D44 PUSH1 0x16 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3D4F DUP3 PUSH2 0x3D0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D73 DUP2 PUSH2 0x3D37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB0 PUSH1 0x19 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3DBB DUP3 PUSH2 0x3D7A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DDF DUP2 PUSH2 0x3DA3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1C PUSH1 0x20 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3E27 DUP3 PUSH2 0x3DE6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E4B DUP2 PUSH2 0x3E0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EAE PUSH1 0x2B DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3EB9 DUP3 PUSH2 0x3E52 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3EDD DUP2 PUSH2 0x3EA1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F1A PUSH1 0x14 DUP4 PUSH2 0x30CF JUMP JUMPDEST SWAP2 POP PUSH2 0x3F25 DUP3 PUSH2 0x3EE4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3F49 DUP2 PUSH2 0x3F0D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 0xB2 0x24 0xA9 INVALID CODECOPY OR SWAP16 SSTORE 0x4D SWAP15 0xF PUSH13 0xFD5BBBE11EE1E5AC5B6989EA85 CALLDATALOAD 0x2C 0xD5 0xCD PUSH32 0xEB64736F6C634300081200330000000000000000000000000000000000000000 ","sourceMap":"603:8850:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8565:544;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2163:1627;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2262:528:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9354:96:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1852:65;;;:::i;:::-;;1879:84:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2085:101:0;;;:::i;:::-;;8139:119:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7968:115;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3384:327:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1149:130:13;;;:::i;:::-;;1735:61;;;:::i;:::-;;2940:187:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1462:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5127:1338:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1750:279:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9162:139:13;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;8327:174;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3833:161:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6982:739:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2335:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8565:544:13;8640:34;8686:47;8736:21;:32;8758:9;8736:32;;;;;;;;;;;8686:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8778:14;8795:12;:19;8778:36;;8824:41;8900:6;8868:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8824:83;;8931:9;8926:145;8950:6;8946:1;:10;8926:145;;;8986:12;8999:1;8986:15;;;;;;;;:::i;:::-;;;;;;;;8974:6;8981:1;8974:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;9043:3;;;;;;;8926:145;;;;9096:6;9089:13;;;;;8565:544;;;:::o;2163:1627::-;2489:15;1503:19:2;:17;:19::i;:::-;2552:92:13::1;2561:6;2569:7;2578:14;2594:19;2615:10;2627:16;2552:8;:92::i;:::-;2723:1;2701:11;;2695:25;;:29;2687:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;2819:6;2812:27;;;2840:10;2860:4;2877:10;2867:7;:20;;;;:::i;:::-;2812:76;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2955:6;:18;2962:10;2955:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;3073:10;3085:6;:18;3092:10;3085:18;;;;;;;;;;;;;;;;3062:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3052:53;;;;;;3042:63;;3147:20;3203:7;;3181:18;;;;;;;;;;;3171:28;;:7;:28;;;;:::i;:::-;3170:40;;;;:::i;:::-;3147:63;;3237:388;;;;;;;;3265:10;3237:388;;;;;;3296:6;3237:388;;;;;;3336:19;3237:388;;;;;;3380:10;3237:388;;;;3417:12;3237:388;;;;3449:5;3237:388;;;;;;3481:5;3237:388;;;;;;3515:14;3237:388;;;;;;3562:7;;3237:388;;;;;;;;3602:12;3592:7;:22;;;;:::i;:::-;3237:388;;::::0;3220:5:::1;:14;3226:7;3220:14;;;;;;;;;;;:405;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3729:7;3692:5;:14;3698:7;3692:14;;;;;;;;;;;:21;;;3684:6;3671:112;;;3715:12;3738:5;3745:16;3763:6;3771:11;;3671:112;;;;;;;;;;;:::i;:::-;;;;;;;;2506:1284;2163:1627:::0;;;;;;;;;;;;:::o;2262:528:14:-;1355:13:0;:11;:13::i;:::-;2393:14:14::1;2410:12;:19;2393:36;;2444:6;2439:345;2460:6;2456:1;:10;2439:345;;;2484:21;:31;2506:8;2484:31;;;;;;;;;;;2521:12;2534:1;2521:15;;;;;;;;:::i;:::-;;;;;;;;2484:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2603:111;;;;;;;;2659:12;2672:1;2659:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2603:111;;;;2691:8;2603:111;;::::0;2551:27:::1;:49;2579:12;2592:1;2579:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2551:49;;;;;;;;;;;:163;;;;;;;;;;;;;;;;;;;2756:3;;;;;;;2439:345;;;;2382:408;2262:528:::0;;:::o;9354:96:13:-;9401:12;9432:11;9425:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9354:96;:::o;1852:65::-;1355:13:0;:11;:13::i;:::-;1900:10:13::1;:8;:10::i;:::-;1852:65::o:0;1879:84:2:-;1926:4;1949:7;;;;;;;;;;;1942:14;;1879:84;:::o;2085:101:0:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;:::-;2085:101::o:0;8139:119:13:-;8203:4;8226:17;:25;8244:6;8226:25;;;;;;;;;;;;;;;;;;;;;;;;;8219:32;;8139:119;;;:::o;7968:115::-;8030:12;;:::i;:::-;8061:5;:15;8067:8;8061:15;;;;;;;;;;;8054:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7968:115;;;:::o;3384:327:14:-;1355:13:0;:11;:13::i;:::-;3500:1:14::1;3483:19;;:5;:19;;::::0;3475:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3543:18;:4;:18:::0;3539:47:::1;;3581:5;3563:15;;:23;;;;;;;;;;;;;;;;;;3539:47;3600:20;:4;:20:::0;3596:52:::1;;3643:5;3622:18;;:26;;;;;;;;;;;;;;;;;;3596:52;3663:41;3688:15;;;;;;;;;;;3663:41;;;;;;:::i;:::-;;;;;;;;3384:327:::0;;:::o;1149:130:13:-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;1212:7:13::1;1202;:17;;;;1229:16;:14;:16::i;:::-;1255:17;:15;:17::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;1149:130:13:o;1735:61::-;1355:13:0;:11;:13::i;:::-;1781:8:13::1;:6;:8::i;:::-;1735:61::o:0;2940:187:14:-;1355:13:0;:11;:13::i;:::-;3046:19:14::1;3025:18;;:40;;;;;;;;;;;;;;;;;;3080;3100:19;3080:40;;;;;;:::i;:::-;;;;;;;;2940:187:::0;:::o;1462:85:0:-;1508:7;1534:6;;;;;;;;;;;1527:13;;1462:85;:::o;5127:1338:13:-;5333:7;5342;1430:18;;;;;;;;;;;1416:32;;:10;:32;;;1408:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;5427:5:::1;:15;5433:8;5427:15;;;;;;;;;;;:27;;;;;;;;;;;;5426:28;5418:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;5522:13;5538:5;:15;5544:8;5538:15;;;;;;;;;;;:21;;;;;;;;;;;;5522:37;;5668:14;5638:44;;:5;:15;5644:8;5638:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5726:1;5696:5;:15;5702:8;5696:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;5693:492:::1;;5827:4;5797:5;:15;5803:8;5797:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;5878:1;5850:5;:15;5856:8;5850:15;;;;;;;;;;;:25;;;:29;5846:136;;;5938:28;5957:8;5938:18;:28::i;:::-;5846:136;6030:1;6000:5;:15;6006:8;6000:15;;;;;;;;;;;:27;;;:31;5996:179;;;6099:5;6092:22;;;6115:15;;;;;;;;;;;6132:5;:15;6138:8;6132:15;;;;;;;;;;;:27;;;6092:68;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5996:179;5693:492;6245:5;6238:22;;;6261:18;6281:5;:15;6287:8;6281:15;;;;;;;;;;;:22;;;6238:66;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6389:18;6342:82;;6370:8;6342:82;6355:13;6380:6;6409:14;6342:82;;;;;;;;:::i;:::-;;;;;;;;6442:8;6452:5;6434:24;;;;;5127:1338:::0;;;;;;;;:::o;1750:279:14:-;1355:13:0;:11;:13::i;:::-;1874:1:14::1;1857:19;;:5;:19;;::::0;1849:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1917:15;:4;:15:::0;1913:54:::1;;1961:6;1934:17;:24;1952:5;1934:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1913:54;1983:39;2002:4;2008:5;2015:6;1983:39;;;;;;;;:::i;:::-;;;;;;;;1750:279:::0;;;:::o;9162:139:13:-;9218:6;9235:7;9266:18;;;;;;;;;;;9286:7;;9259:35;;;;9162:139;;:::o;8327:174::-;8403:38;;:::i;:::-;8460:27;:34;8488:5;8460:34;;;;;;;;;;;8453:41;;;;;;;;;;;;;;;;;;;;;;;;;;;8327:174;;;:::o;3833:161:14:-;1355:13:0;:11;:13::i;:::-;3937:10:14::1;;3923:11;:24;;;;;;;:::i;:::-;;3962:25;3976:10;;3962:25;;;;;;;:::i;:::-;;;;;;;;3833:161:::0;;:::o;6982:739:13:-;7080:4;1430:18;;;;;;;;;;;1416:32;;:10;:32;;;1408:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;7162:5:::1;:15;7168:8;7162:15;;;;;;;;;;;:27;;;;;;;;;;;;7161:28;7153:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;7259:20;7307:4;7282:5;:15;7288:8;7282:15;;;;;;;;;;;:22;;;:29;;;;:::i;:::-;7259:52;;7328:5;:15;7334:8;7328:15;;;;;;;;;;;:21;;;;;;;;;;;;7321:38;;;7360:15;;;;;;;;;;;7377:4;7321:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7453:4;7423:5;:15;7429:8;7423:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;7496:1;7467:5;:15;7473:8;7467:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;7564:5;:15;7570:8;7564:15;;;;;;;;;;;:21;;;;;;;;;;;;7557:38;;;7596:5;:15;7602:8;7596:15;;;;;;;;;;;:29;;;;;;;;;;;;7627:12;7557:83;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7675:8;7655:37;7669:4;7685:6;7655:37;;;;;;;:::i;:::-;;;;;;;;7710:4;7703:11;;;6982:739:::0;;;;;:::o;2335:198:0:-;1355:13;:11;:13::i;:::-;2443:1:::1;2423:22;;:8;:22;;::::0;2415:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2498:28;2517:8;2498:18;:28::i;:::-;2335:198:::0;:::o;2031:106:2:-;2101:8;:6;:8::i;:::-;2100:9;2092:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2031:106::o;4296:584:13:-;4478:17;:25;4496:6;4478:25;;;;;;;;;;;;;;;;;;;;;;;;;4470:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;4553:1;4543:7;:11;4535:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;4615:1;4589:28;;:14;:28;;;4581:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;4718:1;4710:10;;4656:27;:45;4684:16;4656:45;;;;;;;;;;;:50;;;:64;4648:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4775:1;4762:10;:14;4758:116;;;4831:1;4800:33;;:19;:33;;;4792:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;4758:116;4296:584;;;;;;:::o;1620:130:0:-;1694:12;:10;:12::i;:::-;1683:23;;:7;:5;:7::i;:::-;:23;;;1675:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1620:130::o;2697:117:2:-;1750:16;:14;:16::i;:::-;2765:5:::1;2755:7;;:15;;;;;;;;;;;;;;;;;;2785:22;2794:12;:10;:12::i;:::-;2785:22;;;;;;:::i;:::-;;;;;;;;2697:117::o:0;2687:187:0:-;2760:16;2779:6;;;;;;;;;;;2760:25;;2804:8;2795:6;;:17;;;;;;;;;;;;;;;;;;2858:8;2827:40;;2848:8;2827:40;;;;;;;;;;;;2750:124;2687:187;:::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1024:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1086:26:0::1;:24;:26::i;:::-;1024:95::o:0;1084:97:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1147:27:2::1;:25;:27::i;:::-;1084:97::o:0;2450:115::-;1503:19;:17;:19::i;:::-;2519:4:::1;2509:7;;:14;;;;;;;;;;;;;;;;;;2538:20;2545:12;:10;:12::i;:::-;2538:20;;;;;;:::i;:::-;;;;;;;;2450:115::o:0;6589:347:13:-;6654:17;6674:5;:15;6680:8;6674:15;;;;;;;;;;;:34;;;;;;;;;;;;6654:54;;6718:12;6733:5;:15;6739:8;6733:15;;;;;;;;;;;:25;;;6718:40;;6806:5;:15;6812:8;6806:15;;;;;;;;;;;:21;;;;;;;;;;;;6799:38;;;6838:9;6849:4;6799:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6924:4;6913:9;6892:37;;;;;;;;;;;;6644:292;;6589:347;:::o;886:96:7:-;939:7;965:10;958:17;;886:96;:::o;2209:106:2:-;2275:8;:6;:8::i;:::-;2267:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2209:106::o;1125:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1197:32:0::1;1216:12;:10;:12::i;:::-;1197:18;:32::i;:::-;1125:111::o:0;1187:95:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1270:5:2::1;1260:7;;:15;;;;;;;;;;;;;;;;;;1187:95::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1750:505::-;1895:4;1890:3;1886:14;1982:4;1975:5;1971:16;1965:23;2001:63;2058:4;2053:3;2049:14;2035:12;2001:63;:::i;:::-;1910:164;2156:4;2149:5;2145:16;2139:23;2175:63;2232:4;2227:3;2223:14;2209:12;2175:63;:::i;:::-;2084:164;1864:391;1750:505;;:::o;2261:295::-;2388:10;2409:104;2509:3;2501:6;2409:104;:::i;:::-;2545:4;2540:3;2536:14;2522:28;;2261:295;;;;:::o;2562:142::-;2661:4;2693;2688:3;2684:14;2676:22;;2562:142;;;:::o;2790:964::-;2967:3;2996:83;3073:5;2996:83;:::i;:::-;3095:115;3203:6;3198:3;3095:115;:::i;:::-;3088:122;;3234:85;3313:5;3234:85;:::i;:::-;3342:7;3373:1;3358:371;3383:6;3380:1;3377:13;3358:371;;;3459:6;3453:13;3486:121;3603:3;3588:13;3486:121;:::i;:::-;3479:128;;3630:89;3712:6;3630:89;:::i;:::-;3620:99;;3418:311;3405:1;3402;3398:9;3393:14;;3358:371;;;3362:14;3745:3;3738:10;;2972:782;;;2790:964;;;;:::o;3760:489::-;3961:4;3999:2;3988:9;3984:18;3976:26;;4048:9;4042:4;4038:20;4034:1;4023:9;4019:17;4012:47;4076:166;4237:4;4228:6;4076:166;:::i;:::-;4068:174;;3760:489;;;;:::o;4255:126::-;4292:7;4332:42;4325:5;4321:54;4310:65;;4255:126;;;:::o;4387:96::-;4424:7;4453:24;4471:5;4453:24;:::i;:::-;4442:35;;4387:96;;;:::o;4489:122::-;4562:24;4580:5;4562:24;:::i;:::-;4555:5;4552:35;4542:63;;4601:1;4598;4591:12;4542:63;4489:122;:::o;4617:139::-;4663:5;4701:6;4688:20;4679:29;;4717:33;4744:5;4717:33;:::i;:::-;4617:139;;;;:::o;4762:77::-;4799:7;4828:5;4817:16;;4762:77;;;:::o;4845:122::-;4918:24;4936:5;4918:24;:::i;:::-;4911:5;4908:35;4898:63;;4957:1;4954;4947:12;4898:63;4845:122;:::o;4973:139::-;5019:5;5057:6;5044:20;5035:29;;5073:33;5100:5;5073:33;:::i;:::-;4973:139;;;;:::o;5118:109::-;5154:7;5194:26;5187:5;5183:38;5172:49;;5118:109;;;:::o;5233:120::-;5305:23;5322:5;5305:23;:::i;:::-;5298:5;5295:34;5285:62;;5343:1;5340;5333:12;5285:62;5233:120;:::o;5359:137::-;5404:5;5442:6;5429:20;5420:29;;5458:32;5484:5;5458:32;:::i;:::-;5359:137;;;;:::o;5502:117::-;5611:1;5608;5601:12;5625:117;5734:1;5731;5724:12;5748:117;5857:1;5854;5847:12;5885:553;5943:8;5953:6;6003:3;5996:4;5988:6;5984:17;5980:27;5970:122;;6011:79;;:::i;:::-;5970:122;6124:6;6111:20;6101:30;;6154:18;6146:6;6143:30;6140:117;;;6176:79;;:::i;:::-;6140:117;6290:4;6282:6;6278:17;6266:29;;6344:3;6336:4;6328:6;6324:17;6314:8;6310:32;6307:41;6304:128;;;6351:79;;:::i;:::-;6304:128;5885:553;;;;;:::o;6444:1693::-;6586:6;6594;6602;6610;6618;6626;6634;6642;6650;6658;6707:3;6695:9;6686:7;6682:23;6678:33;6675:120;;;6714:79;;:::i;:::-;6675:120;6834:1;6859:53;6904:7;6895:6;6884:9;6880:22;6859:53;:::i;:::-;6849:63;;6805:117;6961:2;6987:53;7032:7;7023:6;7012:9;7008:22;6987:53;:::i;:::-;6977:63;;6932:118;7089:2;7115:53;7160:7;7151:6;7140:9;7136:22;7115:53;:::i;:::-;7105:63;;7060:118;7217:2;7243:53;7288:7;7279:6;7268:9;7264:22;7243:53;:::i;:::-;7233:63;;7188:118;7345:3;7372:52;7416:7;7407:6;7396:9;7392:22;7372:52;:::i;:::-;7362:62;;7316:118;7473:3;7500:53;7545:7;7536:6;7525:9;7521:22;7500:53;:::i;:::-;7490:63;;7444:119;7602:3;7629:53;7674:7;7665:6;7654:9;7650:22;7629:53;:::i;:::-;7619:63;;7573:119;7731:3;7758:53;7803:7;7794:6;7783:9;7779:22;7758:53;:::i;:::-;7748:63;;7702:119;7888:3;7877:9;7873:19;7860:33;7920:18;7912:6;7909:30;7906:117;;;7942:79;;:::i;:::-;7906:117;8055:65;8112:7;8103:6;8092:9;8088:22;8055:65;:::i;:::-;8037:83;;;;7831:299;6444:1693;;;;;;;;;;;;;:::o;8143:118::-;8230:24;8248:5;8230:24;:::i;:::-;8225:3;8218:37;8143:118;;:::o;8267:222::-;8360:4;8398:2;8387:9;8383:18;8375:26;;8411:71;8479:1;8468:9;8464:17;8455:6;8411:71;:::i;:::-;8267:222;;;;:::o;8495:102::-;8536:6;8587:2;8583:7;8578:2;8571:5;8567:14;8563:28;8553:38;;8495:102;;;:::o;8603:180::-;8651:77;8648:1;8641:88;8748:4;8745:1;8738:15;8772:4;8769:1;8762:15;8789:281;8872:27;8894:4;8872:27;:::i;:::-;8864:6;8860:40;9002:6;8990:10;8987:22;8966:18;8954:10;8951:34;8948:62;8945:88;;;9013:18;;:::i;:::-;8945:88;9053:10;9049:2;9042:22;8832:238;8789:281;;:::o;9076:129::-;9110:6;9137:20;;:::i;:::-;9127:30;;9166:33;9194:4;9186:6;9166:33;:::i;:::-;9076:129;;;:::o;9211:340::-;9317:4;9407:18;9399:6;9396:30;9393:56;;;9429:18;;:::i;:::-;9393:56;9479:4;9471:6;9467:17;9459:25;;9539:4;9533;9529:15;9521:23;;9211:340;;;:::o;9557:117::-;9666:1;9663;9656:12;9843:578;9921:5;9965:4;9953:9;9948:3;9944:19;9940:30;9937:117;;;9973:79;;:::i;:::-;9937:117;10072:21;10088:4;10072:21;:::i;:::-;10063:30;;10152:1;10192:49;10237:3;10228:6;10217:9;10213:22;10192:49;:::i;:::-;10185:4;10178:5;10174:16;10167:75;10103:150;10312:2;10353:49;10398:3;10389:6;10378:9;10374:22;10353:49;:::i;:::-;10346:4;10339:5;10335:16;10328:75;10263:151;9843:578;;;;:::o;10469:797::-;10594:5;10619:110;10635:93;10721:6;10635:93;:::i;:::-;10619:110;:::i;:::-;10610:119;;10749:5;10778:6;10771:5;10764:21;10812:4;10805:5;10801:16;10794:23;;10865:4;10857:6;10853:17;10845:6;10841:30;10894:3;10886:6;10883:15;10880:122;;;10913:79;;:::i;:::-;10880:122;11028:6;11011:249;11045:6;11040:3;11037:15;11011:249;;;11120:3;11149:66;11211:3;11199:10;11149:66;:::i;:::-;11144:3;11137:79;11245:4;11240:3;11236:14;11229:21;;11087:173;11071:4;11066:3;11062:14;11055:21;;11011:249;;;11015:21;10600:666;;10469:797;;;;;:::o;11314:428::-;11414:5;11463:3;11456:4;11448:6;11444:17;11440:27;11430:122;;11471:79;;:::i;:::-;11430:122;11588:6;11575:20;11613:123;11732:3;11724:6;11717:4;11709:6;11705:17;11613:123;:::i;:::-;11604:132;;11420:322;11314:428;;;;:::o;11748:742::-;11870:6;11878;11927:2;11915:9;11906:7;11902:23;11898:32;11895:119;;;11933:79;;:::i;:::-;11895:119;12053:1;12078:53;12123:7;12114:6;12103:9;12099:22;12078:53;:::i;:::-;12068:63;;12024:117;12208:2;12197:9;12193:18;12180:32;12239:18;12231:6;12228:30;12225:117;;;12261:79;;:::i;:::-;12225:117;12366:107;12465:7;12456:6;12445:9;12441:22;12366:107;:::i;:::-;12356:117;;12151:332;11748:742;;;;;:::o;12496:98::-;12547:6;12581:5;12575:12;12565:22;;12496:98;;;:::o;12600:168::-;12683:11;12717:6;12712:3;12705:19;12757:4;12752:3;12748:14;12733:29;;12600:168;;;;:::o;12774:246::-;12855:1;12865:113;12879:6;12876:1;12873:13;12865:113;;;12964:1;12959:3;12955:11;12949:18;12945:1;12940:3;12936:11;12929:39;12901:2;12898:1;12894:10;12889:15;;12865:113;;;13012:1;13003:6;12998:3;12994:16;12987:27;12836:184;12774:246;;;:::o;13026:373::-;13112:3;13140:38;13172:5;13140:38;:::i;:::-;13194:70;13257:6;13252:3;13194:70;:::i;:::-;13187:77;;13273:65;13331:6;13326:3;13319:4;13312:5;13308:16;13273:65;:::i;:::-;13363:29;13385:6;13363:29;:::i;:::-;13358:3;13354:39;13347:46;;13116:283;13026:373;;;;:::o;13405:309::-;13516:4;13554:2;13543:9;13539:18;13531:26;;13603:9;13597:4;13593:20;13589:1;13578:9;13574:17;13567:47;13631:76;13702:4;13693:6;13631:76;:::i;:::-;13623:84;;13405:309;;;;:::o;13720:90::-;13754:7;13797:5;13790:13;13783:21;13772:32;;13720:90;;;:::o;13816:109::-;13897:21;13912:5;13897:21;:::i;:::-;13892:3;13885:34;13816:109;;:::o;13931:210::-;14018:4;14056:2;14045:9;14041:18;14033:26;;14069:65;14131:1;14120:9;14116:17;14107:6;14069:65;:::i;:::-;13931:210;;;;:::o;14147:329::-;14206:6;14255:2;14243:9;14234:7;14230:23;14226:32;14223:119;;;14261:79;;:::i;:::-;14223:119;14381:1;14406:53;14451:7;14442:6;14431:9;14427:22;14406:53;:::i;:::-;14396:63;;14352:117;14147:329;;;;:::o;14482:108::-;14559:24;14577:5;14559:24;:::i;:::-;14554:3;14547:37;14482:108;;:::o;14596:::-;14673:24;14691:5;14673:24;:::i;:::-;14668:3;14661:37;14596:108;;:::o;14710:105::-;14785:23;14802:5;14785:23;:::i;:::-;14780:3;14773:36;14710:105;;:::o;14821:99::-;14892:21;14907:5;14892:21;:::i;:::-;14887:3;14880:34;14821:99;;:::o;14982:1948::-;15125:6;15120:3;15116:16;15216:4;15209:5;15205:16;15199:23;15235:63;15292:4;15287:3;15283:14;15269:12;15235:63;:::i;:::-;15142:166;15391:4;15384:5;15380:16;15374:23;15410:63;15467:4;15462:3;15458:14;15444:12;15410:63;:::i;:::-;15318:165;15579:4;15572:5;15568:16;15562:23;15598:63;15655:4;15650:3;15646:14;15632:12;15598:63;:::i;:::-;15493:178;15758:4;15751:5;15747:16;15741:23;15777:63;15834:4;15829:3;15825:14;15811:12;15777:63;:::i;:::-;15681:169;15939:4;15932:5;15928:16;15922:23;15958:63;16015:4;16010:3;16006:14;15992:12;15958:63;:::i;:::-;15860:171;16113:4;16106:5;16102:16;16096:23;16132:61;16187:4;16182:3;16178:14;16164:12;16132:61;:::i;:::-;16041:162;16292:4;16285:5;16281:16;16275:23;16311:57;16362:4;16357:3;16353:14;16339:12;16311:57;:::i;:::-;16213:165;16469:4;16462:5;16458:16;16452:23;16488:63;16545:4;16540:3;16536:14;16522:12;16488:63;:::i;:::-;16388:173;16649:6;16642:5;16638:18;16632:25;16670:63;16725:6;16720:3;16716:16;16702:12;16670:63;:::i;:::-;16571:172;16827:6;16820:5;16816:18;16810:25;16848:65;16905:6;16900:3;16896:16;16882:12;16848:65;:::i;:::-;16753:170;15094:1836;14982:1948;;:::o;16936:315::-;17075:4;17113:3;17102:9;17098:19;17090:27;;17127:117;17241:1;17230:9;17226:17;17217:6;17127:117;:::i;:::-;16936:315;;;;:::o;17257:474::-;17325:6;17333;17382:2;17370:9;17361:7;17357:23;17353:32;17350:119;;;17388:79;;:::i;:::-;17350:119;17508:1;17533:53;17578:7;17569:6;17558:9;17554:22;17533:53;:::i;:::-;17523:63;;17479:117;17635:2;17661:53;17706:7;17697:6;17686:9;17682:22;17661:53;:::i;:::-;17651:63;;17606:118;17257:474;;;;;:::o;17737:101::-;17773:7;17813:18;17806:5;17802:30;17791:41;;17737:101;;;:::o;17844:120::-;17916:23;17933:5;17916:23;:::i;:::-;17909:5;17906:34;17896:62;;17954:1;17951;17944:12;17896:62;17844:120;:::o;17970:137::-;18015:5;18053:6;18040:20;18031:29;;18069:32;18095:5;18069:32;:::i;:::-;17970:137;;;;:::o;18113:327::-;18171:6;18220:2;18208:9;18199:7;18195:23;18191:32;18188:119;;;18226:79;;:::i;:::-;18188:119;18346:1;18371:52;18415:7;18406:6;18395:9;18391:22;18371:52;:::i;:::-;18361:62;;18317:116;18113:327;;;;:::o;18446:118::-;18533:24;18551:5;18533:24;:::i;:::-;18528:3;18521:37;18446:118;;:::o;18570:222::-;18663:4;18701:2;18690:9;18686:18;18678:26;;18714:71;18782:1;18771:9;18767:17;18758:6;18714:71;:::i;:::-;18570:222;;;;:::o;18798:909::-;18892:6;18900;18908;18916;18924;18973:3;18961:9;18952:7;18948:23;18944:33;18941:120;;;18980:79;;:::i;:::-;18941:120;19100:1;19125:53;19170:7;19161:6;19150:9;19146:22;19125:53;:::i;:::-;19115:63;;19071:117;19227:2;19253:53;19298:7;19289:6;19278:9;19274:22;19253:53;:::i;:::-;19243:63;;19198:118;19355:2;19381:53;19426:7;19417:6;19406:9;19402:22;19381:53;:::i;:::-;19371:63;;19326:118;19483:2;19509:53;19554:7;19545:6;19534:9;19530:22;19509:53;:::i;:::-;19499:63;;19454:118;19611:3;19638:52;19682:7;19673:6;19662:9;19658:22;19638:52;:::i;:::-;19628:62;;19582:118;18798:909;;;;;;;;:::o;19713:332::-;19834:4;19872:2;19861:9;19857:18;19849:26;;19885:71;19953:1;19942:9;19938:17;19929:6;19885:71;:::i;:::-;19966:72;20034:2;20023:9;20019:18;20010:6;19966:72;:::i;:::-;19713:332;;;;;:::o;20051:116::-;20121:21;20136:5;20121:21;:::i;:::-;20114:5;20111:32;20101:60;;20157:1;20154;20147:12;20101:60;20051:116;:::o;20173:133::-;20216:5;20254:6;20241:20;20232:29;;20270:30;20294:5;20270:30;:::i;:::-;20173:133;;;;:::o;20312:613::-;20386:6;20394;20402;20451:2;20439:9;20430:7;20426:23;20422:32;20419:119;;;20457:79;;:::i;:::-;20419:119;20577:1;20602:53;20647:7;20638:6;20627:9;20623:22;20602:53;:::i;:::-;20592:63;;20548:117;20704:2;20730:53;20775:7;20766:6;20755:9;20751:22;20730:53;:::i;:::-;20720:63;;20675:118;20832:2;20858:50;20900:7;20891:6;20880:9;20876:22;20858:50;:::i;:::-;20848:60;;20803:115;20312:613;;;;;:::o;20931:115::-;21016:23;21033:5;21016:23;:::i;:::-;21011:3;21004:36;20931:115;;:::o;21052:118::-;21139:24;21157:5;21139:24;:::i;:::-;21134:3;21127:37;21052:118;;:::o;21176:328::-;21295:4;21333:2;21322:9;21318:18;21310:26;;21346:69;21412:1;21401:9;21397:17;21388:6;21346:69;:::i;:::-;21425:72;21493:2;21482:9;21478:18;21469:6;21425:72;:::i;:::-;21176:328;;;;;:::o;21598:531::-;21765:4;21760:3;21756:14;21852:4;21845:5;21841:16;21835:23;21871:63;21928:4;21923:3;21919:14;21905:12;21871:63;:::i;:::-;21780:164;22030:4;22023:5;22019:16;22013:23;22049:63;22106:4;22101:3;22097:14;22083:12;22049:63;:::i;:::-;21954:168;21734:395;21598:531;;:::o;22135:362::-;22298:4;22336:2;22325:9;22321:18;22313:26;;22349:141;22487:1;22476:9;22472:17;22463:6;22349:141;:::i;:::-;22135:362;;;;:::o;22516:552::-;22573:8;22583:6;22633:3;22626:4;22618:6;22614:17;22610:27;22600:122;;22641:79;;:::i;:::-;22600:122;22754:6;22741:20;22731:30;;22784:18;22776:6;22773:30;22770:117;;;22806:79;;:::i;:::-;22770:117;22920:4;22912:6;22908:17;22896:29;;22974:3;22966:4;22958:6;22954:17;22944:8;22940:32;22937:41;22934:128;;;22981:79;;:::i;:::-;22934:128;22516:552;;;;;:::o;23074:527::-;23144:6;23152;23201:2;23189:9;23180:7;23176:23;23172:32;23169:119;;;23207:79;;:::i;:::-;23169:119;23355:1;23344:9;23340:17;23327:31;23385:18;23377:6;23374:30;23371:117;;;23407:79;;:::i;:::-;23371:117;23520:64;23576:7;23567:6;23556:9;23552:22;23520:64;:::i;:::-;23502:82;;;;23298:296;23074:527;;;;;:::o;23607:619::-;23684:6;23692;23700;23749:2;23737:9;23728:7;23724:23;23720:32;23717:119;;;23755:79;;:::i;:::-;23717:119;23875:1;23900:53;23945:7;23936:6;23925:9;23921:22;23900:53;:::i;:::-;23890:63;;23846:117;24002:2;24028:53;24073:7;24064:6;24053:9;24049:22;24028:53;:::i;:::-;24018:63;;23973:118;24130:2;24156:53;24201:7;24192:6;24181:9;24177:22;24156:53;:::i;:::-;24146:63;;24101:118;23607:619;;;;;:::o;24232:180::-;24280:77;24277:1;24270:88;24377:4;24374:1;24367:15;24401:4;24398:1;24391:15;24418:169;24502:11;24536:6;24531:3;24524:19;24576:4;24571:3;24567:14;24552:29;;24418:169;;;;:::o;24593:168::-;24733:20;24729:1;24721:6;24717:14;24710:44;24593:168;:::o;24767:366::-;24909:3;24930:67;24994:2;24989:3;24930:67;:::i;:::-;24923:74;;25006:93;25095:3;25006:93;:::i;:::-;25124:2;25119:3;25115:12;25108:19;;24767:366;;;:::o;25139:419::-;25305:4;25343:2;25332:9;25328:18;25320:26;;25392:9;25386:4;25382:20;25378:1;25367:9;25363:17;25356:47;25420:131;25546:4;25420:131;:::i;:::-;25412:139;;25139:419;;;:::o;25564:180::-;25612:77;25609:1;25602:88;25709:4;25706:1;25699:15;25733:4;25730:1;25723:15;25750:191;25790:3;25809:20;25827:1;25809:20;:::i;:::-;25804:25;;25843:20;25861:1;25843:20;:::i;:::-;25838:25;;25886:1;25883;25879:9;25872:16;;25907:3;25904:1;25901:10;25898:36;;;25914:18;;:::i;:::-;25898:36;25750:191;;;;:::o;25947:442::-;26096:4;26134:2;26123:9;26119:18;26111:26;;26147:71;26215:1;26204:9;26200:17;26191:6;26147:71;:::i;:::-;26228:72;26296:2;26285:9;26281:18;26272:6;26228:72;:::i;:::-;26310;26378:2;26367:9;26363:18;26354:6;26310:72;:::i;:::-;25947:442;;;;;;:::o;26395:137::-;26449:5;26480:6;26474:13;26465:22;;26496:30;26520:5;26496:30;:::i;:::-;26395:137;;;;:::o;26538:345::-;26605:6;26654:2;26642:9;26633:7;26629:23;26625:32;26622:119;;;26660:79;;:::i;:::-;26622:119;26780:1;26805:61;26858:7;26849:6;26838:9;26834:22;26805:61;:::i;:::-;26795:71;;26751:125;26538:345;;;;:::o;26889:233::-;26928:3;26951:24;26969:5;26951:24;:::i;:::-;26942:33;;26997:66;26990:5;26987:77;26984:103;;27067:18;;:::i;:::-;26984:103;27114:1;27107:5;27103:13;27096:20;;26889:233;;;:::o;27128:332::-;27249:4;27287:2;27276:9;27272:18;27264:26;;27300:71;27368:1;27357:9;27353:17;27344:6;27300:71;:::i;:::-;27381:72;27449:2;27438:9;27434:18;27425:6;27381:72;:::i;:::-;27128:332;;;;;:::o;27466:410::-;27506:7;27529:20;27547:1;27529:20;:::i;:::-;27524:25;;27563:20;27581:1;27563:20;:::i;:::-;27558:25;;27618:1;27615;27611:9;27640:30;27658:11;27640:30;:::i;:::-;27629:41;;27819:1;27810:7;27806:15;27803:1;27800:22;27780:1;27773:9;27753:83;27730:139;;27849:18;;:::i;:::-;27730:139;27514:362;27466:410;;;;:::o;27882:180::-;27930:77;27927:1;27920:88;28027:4;28024:1;28017:15;28051:4;28048:1;28041:15;28068:185;28108:1;28125:20;28143:1;28125:20;:::i;:::-;28120:25;;28159:20;28177:1;28159:20;:::i;:::-;28154:25;;28198:1;28188:35;;28203:18;;:::i;:::-;28188:35;28245:1;28242;28238:9;28233:14;;28068:185;;;;:::o;28259:194::-;28299:4;28319:20;28337:1;28319:20;:::i;:::-;28314:25;;28353:20;28371:1;28353:20;:::i;:::-;28348:25;;28397:1;28394;28390:9;28382:17;;28421:1;28415:4;28412:11;28409:37;;;28426:18;;:::i;:::-;28409:37;28259:194;;;;:::o;28459:60::-;28487:3;28508:5;28501:12;;28459:60;;;:::o;28525:140::-;28574:9;28607:52;28625:33;28634:23;28651:5;28634:23;:::i;:::-;28625:33;:::i;:::-;28607:52;:::i;:::-;28594:65;;28525:140;;;:::o;28671:129::-;28757:36;28787:5;28757:36;:::i;:::-;28752:3;28745:49;28671:129;;:::o;28806:146::-;28903:6;28898:3;28893;28880:30;28944:1;28935:6;28930:3;28926:16;28919:27;28806:146;;;:::o;28982:317::-;29080:3;29101:71;29165:6;29160:3;29101:71;:::i;:::-;29094:78;;29182:56;29231:6;29226:3;29219:5;29182:56;:::i;:::-;29263:29;29285:6;29263:29;:::i;:::-;29258:3;29254:39;29247:46;;28982:317;;;;;:::o;29305:773::-;29539:4;29577:3;29566:9;29562:19;29554:27;;29591:71;29659:1;29648:9;29644:17;29635:6;29591:71;:::i;:::-;29672;29739:2;29728:9;29724:18;29715:6;29672:71;:::i;:::-;29753:72;29821:2;29810:9;29806:18;29797:6;29753:72;:::i;:::-;29835;29903:2;29892:9;29888:18;29879:6;29835:72;:::i;:::-;29955:9;29949:4;29945:20;29939:3;29928:9;29924:19;29917:49;29983:88;30066:4;30057:6;30049;29983:88;:::i;:::-;29975:96;;29305:773;;;;;;;;;:::o;30084:180::-;30132:77;30129:1;30122:88;30229:4;30226:1;30219:15;30253:4;30250:1;30243:15;30270:320;30314:6;30351:1;30345:4;30341:12;30331:22;;30398:1;30392:4;30388:12;30419:18;30409:81;;30475:4;30467:6;30463:17;30453:27;;30409:81;30537:2;30529:6;30526:14;30506:18;30503:38;30500:84;;30556:18;;:::i;:::-;30500:84;30321:269;30270:320;;;:::o;30596:172::-;30736:24;30732:1;30724:6;30720:14;30713:48;30596:172;:::o;30774:366::-;30916:3;30937:67;31001:2;30996:3;30937:67;:::i;:::-;30930:74;;31013:93;31102:3;31013:93;:::i;:::-;31131:2;31126:3;31122:12;31115:19;;30774:366;;;:::o;31146:419::-;31312:4;31350:2;31339:9;31335:18;31327:26;;31399:9;31393:4;31389:20;31385:1;31374:9;31370:17;31363:47;31427:131;31553:4;31427:131;:::i;:::-;31419:139;;31146:419;;;:::o;31571:233::-;31711:34;31707:1;31699:6;31695:14;31688:58;31780:16;31775:2;31767:6;31763:15;31756:41;31571:233;:::o;31810:366::-;31952:3;31973:67;32037:2;32032:3;31973:67;:::i;:::-;31966:74;;32049:93;32138:3;32049:93;:::i;:::-;32167:2;32162:3;32158:12;32151:19;;31810:366;;;:::o;32182:419::-;32348:4;32386:2;32375:9;32371:18;32363:26;;32435:9;32429:4;32425:20;32421:1;32410:9;32406:17;32399:47;32463:131;32589:4;32463:131;:::i;:::-;32455:139;;32182:419;;;:::o;32607:85::-;32652:7;32681:5;32670:16;;32607:85;;;:::o;32698:86::-;32733:7;32773:4;32766:5;32762:16;32751:27;;32698:86;;;:::o;32790:154::-;32846:9;32879:59;32895:42;32904:32;32930:5;32904:32;:::i;:::-;32895:42;:::i;:::-;32879:59;:::i;:::-;32866:72;;32790:154;;;:::o;32950:143::-;33043:43;33080:5;33043:43;:::i;:::-;33038:3;33031:56;32950:143;;:::o;33099:234::-;33198:4;33236:2;33225:9;33221:18;33213:26;;33249:77;33323:1;33312:9;33308:17;33299:6;33249:77;:::i;:::-;33099:234;;;;:::o;33339:218::-;33430:4;33468:2;33457:9;33453:18;33445:26;;33481:69;33547:1;33536:9;33532:17;33523:6;33481:69;:::i;:::-;33339:218;;;;:::o;33563:164::-;33703:16;33699:1;33691:6;33687:14;33680:40;33563:164;:::o;33733:366::-;33875:3;33896:67;33960:2;33955:3;33896:67;:::i;:::-;33889:74;;33972:93;34061:3;33972:93;:::i;:::-;34090:2;34085:3;34081:12;34074:19;;33733:366;;;:::o;34105:419::-;34271:4;34309:2;34298:9;34294:18;34286:26;;34358:9;34352:4;34348:20;34344:1;34333:9;34329:17;34322:47;34386:131;34512:4;34386:131;:::i;:::-;34378:139;;34105:419;;;:::o;34530:164::-;34670:16;34666:1;34658:6;34654:14;34647:40;34530:164;:::o;34700:366::-;34842:3;34863:67;34927:2;34922:3;34863:67;:::i;:::-;34856:74;;34939:93;35028:3;34939:93;:::i;:::-;35057:2;35052:3;35048:12;35041:19;;34700:366;;;:::o;35072:419::-;35238:4;35276:2;35265:9;35261:18;35253:26;;35325:9;35319:4;35315:20;35311:1;35300:9;35296:17;35289:47;35353:131;35479:4;35353:131;:::i;:::-;35345:139;;35072:419;;;:::o;35497:216::-;35536:4;35556:19;35573:1;35556:19;:::i;:::-;35551:24;;35589:19;35606:1;35589:19;:::i;:::-;35584:24;;35632:1;35629;35625:9;35617:17;;35656:26;35650:4;35647:36;35644:62;;;35686:18;;:::i;:::-;35644:62;35497:216;;;;:::o;35719:138::-;35767:9;35800:51;35817:33;35826:23;35843:5;35826:23;:::i;:::-;35817:33;:::i;:::-;35800:51;:::i;:::-;35787:64;;35719:138;;;:::o;35863:127::-;35948:35;35977:5;35948:35;:::i;:::-;35943:3;35936:48;35863:127;;:::o;35996:438::-;36143:4;36181:2;36170:9;36166:18;36158:26;;36194:71;36262:1;36251:9;36247:17;36238:6;36194:71;:::i;:::-;36275:72;36343:2;36332:9;36328:18;36319:6;36275:72;:::i;:::-;36357:70;36423:2;36412:9;36408:18;36399:6;36357:70;:::i;:::-;35996:438;;;;;;:::o;36440:430::-;36583:4;36621:2;36610:9;36606:18;36598:26;;36634:71;36702:1;36691:9;36687:17;36678:6;36634:71;:::i;:::-;36715:72;36783:2;36772:9;36768:18;36759:6;36715:72;:::i;:::-;36797:66;36859:2;36848:9;36844:18;36835:6;36797:66;:::i;:::-;36440:430;;;;;;:::o;36876:96::-;36934:6;36962:3;36952:13;;36876:96;;;;:::o;36978:140::-;37026:4;37049:3;37041:11;;37072:3;37069:1;37062:14;37106:4;37103:1;37093:18;37085:26;;36978:140;;;:::o;37124:93::-;37161:6;37208:2;37203;37196:5;37192:14;37188:23;37178:33;;37124:93;;;:::o;37223:107::-;37267:8;37317:5;37311:4;37307:16;37286:37;;37223:107;;;;:::o;37336:393::-;37405:6;37455:1;37443:10;37439:18;37478:97;37508:66;37497:9;37478:97;:::i;:::-;37596:39;37626:8;37615:9;37596:39;:::i;:::-;37584:51;;37668:4;37664:9;37657:5;37653:21;37644:30;;37717:4;37707:8;37703:19;37696:5;37693:30;37683:40;;37412:317;;37336:393;;;;;:::o;37735:142::-;37785:9;37818:53;37836:34;37845:24;37863:5;37845:24;:::i;:::-;37836:34;:::i;:::-;37818:53;:::i;:::-;37805:66;;37735:142;;;:::o;37883:75::-;37926:3;37947:5;37940:12;;37883:75;;;:::o;37964:269::-;38074:39;38105:7;38074:39;:::i;:::-;38135:91;38184:41;38208:16;38184:41;:::i;:::-;38176:6;38169:4;38163:11;38135:91;:::i;:::-;38129:4;38122:105;38040:193;37964:269;;;:::o;38239:73::-;38284:3;38239:73;:::o;38318:189::-;38395:32;;:::i;:::-;38436:65;38494:6;38486;38480:4;38436:65;:::i;:::-;38371:136;38318:189;;:::o;38513:186::-;38573:120;38590:3;38583:5;38580:14;38573:120;;;38644:39;38681:1;38674:5;38644:39;:::i;:::-;38617:1;38610:5;38606:13;38597:22;;38573:120;;;38513:186;;:::o;38705:541::-;38805:2;38800:3;38797:11;38794:445;;;38839:37;38870:5;38839:37;:::i;:::-;38922:29;38940:10;38922:29;:::i;:::-;38912:8;38908:44;39105:2;39093:10;39090:18;39087:49;;;39126:8;39111:23;;39087:49;39149:80;39205:22;39223:3;39205:22;:::i;:::-;39195:8;39191:37;39178:11;39149:80;:::i;:::-;38809:430;;38794:445;38705:541;;;:::o;39252:117::-;39306:8;39356:5;39350:4;39346:16;39325:37;;39252:117;;;;:::o;39375:169::-;39419:6;39452:51;39500:1;39496:6;39488:5;39485:1;39481:13;39452:51;:::i;:::-;39448:56;39533:4;39527;39523:15;39513:25;;39426:118;39375:169;;;;:::o;39549:295::-;39625:4;39771:29;39796:3;39790:4;39771:29;:::i;:::-;39763:37;;39833:3;39830:1;39826:11;39820:4;39817:21;39809:29;;39549:295;;;;:::o;39849:1398::-;39971:43;40010:3;40005;39971:43;:::i;:::-;40079:18;40071:6;40068:30;40065:56;;;40101:18;;:::i;:::-;40065:56;40145:38;40177:4;40171:11;40145:38;:::i;:::-;40230:66;40289:6;40281;40275:4;40230:66;:::i;:::-;40323:1;40352:2;40344:6;40341:14;40369:1;40364:631;;;;41039:1;41056:6;41053:84;;;41112:9;41107:3;41103:19;41090:33;41081:42;;41053:84;41163:67;41223:6;41216:5;41163:67;:::i;:::-;41157:4;41150:81;41012:229;40334:907;;40364:631;40416:4;40412:9;40404:6;40400:22;40450:36;40481:4;40450:36;:::i;:::-;40508:1;40522:215;40536:7;40533:1;40530:14;40522:215;;;40622:9;40617:3;40613:19;40600:33;40592:6;40585:49;40673:1;40665:6;40661:14;40651:24;;40720:2;40709:9;40705:18;40692:31;;40559:4;40556:1;40552:12;40547:17;;40522:215;;;40765:6;40756:7;40753:19;40750:186;;;40830:9;40825:3;40821:19;40808:33;40873:48;40915:4;40907:6;40903:17;40892:9;40873:48;:::i;:::-;40865:6;40858:64;40773:163;40750:186;40982:1;40978;40970:6;40966:14;40962:22;40956:4;40949:36;40371:624;;;40334:907;;39946:1301;;;39849:1398;;;:::o;41275:314::-;41371:3;41392:70;41455:6;41450:3;41392:70;:::i;:::-;41385:77;;41472:56;41521:6;41516:3;41509:5;41472:56;:::i;:::-;41553:29;41575:6;41553:29;:::i;:::-;41548:3;41544:39;41537:46;;41275:314;;;;;:::o;41595:329::-;41716:4;41754:2;41743:9;41739:18;41731:26;;41803:9;41797:4;41793:20;41789:1;41778:9;41774:17;41767:47;41831:86;41912:4;41903:6;41895;41831:86;:::i;:::-;41823:94;;41595:329;;;;;:::o;41930:332::-;42051:4;42089:2;42078:9;42074:18;42066:26;;42102:71;42170:1;42159:9;42155:17;42146:6;42102:71;:::i;:::-;42183:72;42251:2;42240:9;42236:18;42227:6;42183:72;:::i;:::-;41930:332;;;;;:::o;42268:225::-;42408:34;42404:1;42396:6;42392:14;42385:58;42477:8;42472:2;42464:6;42460:15;42453:33;42268:225;:::o;42499:366::-;42641:3;42662:67;42726:2;42721:3;42662:67;:::i;:::-;42655:74;;42738:93;42827:3;42738:93;:::i;:::-;42856:2;42851:3;42847:12;42840:19;;42499:366;;;:::o;42871:419::-;43037:4;43075:2;43064:9;43060:18;43052:26;;43124:9;43118:4;43114:20;43110:1;43099:9;43095:17;43088:47;43152:131;43278:4;43152:131;:::i;:::-;43144:139;;42871:419;;;:::o;43296:166::-;43436:18;43432:1;43424:6;43420:14;43413:42;43296:166;:::o;43468:366::-;43610:3;43631:67;43695:2;43690:3;43631:67;:::i;:::-;43624:74;;43707:93;43796:3;43707:93;:::i;:::-;43825:2;43820:3;43816:12;43809:19;;43468:366;;;:::o;43840:419::-;44006:4;44044:2;44033:9;44029:18;44021:26;;44093:9;44087:4;44083:20;44079:1;44068:9;44064:17;44057:47;44121:131;44247:4;44121:131;:::i;:::-;44113:139;;43840:419;;;:::o;44265:167::-;44405:19;44401:1;44393:6;44389:14;44382:43;44265:167;:::o;44438:366::-;44580:3;44601:67;44665:2;44660:3;44601:67;:::i;:::-;44594:74;;44677:93;44766:3;44677:93;:::i;:::-;44795:2;44790:3;44786:12;44779:19;;44438:366;;;:::o;44810:419::-;44976:4;45014:2;45003:9;44999:18;44991:26;;45063:9;45057:4;45053:20;45049:1;45038:9;45034:17;45027:47;45091:131;45217:4;45091:131;:::i;:::-;45083:139;;44810:419;;;:::o;45235:162::-;45375:14;45371:1;45363:6;45359:14;45352:38;45235:162;:::o;45403:366::-;45545:3;45566:67;45630:2;45625:3;45566:67;:::i;:::-;45559:74;;45642:93;45731:3;45642:93;:::i;:::-;45760:2;45755:3;45751:12;45744:19;;45403:366;;;:::o;45775:419::-;45941:4;45979:2;45968:9;45964:18;45956:26;;46028:9;46022:4;46018:20;46014:1;46003:9;45999:17;45992:47;46056:131;46182:4;46056:131;:::i;:::-;46048:139;;45775:419;;;:::o;46200:166::-;46340:18;46336:1;46328:6;46324:14;46317:42;46200:166;:::o;46372:366::-;46514:3;46535:67;46599:2;46594:3;46535:67;:::i;:::-;46528:74;;46611:93;46700:3;46611:93;:::i;:::-;46729:2;46724:3;46720:12;46713:19;;46372:366;;;:::o;46744:419::-;46910:4;46948:2;46937:9;46933:18;46925:26;;46997:9;46991:4;46987:20;46983:1;46972:9;46968:17;46961:47;47025:131;47151:4;47025:131;:::i;:::-;47017:139;;46744:419;;;:::o;47169:172::-;47309:24;47305:1;47297:6;47293:14;47286:48;47169:172;:::o;47347:366::-;47489:3;47510:67;47574:2;47569:3;47510:67;:::i;:::-;47503:74;;47586:93;47675:3;47586:93;:::i;:::-;47704:2;47699:3;47695:12;47688:19;;47347:366;;;:::o;47719:419::-;47885:4;47923:2;47912:9;47908:18;47900:26;;47972:9;47966:4;47962:20;47958:1;47947:9;47943:17;47936:47;48000:131;48126:4;48000:131;:::i;:::-;47992:139;;47719:419;;;:::o;48144:175::-;48284:27;48280:1;48272:6;48268:14;48261:51;48144:175;:::o;48325:366::-;48467:3;48488:67;48552:2;48547:3;48488:67;:::i;:::-;48481:74;;48564:93;48653:3;48564:93;:::i;:::-;48682:2;48677:3;48673:12;48666:19;;48325:366;;;:::o;48697:419::-;48863:4;48901:2;48890:9;48886:18;48878:26;;48950:9;48944:4;48940:20;48936:1;48925:9;48921:17;48914:47;48978:131;49104:4;48978:131;:::i;:::-;48970:139;;48697:419;;;:::o;49122:182::-;49262:34;49258:1;49250:6;49246:14;49239:58;49122:182;:::o;49310:366::-;49452:3;49473:67;49537:2;49532:3;49473:67;:::i;:::-;49466:74;;49549:93;49638:3;49549:93;:::i;:::-;49667:2;49662:3;49658:12;49651:19;;49310:366;;;:::o;49682:419::-;49848:4;49886:2;49875:9;49871:18;49863:26;;49935:9;49929:4;49925:20;49921:1;49910:9;49906:17;49899:47;49963:131;50089:4;49963:131;:::i;:::-;49955:139;;49682:419;;;:::o;50107:230::-;50247:34;50243:1;50235:6;50231:14;50224:58;50316:13;50311:2;50303:6;50299:15;50292:38;50107:230;:::o;50343:366::-;50485:3;50506:67;50570:2;50565:3;50506:67;:::i;:::-;50499:74;;50582:93;50671:3;50582:93;:::i;:::-;50700:2;50695:3;50691:12;50684:19;;50343:366;;;:::o;50715:419::-;50881:4;50919:2;50908:9;50904:18;50896:26;;50968:9;50962:4;50958:20;50954:1;50943:9;50939:17;50932:47;50996:131;51122:4;50996:131;:::i;:::-;50988:139;;50715:419;;;:::o;51140:170::-;51280:22;51276:1;51268:6;51264:14;51257:46;51140:170;:::o;51316:366::-;51458:3;51479:67;51543:2;51538:3;51479:67;:::i;:::-;51472:74;;51555:93;51644:3;51555:93;:::i;:::-;51673:2;51668:3;51664:12;51657:19;;51316:366;;;:::o;51688:419::-;51854:4;51892:2;51881:9;51877:18;51869:26;;51941:9;51935:4;51931:20;51927:1;51916:9;51912:17;51905:47;51969:131;52095:4;51969:131;:::i;:::-;51961:139;;51688:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3252400","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"infinite","getAggregator()":"infinite","getFeeDetails()":"4737","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionByCode(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","initialize()":"166985","isTokenSupported(address)":"2950","owner()":"2611","pause()":"infinite","paused()":"2502","refund(uint256,bytes32,bytes32)":"infinite","renounceOwnership()":"30443","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,bytes32,bytes32,address,uint64)":"infinite","transferOwnership(address)":"30876","unpause()":"infinite","updateProtocolAddresses(bytes32,address)":"infinite","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"},"internal":{"_handler(address,uint256,address,address,uint256,bytes32)":"infinite","_transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionByCode(bytes32)":"c2280103","getSupportedInstitutions(bytes32)":"02621338","initialize()":"8129fc1c","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","refund(uint256,bytes32,bytes32)":"d28a8d32","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,bytes32,bytes32,address,uint64)":"9015dced","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionByCode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Paycrest contract for handling orders and settlements.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OrderCreated(address,uint256,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when a deposit is made.\",\"params\":{\"amount\":\"The amount of the deposit.\",\"institutionCode\":\"The code of the institution.\",\"label\":\"The label of the deposit.\",\"messageHash\":\"The hash of the message.\",\"orderId\":\"The ID of the order.\",\"rate\":\"The rate at which the deposit is made.\",\"token\":\"The address of the deposited token.\"}},\"OrderRefunded(uint256,bytes32,bytes32)\":{\"details\":\"Emitted when an aggregator refunds a transaction.\",\"params\":{\"fee\":\"The fee deducted from the refund amount.\",\"label\":\"The label of the transaction.\",\"orderId\":\"The ID of the order.\"}},\"OrderSettled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when an aggregator settles a transaction.\",\"params\":{\"label\":\"The label of the transaction.\",\"liquidityProvider\":\"The address of the liquidity provider.\",\"orderId\":\"The ID of the order.\",\"settlePercent\":\"The percentage at which the transaction is settled.\",\"splitOrderId\":\"The ID of the split order.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"SenderFeeTransferred(address,uint256)\":{\"details\":\"Emitted when the sender's fee is transferred.\",\"params\":{\"amount\":\"The amount of the fee transferred.\",\"sender\":\"The address of the sender.\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getAggregator()\":{\"details\":\"See {getAggregator-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionByCode(bytes32)\":{\"details\":\"See {getSupportedInstitutionByCode-IPaycrest}. \"},\"getSupportedInstitutions(bytes32)\":{\"details\":\"See {getSupportedInstitutions-IPaycrest}. \"},\"initialize()\":{\"details\":\"Initialize function.\"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the contract.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refund(uint256,bytes32,bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setSupportedInstitutions(bytes32,(bytes32,bytes32)[])\":{\"details\":\"Sets the supported institutions for a specific currency.\",\"params\":{\"currency\":\"The currency for which the institutions are being set.\",\"institutions\":\"The array of institutions to be set.\"}},\"settingManagerBool(bytes32,address,bool)\":{\"details\":\"Sets the boolean value for a specific setting.\",\"params\":{\"status\":\"The boolean value to be set. Requirements: - The value must not be a zero address.\",\"value\":\"The address or value associated with the setting.\",\"what\":\"The setting to be updated.\"}},\"settle(bytes32,bytes32,bytes32,address,uint64)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the contract.\"},\"updateProtocolAddresses(bytes32,address)\":{\"details\":\"Updates the protocol addresses.\",\"params\":{\"value\":\"The new address to be set. Requirements: - The value must not be a zero address.\",\"what\":\"The address type to be updated (treasury or aggregator).\"}},\"updateProtocolAggregator(bytes)\":{\"details\":\"Updates the protocol aggregator.\",\"params\":{\"aggregator\":\"The new aggregator to be set.\"}},\"updateProtocolFees(uint64)\":{\"details\":\"Updates the protocol fees percentage.\",\"params\":{\"_protocolFeePercent\":\"The new protocol fees percentage to be set.\"}}},\"title\":\"Paycrest\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interfaces/IPaycrest.sol\\\";\\nimport {SharedStructs} from \\\"./libraries/SharedStructs.sol\\\";\\n\\n/**\\n * @title Paycrest\\n * @dev Paycrest contract for handling orders and settlements.\\n */\\ncontract Paycrest is IPaycrest, PaycrestSettingManager, PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n    }\\n\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    uint256[50] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialize function.\\n     */\\n    function initialize() external initializer {\\n        MAX_BPS = 100_000;\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /**\\n     * @dev Modifier that allows only the aggregator to call a function.\\n     */\\n    modifier onlyAggregator {\\n        require(msg.sender == _aggregatorAddress, \\\"OnlyAggregator\\\");\\n        _;\\n    }\\n\\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    /**\\n     * @dev Pause the contract.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount,\\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    ) external whenNotPaused() returns(bytes32 orderId) {\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee, _institutionCode);\\n\\n        // validate messageHash\\n        require(bytes(messageHash).length > 0, \\\"InvalidMessageHash\\\");\\n\\n        // transfer token from msg.sender to contract\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount + _senderFee);\\n\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n\\n\\n        // update transaction\\n        uint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            protocolFee: _protocolFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint64(MAX_BPS),\\n            amount: _amount - _protocolFee\\n        });\\n\\n        // emit deposit event\\n        emit OrderCreated(_token, order[orderId].amount, _protocolFee, orderId, _rate, _institutionCode, _label, messageHash);\\n    }\\n\\n    /**\\n     * @dev Internal function to handle order creation.\\n     * @param _token The address of the token being traded.\\n     * @param _amount The amount of tokens being traded.\\n     * @param _refundAddress The address to refund the tokens in case of cancellation.\\n     * @param _senderFeeRecipient The address of the recipient for the sender fee.\\n     * @param _senderFee The amount of the sender fee.\\n     * @param _institutionCode The code of the institution associated with the order.\\n     */\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, uint256 _senderFee, bytes32 _institutionCode) internal view {\\n        require(_isTokenSupported[_token], \\\"TokenNotSupported\\\");\\n        require(_amount > 0, \\\"AmountIsZero\\\");\\n        require(_refundAddress != address(0), \\\"ThrowZeroAddress\\\");\\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \\\"InvalidInstitutionCode\\\");\\n\\n        if (_senderFee > 0) {\\n            require(_senderFeeRecipient != address(0), \\\"InvalidSenderFeeRecipient\\\");\\n        }\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _splitOrderId,\\n        bytes32 _orderId, \\n        bytes32 _label,\\n        address _liquidityProvider, \\n        uint64 _settlePercent\\n    ) external onlyAggregator() returns(bytes32, address) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n\\n        // subtract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n\\n            if (order[_orderId].senderFee > 0) {\\n                // transfer sender fee\\n                _transferSenderFee(_orderId); \\n            }\\n\\n            if (order[_orderId].protocolFee > 0) {\\n                // transfer protocol fee\\n                IERC20(token).transfer(treasuryAddress, order[_orderId].protocolFee);\\n            }\\n        }\\n\\n        // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, order[_orderId].amount);\\n\\n        // emit event\\n        emit OrderSettled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\\n        return (_orderId, token);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer the sender fee.\\n     * @param _orderId The ID of the order.\\n     */\\n    function _transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit SenderFeeTransferred(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n\\n        // deduct fee from order amount\\n        uint256 refundAmount = order[_orderId].amount - _fee;\\n        IERC20(order[_orderId].token).transfer(treasuryAddress, _fee);\\n\\n        // reset state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n    \\n        // transfer to sender and emit event\\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, refundAmount);\\n        emit OrderRefunded(_fee, _orderId, _label);\\n\\n        return true;\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionByCode-IPaycrest}. */\\n    function getSupportedInstitutionByCode(bytes32 _code) external view returns(SharedStructs.InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[_code];\\n    }\\n\\n    /** @dev See {getSupportedInstitutions-IPaycrest}. */\\n    function getSupportedInstitutions(bytes32 _currency) external view returns(SharedStructs.Institution[] memory) {\\n        SharedStructs.Institution[] memory institutions = supportedInstitutions[_currency];\\n        uint256 length = institutions.length;\\n        SharedStructs.Institution[] memory result = new SharedStructs.Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint256\\n    ) {\\n        return(protocolFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getAggregator-IPaycrest}. */\\n    function getAggregator() external view returns(bytes memory) {\\n        return _aggregator;\\n    } \\n}\\n\",\"keccak256\":\"0xd7b18acf07c1ca555ef07ff873cc3865641b8d24ffbc52c4d1c1eb7fe7876cd8\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * @title PaycrestSettingManager\\n * @dev This contract manages the settings and configurations for the Paycrest protocol.\\n */\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {SharedStructs} from \\\"./libraries/SharedStructs.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent;\\n    address internal treasuryAddress;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n\\n    mapping(bytes32 => SharedStructs.Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => SharedStructs.InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event ProtocolFeesUpdated(uint64 protocolFee);\\n    event ProtocolAddressesUpdated(address treasuryAddress);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address treasuryAddress);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n\\n    /**\\n     * @dev Sets the boolean value for a specific setting.\\n     * @param what The setting to be updated.\\n     * @param value The address or value associated with the setting.\\n     * @param status The boolean value to be set.\\n     * Requirements:\\n     * - The value must not be a zero address.\\n     */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    /**\\n     * @dev Sets the supported institutions for a specific currency.\\n     * @param currency The currency for which the institutions are being set.\\n     * @param institutions The array of institutions to be set.\\n     */\\n    function setSupportedInstitutions(bytes32 currency, SharedStructs.Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = SharedStructs.InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the protocol fees percentage.\\n     * @param _protocolFeePercent The new protocol fees percentage to be set.\\n     */\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit ProtocolFeesUpdated(_protocolFeePercent);\\n    }\\n\\n    /**\\n     * @dev Updates the protocol addresses.\\n     * @param what The address type to be updated (treasury or aggregator).\\n     * @param value The new address to be set.\\n     * Requirements:\\n     * - The value must not be a zero address.\\n     */\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"treasury\\\") treasuryAddress = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n        emit ProtocolAddressesUpdated(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Updates the protocol aggregator.\\n     * @param aggregator The new aggregator to be set.\\n     */\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n}\\n\",\"keccak256\":\"0x8a6728234f0629f9d377071d6e3a319a2740c98fe8e89d2c7bb7f4656ae63e45\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPaycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {SharedStructs} from \\\"../libraries/SharedStructs.sol\\\";\\n\\n/**\\n * @title IPaycrest\\n * @dev Interface for the Paycrest contract.\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /**\\n     * @dev Emitted when a deposit is made.\\n     * @param token The address of the deposited token.\\n     * @param amount The amount of the deposit.\\n     * @param orderId The ID of the order.\\n     * @param rate The rate at which the deposit is made.\\n     * @param institutionCode The code of the institution.\\n     * @param label The label of the deposit.\\n     * @param messageHash The hash of the message.\\n     */\\n    event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n\\n    /**\\n     * @dev Emitted when an aggregator settles a transaction.\\n     * @param splitOrderId The ID of the split order.\\n     * @param orderId The ID of the order.\\n     * @param label The label of the transaction.\\n     * @param liquidityProvider The address of the liquidity provider.\\n     * @param settlePercent The percentage at which the transaction is settled.\\n     */\\n    event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n\\n    /**\\n     * @dev Emitted when an aggregator refunds a transaction.\\n     * @param fee The fee deducted from the refund amount.\\n     * @param orderId The ID of the order.\\n     * @param label The label of the transaction.\\n     */\\n    event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label);\\n\\n    /**\\n     * @dev Emitted when the sender's fee is transferred.\\n     * @param sender The address of the sender.\\n     * @param amount The amount of the fee transferred.\\n     */\\n    event SenderFeeTransferred(address indexed sender, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    /**\\n     * @dev Struct representing transaction metadata.\\n     * @param identifier The identifier of the transaction.\\n     * @param institution The institution of the transaction.\\n     * @param name The name of the transaction.\\n     * @param currency The currency of the transaction.\\n     * @param liquidityProviderID The ID of the liquidity provider.\\n     */\\n    struct TransactionMetadata {\\n        bytes8 identifier;\\n        bytes8 institution;\\n        bytes8 name;\\n        bytes8 currency;\\n        uint256 liquidityProviderID;\\n    }\\n\\n    /**\\n     * @dev Struct representing an order.\\n     * @param seller The address of the seller.\\n     * @param token The address of the token.\\n     * @param senderFeeRecipient The address of the sender fee recipient.\\n     * @param senderFee The fee to be paid to the sender fee recipient.\\n     * @param protocolFee The protocol fee to be paid.\\n     * @param rate The rate at which the order is made.\\n     * @param isFulfilled Whether the order is fulfilled.\\n     * @param refundAddress The address to which the refund is made.\\n     * @param currentBPS The current basis points.\\n     * @param amount The amount of the order.\\n     */\\n    struct Order {\\n        address seller;\\n        address token;\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint256 protocolFee;\\n        uint96 rate;\\n        bool isFulfilled;\\n        address refundAddress;\\n        uint96 currentBPS;\\n        uint256 amount;\\n    }\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /**\\n     * @notice Locks the sender's amount of token into Paycrest.\\n     * @dev Requirements:\\n     * - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n     * - `_token` must be an acceptable token. See {isTokenSupported}.\\n     * - `amount` must be greater than minimum.\\n     * - `_refundable` refundable address must not be zero address.\\n     * @param _token The address of the token.\\n     * @param _amount The amount in the decimal of `_token` to be locked.\\n     * @param _institutionCode The institution code of the sender.\\n     * @param _label The reference of the sender.\\n     * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\\n     * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token` when there is a need to refund.\\n     * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.\\n     * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\\n     * @param messageHash The hash of the message.\\n     * @return _orderId The ID of the order.\\n     */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    ) external returns(bytes32 _orderId);\\n\\n    /**\\n     * @notice Settles a transaction and distributes rewards accordingly.\\n     * @dev Requirements:\\n     * - Only aggregators can call this function.\\n     * - `_orderId` must be less than total IDs.\\n     * - `_orderId` must be an open ID.\\n     * - `_primaryValidator` must have stake on the Paycrest staking platform.\\n     * - `_secondaryValidators` must have stake on the Paycrest staking platform.\\n     * - `amount` must be greater than minimum.\\n     * - `_refundable` refundable address must not be zero address.\\n     * @param _orderId The ID of the transaction.\\n     * @param _label The reference of the sender.\\n     * @param _liquidityProvider The address of the liquidity provider.\\n     * @param _settlePercent The rate at which the transaction is settled.\\n     * @return _orderId The ID of the order.\\n     * @return _liquidityProvider The address of the liquidity provider.\\n     */\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) external returns(bytes32, address);\\n\\n    /**\\n     * @notice Refunds to the specified refundable address.\\n     * @dev Requirements:\\n     * - Only aggregators can call this function.\\n     * - `_orderId` must be less than total IDs.\\n     * - `_orderId` must be an open ID.\\n     * - `isFulfilled` must be false.\\n     * @param _fee The amount to be deducted from the amount to be refunded.\\n     * @param _orderId The ID of the transaction.\\n     * @param _label The reference of the sender.\\n     * @return Whether the refund is successful.\\n     */\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external returns(bool);\\n\\n    /**\\n     * @notice Checks if a token is supported by Paycrest.\\n     * @param _token The address of the token to check.\\n     * @return Whether the token is supported.\\n     */\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /**\\n     * @notice Gets the details of an order.\\n     * @param _orderId The ID of the order.\\n     * @return return The order details.\\n     */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /**\\n     * @notice Gets the fee details of Paycrest.\\n     * @return protocolReward The protocol reward amount.\\n     * @return max_bps The maximum basis points.\\n     */\\n    function getFeeDetails() external view returns(uint64 protocolReward, uint256 max_bps);\\n\\n    /**\\n     * @notice Gets the aggregator's public key.\\n     * @return return The aggregator's public key.\\n     */\\n    function getAggregator() external view returns(bytes memory);\\n\\n    /**\\n     * @notice Gets the details of a supported institution by code.\\n     * @param _code The institution code.\\n     * @return return The institution details.\\n     */\\n    function getSupportedInstitutionByCode(bytes32 _code) external view returns(SharedStructs.InstitutionByCode memory);\\n\\n    /**\\n     * @notice Gets the details of supported institutions by currency.\\n     * @param _currency The currency code.\\n     * @return return An array of institutions.\\n     */ \\n    function getSupportedInstitutions(bytes32 _currency) external view returns(SharedStructs.Institution[] memory);\\n}\\n\",\"keccak256\":\"0x4f6aae003115dcd30abb0dfe742c53bd8fd740714ed3af8d6824aabf8d7692a6\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nlibrary SharedStructs {\\n    /**\\n     * @dev Struct representing an institution.\\n     * @param code The code of the institution.\\n     * @param name The name of the institution.\\n     */\\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n\\n    /**\\n     * @dev Struct representing an institution by code.\\n     * @param name The name of the institution.\\n     * @param currency The currency of the institution.\\n     */\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n}\",\"keccak256\":\"0x6c50c51961ec2a2740e0f3cbfc2bdb7b80a5c728dec92ebb98d84893ac8adb5a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1299,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":11,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":131,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3608,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3610,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3612,"contract":"contracts/Paycrest.sol:Paycrest","label":"treasuryAddress","offset":8,"slot":"102","type":"t_address"},{"astId":3614,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3616,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3620,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3624,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3630,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"156","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4029_storage)dyn_storage)"},{"astId":3635,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4034_storage)"},{"astId":323,"contract":"contracts/Paycrest.sol:Paycrest","label":"_paused","offset":0,"slot":"158","type":"t_bool"},{"astId":428,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"159","type":"t_array(t_uint256)49_storage"},{"astId":2980,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"208","type":"t_mapping(t_bytes32,t_struct(Order)3917_storage)"},{"astId":2984,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"209","type":"t_mapping(t_address,t_uint256)"},{"astId":2988,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"210","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4029_storage)dyn_storage":{"base":"t_struct(Institution)4029_storage","encoding":"dynamic_array","label":"struct SharedStructs.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4029_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct SharedStructs.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4029_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4034_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct SharedStructs.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4034_storage"},"t_mapping(t_bytes32,t_struct(Order)3917_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)3917_storage"},"t_struct(Institution)4029_storage":{"encoding":"inplace","label":"struct SharedStructs.Institution","members":[{"astId":4026,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4028,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4034_storage":{"encoding":"inplace","label":"struct SharedStructs.InstitutionByCode","members":[{"astId":4031,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4033,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)3917_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":3898,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":3900,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":3902,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":3904,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":3906,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFee","offset":0,"slot":"4","type":"t_uint256"},{"astId":3908,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"5","type":"t_uint96"},{"astId":3910,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"5","type":"t_bool"},{"astId":3912,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"6","type":"t_address"},{"astId":3914,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"6","type":"t_uint96"},{"astId":3916,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"7","type":"t_uint256"}],"numberOfBytes":"256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct SharedStructs.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":{"details":"Sets the supported institutions for a specific currency.","params":{"currency":"The currency for which the institutions are being set.","institutions":"The array of institutions to be set."}},"settingManagerBool(bytes32,address,bool)":{"details":"Sets the boolean value for a specific setting.","params":{"status":"The boolean value to be set. Requirements: - The value must not be a zero address.","value":"The address or value associated with the setting.","what":"The setting to be updated."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateProtocolAddresses(bytes32,address)":{"details":"Updates the protocol addresses.","params":{"value":"The new address to be set. Requirements: - The value must not be a zero address.","what":"The address type to be updated (treasury or aggregator)."}},"updateProtocolAggregator(bytes)":{"details":"Updates the protocol aggregator.","params":{"aggregator":"The new aggregator to be set."}},"updateProtocolFees(uint64)":{"details":"Updates the protocol fees percentage.","params":{"_protocolFeePercent":"The new protocol fees percentage to be set."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506112c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a14565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610ace565b610285565b005b6100e960048036038101906100e49190610b4e565b61042b565b005b6100f3610496565b6040516101009190610b8a565b60405180910390f35b610123600480360381019061011e9190610bdd565b6104c0565b005b61013f600480360381019061013a9190610c8b565b6105f6565b005b61015b60048036038101906101569190610cd8565b61064d565b005b6101656106d0565b60008151905060005b8181101561026b57609c600085815260200190815260200160002083828151811061019c5761019b610d05565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d05565b5b602002602001015160200151815260200185815250609d600085848151811061022d5761022c610d05565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106d0565b610283600061074e565b565b61028d6106d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610d91565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161041f9190610b8a565b60405180910390a15050565b6104336106d0565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e264468160405161048b9190610dc0565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104c86106d0565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90610d91565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036105b65780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516105e993929190610df9565b60405180910390a1505050565b6105fe6106d0565b81816068918261060f929190611051565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef828260405161064192919061116e565b60405180910390a15050565b6106556106d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90611204565b60405180910390fd5b6106cd8161074e565b50565b6106d8610814565b73ffffffffffffffffffffffffffffffffffffffff166106f6610496565b73ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390611270565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61084381610830565b811461084e57600080fd5b50565b6000813590506108608161083a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108b48261086b565b810181811067ffffffffffffffff821117156108d3576108d261087c565b5b80604052505050565b60006108e661081c565b90506108f282826108ab565b919050565b600067ffffffffffffffff8211156109125761091161087c565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006040828403121561094357610942610928565b5b61094d60406108dc565b9050600061095d84828501610851565b600083015250602061097184828501610851565b60208301525092915050565b600061099061098b846108f7565b6108dc565b905080838252602082019050604084028301858111156109b3576109b2610923565b5b835b818110156109dc57806109c8888261092d565b8452602084019350506040810190506109b5565b5050509392505050565b600082601f8301126109fb576109fa610866565b5b8135610a0b84826020860161097d565b91505092915050565b60008060408385031215610a2b57610a2a610826565b5b6000610a3985828601610851565b925050602083013567ffffffffffffffff811115610a5a57610a5961082b565b5b610a66858286016109e6565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9b82610a70565b9050919050565b610aab81610a90565b8114610ab657600080fd5b50565b600081359050610ac881610aa2565b92915050565b60008060408385031215610ae557610ae4610826565b5b6000610af385828601610851565b9250506020610b0485828601610ab9565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b2b81610b0e565b8114610b3657600080fd5b50565b600081359050610b4881610b22565b92915050565b600060208284031215610b6457610b63610826565b5b6000610b7284828501610b39565b91505092915050565b610b8481610a90565b82525050565b6000602082019050610b9f6000830184610b7b565b92915050565b60008115159050919050565b610bba81610ba5565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b600080600060608486031215610bf657610bf5610826565b5b6000610c0486828701610851565b9350506020610c1586828701610ab9565b9250506040610c2686828701610bc8565b9150509250925092565b600080fd5b60008083601f840112610c4b57610c4a610866565b5b8235905067ffffffffffffffff811115610c6857610c67610c30565b5b602083019150836001820283011115610c8457610c83610923565b5b9250929050565b60008060208385031215610ca257610ca1610826565b5b600083013567ffffffffffffffff811115610cc057610cbf61082b565b5b610ccc85828601610c35565b92509250509250929050565b600060208284031215610cee57610ced610826565b5b6000610cfc84828501610ab9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610d7b601683610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b610dba81610b0e565b82525050565b6000602082019050610dd56000830184610db1565b92915050565b610de481610830565b82525050565b610df381610ba5565b82525050565b6000606082019050610e0e6000830186610ddb565b610e1b6020830185610b7b565b610e286040830184610dea565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e8257607f821691505b602082108103610e9557610e94610e3b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610efd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ec0565b610f078683610ec0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f4e610f49610f4484610f1f565b610f29565b610f1f565b9050919050565b6000819050919050565b610f6883610f33565b610f7c610f7482610f55565b848454610ecd565b825550505050565b600090565b610f91610f84565b610f9c818484610f5f565b505050565b5b81811015610fc057610fb5600082610f89565b600181019050610fa2565b5050565b601f82111561100557610fd681610e9b565b610fdf84610eb0565b81016020851015610fee578190505b611002610ffa85610eb0565b830182610fa1565b50505b505050565b600082821c905092915050565b60006110286000198460080261100a565b1980831691505092915050565b60006110418383611017565b9150826002028217905092915050565b61105b8383610e30565b67ffffffffffffffff8111156110745761107361087c565b5b61107e8254610e6a565b611089828285610fc4565b6000601f8311600181146110b857600084156110a6578287013590505b6110b08582611035565b865550611118565b601f1984166110c686610e9b565b60005b828110156110ee578489013582556001820191506020850194506020810190506110c9565b8683101561110b5784890135611107601f891682611017565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b600061114d8385611121565b935061115a838584611132565b6111638361086b565b840190509392505050565b60006020820190508181036000830152611189818486611141565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111ee602683610d34565b91506111f982611192565b604082019050919050565b6000602082019050818103600083015261121d816111e1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061125a602083610d34565b915061126582611224565b602082019050919050565b600060208201905081810360008301526112898161124d565b905091905056fea264697066735822122082dbc8b69f78264eabb9f71ca51f01f910551a57d38f8436e680f46621f14ff664736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x42B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH2 0x5F6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6D0 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x74E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xD91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x41F SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x433 PUSH2 0x6D0 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x52E SWAP1 PUSH2 0xD91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5B6 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5E9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x5FE PUSH2 0x6D0 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x60F SWAP3 SWAP2 SWAP1 PUSH2 0x1051 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x641 SWAP3 SWAP2 SWAP1 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x655 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BB SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CD DUP2 PUSH2 0x74E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6F6 PUSH2 0x496 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x743 SWAP1 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x843 DUP2 PUSH2 0x830 JUMP JUMPDEST DUP2 EQ PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x860 DUP2 PUSH2 0x83A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8B4 DUP3 PUSH2 0x86B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8D3 JUMPI PUSH2 0x8D2 PUSH2 0x87C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E6 PUSH2 0x81C JUMP JUMPDEST SWAP1 POP PUSH2 0x8F2 DUP3 DUP3 PUSH2 0x8AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x912 JUMPI PUSH2 0x911 PUSH2 0x87C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x928 JUMP JUMPDEST JUMPDEST PUSH2 0x94D PUSH1 0x40 PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x95D DUP5 DUP3 DUP6 ADD PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x971 DUP5 DUP3 DUP6 ADD PUSH2 0x851 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x990 PUSH2 0x98B DUP5 PUSH2 0x8F7 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9B3 JUMPI PUSH2 0x9B2 PUSH2 0x923 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9DC JUMPI DUP1 PUSH2 0x9C8 DUP9 DUP3 PUSH2 0x92D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9B5 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9FB JUMPI PUSH2 0x9FA PUSH2 0x866 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA0B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x97D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA2B JUMPI PUSH2 0xA2A PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA39 DUP6 DUP3 DUP7 ADD PUSH2 0x851 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5A JUMPI PUSH2 0xA59 PUSH2 0x82B JUMP JUMPDEST JUMPDEST PUSH2 0xA66 DUP6 DUP3 DUP7 ADD PUSH2 0x9E6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9B DUP3 PUSH2 0xA70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAB DUP2 PUSH2 0xA90 JUMP JUMPDEST DUP2 EQ PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAC8 DUP2 PUSH2 0xAA2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAE5 JUMPI PUSH2 0xAE4 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAF3 DUP6 DUP3 DUP7 ADD PUSH2 0x851 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB04 DUP6 DUP3 DUP7 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB2B DUP2 PUSH2 0xB0E JUMP JUMPDEST DUP2 EQ PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB48 DUP2 PUSH2 0xB22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB64 JUMPI PUSH2 0xB63 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB72 DUP5 DUP3 DUP6 ADD PUSH2 0xB39 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB84 DUP2 PUSH2 0xA90 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB9F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBA DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD7 DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBF5 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC04 DUP7 DUP3 DUP8 ADD PUSH2 0x851 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC15 DUP7 DUP3 DUP8 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC26 DUP7 DUP3 DUP8 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC4B JUMPI PUSH2 0xC4A PUSH2 0x866 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC68 JUMPI PUSH2 0xC67 PUSH2 0xC30 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0x923 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCA2 JUMPI PUSH2 0xCA1 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC0 JUMPI PUSH2 0xCBF PUSH2 0x82B JUMP JUMPDEST JUMPDEST PUSH2 0xCCC DUP6 DUP3 DUP7 ADD PUSH2 0xC35 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCEE JUMPI PUSH2 0xCED PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCFC DUP5 DUP3 DUP6 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD7B PUSH1 0x16 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0xD86 DUP3 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDAA DUP2 PUSH2 0xD6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDBA DUP2 PUSH2 0xB0E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDD5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDE4 DUP2 PUSH2 0x830 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDF3 DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE0E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0xE1B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0xE28 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDEA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xE82 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE95 JUMPI PUSH2 0xE94 PUSH2 0xE3B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xEFD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0xF07 DUP7 DUP4 PUSH2 0xEC0 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF4E PUSH2 0xF49 PUSH2 0xF44 DUP5 PUSH2 0xF1F JUMP JUMPDEST PUSH2 0xF29 JUMP JUMPDEST PUSH2 0xF1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF68 DUP4 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0xF7C PUSH2 0xF74 DUP3 PUSH2 0xF55 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xECD JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF91 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0xF9C DUP2 DUP5 DUP5 PUSH2 0xF5F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFC0 JUMPI PUSH2 0xFB5 PUSH1 0x0 DUP3 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFA2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1005 JUMPI PUSH2 0xFD6 DUP2 PUSH2 0xE9B JUMP JUMPDEST PUSH2 0xFDF DUP5 PUSH2 0xEB0 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xFEE JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1002 PUSH2 0xFFA DUP6 PUSH2 0xEB0 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFA1 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1028 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x100A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1041 DUP4 DUP4 PUSH2 0x1017 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x105B DUP4 DUP4 PUSH2 0xE30 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1074 JUMPI PUSH2 0x1073 PUSH2 0x87C JUMP JUMPDEST JUMPDEST PUSH2 0x107E DUP3 SLOAD PUSH2 0xE6A JUMP JUMPDEST PUSH2 0x1089 DUP3 DUP3 DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10B8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10A6 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10B0 DUP6 DUP3 PUSH2 0x1035 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x1118 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10C6 DUP7 PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x10EE JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10C9 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x110B JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x1107 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x1017 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114D DUP4 DUP6 PUSH2 0x1121 JUMP JUMPDEST SWAP4 POP PUSH2 0x115A DUP4 DUP6 DUP5 PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x1163 DUP4 PUSH2 0x86B JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1189 DUP2 DUP5 DUP7 PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EE PUSH1 0x26 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0x11F9 DUP3 PUSH2 0x1192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x121D DUP2 PUSH2 0x11E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125A PUSH1 0x20 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1265 DUP3 PUSH2 0x1224 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1289 DUP2 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0xDB 0xC8 0xB6 SWAP16 PUSH25 0x264EABB9F71CA51F01F910551A57D38F8436E680F46621F14F 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"335:3661:14:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_69":{"entryPoint":1744,"id":69,"parameterSlots":0,"returnSlots":0},"@_msgSender_1277":{"entryPoint":2068,"id":1277,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_126":{"entryPoint":1870,"id":126,"parameterSlots":1,"returnSlots":0},"@owner_55":{"entryPoint":1174,"id":55,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_83":{"entryPoint":625,"id":83,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3754":{"entryPoint":349,"id":3754,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3698":{"entryPoint":1216,"id":3698,"parameterSlots":3,"returnSlots":0},"@transferOwnership_106":{"entryPoint":1613,"id":106,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3812":{"entryPoint":645,"id":3812,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_3829":{"entryPoint":1526,"id":3829,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3771":{"entryPoint":1067,"id":3771,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":2429,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2745,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":2534,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":3016,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2129,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3125,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$4029_memory_ptr":{"entryPoint":2349,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":2873,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2766,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":3037,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":2580,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3211,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":2894,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2939,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3562,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3547,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4417,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":4577,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":3438,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":4685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3505,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2954,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3577,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4462,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4612,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":3520,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2268,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2076,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr":{"entryPoint":2295,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":3739,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":3632,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4385,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3380,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":4036,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":2704,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":2981,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2096,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2672,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3871,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2830,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":4001,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":3891,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":4177,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":4402,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":3760,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":3690,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":4149,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2219,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":3881,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":4119,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":3643,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3333,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2172,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":3925,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":3120,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2150,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2344,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2339,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2091,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2086,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2155,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":3776,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":4106,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":3977,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":4498,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":3397,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":4644,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":3789,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":3935,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2722,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":2993,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2106,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":2850,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":3972,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19930:17","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:17","statements":[{"nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:17"},"nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:17"},"nodeType":"YulFunctionCall","src":"187:12:17"},"nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:17"},"nodeType":"YulFunctionCall","src":"310:12:17"},"nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nodeType":"YulBlock","src":"379:32:17","statements":[{"nodeType":"YulAssignment","src":"389:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:17"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:17","type":""}],"src":"334:77:17"},{"body":{"nodeType":"YulBlock","src":"460:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:17"},"nodeType":"YulFunctionCall","src":"490:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:17"},"nodeType":"YulFunctionCall","src":"480:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:17"},"nodeType":"YulFunctionCall","src":"473:43:17"},"nodeType":"YulIf","src":"470:63:17"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:17","type":""}],"src":"417:122:17"},{"body":{"nodeType":"YulBlock","src":"597:87:17","statements":[{"nodeType":"YulAssignment","src":"607:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:17"},"nodeType":"YulFunctionCall","src":"616:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:17"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:17"},"nodeType":"YulFunctionCall","src":"645:33:17"},"nodeType":"YulExpressionStatement","src":"645:33:17"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:17","type":""}],"src":"545:139:17"},{"body":{"nodeType":"YulBlock","src":"779:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:17"},"nodeType":"YulFunctionCall","src":"789:12:17"},"nodeType":"YulExpressionStatement","src":"789:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:17"},{"body":{"nodeType":"YulBlock","src":"861:54:17","statements":[{"nodeType":"YulAssignment","src":"871:38:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:17"},"nodeType":"YulFunctionCall","src":"885:14:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:17"},"nodeType":"YulFunctionCall","src":"901:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:17"},"nodeType":"YulFunctionCall","src":"881:28:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:17"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:17","type":""}],"src":"813:102:17"},{"body":{"nodeType":"YulBlock","src":"949:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:17"},"nodeType":"YulFunctionCall","src":"959:88:17"},"nodeType":"YulExpressionStatement","src":"959:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:17"},"nodeType":"YulFunctionCall","src":"1056:15:17"},"nodeType":"YulExpressionStatement","src":"1056:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:17"},"nodeType":"YulFunctionCall","src":"1080:15:17"},"nodeType":"YulExpressionStatement","src":"1080:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:17"},{"body":{"nodeType":"YulBlock","src":"1150:238:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:17"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:17"},"nodeType":"YulFunctionCall","src":"1190:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:17"},"nodeType":"YulFunctionCall","src":"1178:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:17"},"nodeType":"YulFunctionCall","src":"1331:18:17"},"nodeType":"YulExpressionStatement","src":"1331:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:17"},"nodeType":"YulFunctionCall","src":"1269:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:17"},"nodeType":"YulFunctionCall","src":"1305:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:17"},"nodeType":"YulFunctionCall","src":"1266:62:17"},"nodeType":"YulIf","src":"1263:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:17"},"nodeType":"YulFunctionCall","src":"1360:22:17"},"nodeType":"YulExpressionStatement","src":"1360:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:17","type":""}],"src":"1107:281:17"},{"body":{"nodeType":"YulBlock","src":"1435:88:17","statements":[{"nodeType":"YulAssignment","src":"1445:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:17"},"nodeType":"YulFunctionCall","src":"1455:20:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:17"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:17"},"nodeType":"YulFunctionCall","src":"1484:33:17"},"nodeType":"YulExpressionStatement","src":"1484:33:17"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:17","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:17","type":""}],"src":"1394:129:17"},{"body":{"nodeType":"YulBlock","src":"1640:229:17","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:17"},"nodeType":"YulFunctionCall","src":"1747:18:17"},"nodeType":"YulExpressionStatement","src":"1747:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:17"},"nodeType":"YulFunctionCall","src":"1714:30:17"},"nodeType":"YulIf","src":"1711:56:17"},{"nodeType":"YulAssignment","src":"1777:25:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:17"},"nodeType":"YulFunctionCall","src":"1785:17:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:17"}]},{"nodeType":"YulAssignment","src":"1839:23:17","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:17"},"nodeType":"YulFunctionCall","src":"1847:15:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:17"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:17","type":""}],"src":"1529:340:17"},{"body":{"nodeType":"YulBlock","src":"1964:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:17"},"nodeType":"YulFunctionCall","src":"1974:12:17"},"nodeType":"YulExpressionStatement","src":"1974:12:17"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:17"},{"body":{"nodeType":"YulBlock","src":"2087:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:17"},"nodeType":"YulFunctionCall","src":"2097:12:17"},"nodeType":"YulExpressionStatement","src":"2097:12:17"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:17"},{"body":{"nodeType":"YulBlock","src":"2210:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:17"},"nodeType":"YulFunctionCall","src":"2220:12:17"},"nodeType":"YulExpressionStatement","src":"2220:12:17"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:17"},{"body":{"nodeType":"YulBlock","src":"2368:494:17","statements":[{"body":{"nodeType":"YulBlock","src":"2412:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2414:77:17"},"nodeType":"YulFunctionCall","src":"2414:79:17"},"nodeType":"YulExpressionStatement","src":"2414:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2389:3:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2394:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2385:3:17"},"nodeType":"YulFunctionCall","src":"2385:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"2406:4:17","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2381:3:17"},"nodeType":"YulFunctionCall","src":"2381:30:17"},"nodeType":"YulIf","src":"2378:117:17"},{"nodeType":"YulAssignment","src":"2504:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2529:4:17","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2513:15:17"},"nodeType":"YulFunctionCall","src":"2513:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2504:5:17"}]},{"nodeType":"YulBlock","src":"2544:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2579:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2593:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2583:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2619:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2626:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2615:3:17"},"nodeType":"YulFunctionCall","src":"2615:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2658:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2669:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2654:3:17"},"nodeType":"YulFunctionCall","src":"2654:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"2678:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2633:20:17"},"nodeType":"YulFunctionCall","src":"2633:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2608:6:17"},"nodeType":"YulFunctionCall","src":"2608:75:17"},"nodeType":"YulExpressionStatement","src":"2608:75:17"}]},{"nodeType":"YulBlock","src":"2704:151:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2739:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2753:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2743:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2780:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2787:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2776:3:17"},"nodeType":"YulFunctionCall","src":"2776:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2830:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2815:3:17"},"nodeType":"YulFunctionCall","src":"2815:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"2839:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2794:20:17"},"nodeType":"YulFunctionCall","src":"2794:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2769:6:17"},"nodeType":"YulFunctionCall","src":"2769:75:17"},"nodeType":"YulExpressionStatement","src":"2769:75:17"}]}]},"name":"abi_decode_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2343:9:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"2354:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2362:5:17","type":""}],"src":"2284:578:17"},{"body":{"nodeType":"YulBlock","src":"3041:666:17","statements":[{"nodeType":"YulAssignment","src":"3051:119:17","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3162:6:17"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3076:85:17"},"nodeType":"YulFunctionCall","src":"3076:93:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3060:15:17"},"nodeType":"YulFunctionCall","src":"3060:110:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3051:5:17"}]},{"nodeType":"YulVariableDeclaration","src":"3179:16:17","value":{"name":"array","nodeType":"YulIdentifier","src":"3190:5:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3183:3:17","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3212:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"3219:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3205:6:17"},"nodeType":"YulFunctionCall","src":"3205:21:17"},"nodeType":"YulExpressionStatement","src":"3205:21:17"},{"nodeType":"YulAssignment","src":"3235:23:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3246:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3253:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3242:3:17"},"nodeType":"YulFunctionCall","src":"3242:16:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3235:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"3268:44:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3286:6:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3298:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3306:4:17","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3294:3:17"},"nodeType":"YulFunctionCall","src":"3294:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3282:3:17"},"nodeType":"YulFunctionCall","src":"3282:30:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3272:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3340:103:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3354:77:17"},"nodeType":"YulFunctionCall","src":"3354:79:17"},"nodeType":"YulExpressionStatement","src":"3354:79:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3327:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"3335:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3324:2:17"},"nodeType":"YulFunctionCall","src":"3324:15:17"},"nodeType":"YulIf","src":"3321:122:17"},{"body":{"nodeType":"YulBlock","src":"3528:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3543:21:17","value":{"name":"src","nodeType":"YulIdentifier","src":"3561:3:17"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3547:10:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3585:3:17"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3640:10:17"},{"name":"end","nodeType":"YulIdentifier","src":"3652:3:17"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$4029_memory_ptr","nodeType":"YulIdentifier","src":"3590:49:17"},"nodeType":"YulFunctionCall","src":"3590:66:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3578:6:17"},"nodeType":"YulFunctionCall","src":"3578:79:17"},"nodeType":"YulExpressionStatement","src":"3578:79:17"},{"nodeType":"YulAssignment","src":"3670:21:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3681:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3686:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3677:3:17"},"nodeType":"YulFunctionCall","src":"3677:14:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3670:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3481:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3486:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3478:2:17"},"nodeType":"YulFunctionCall","src":"3478:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3494:25:17","statements":[{"nodeType":"YulAssignment","src":"3496:21:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3507:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3512:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3503:3:17"},"nodeType":"YulFunctionCall","src":"3503:14:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3496:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3456:21:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3458:17:17","value":{"name":"offset","nodeType":"YulIdentifier","src":"3469:6:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3462:3:17","type":""}]}]},"src":"3452:249:17"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3011:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"3019:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3027:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3035:5:17","type":""}],"src":"2910:797:17"},{"body":{"nodeType":"YulBlock","src":"3861:322:17","statements":[{"body":{"nodeType":"YulBlock","src":"3910:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3912:77:17"},"nodeType":"YulFunctionCall","src":"3912:79:17"},"nodeType":"YulExpressionStatement","src":"3912:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3889:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3897:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3885:3:17"},"nodeType":"YulFunctionCall","src":"3885:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"3904:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3881:3:17"},"nodeType":"YulFunctionCall","src":"3881:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3874:6:17"},"nodeType":"YulFunctionCall","src":"3874:35:17"},"nodeType":"YulIf","src":"3871:122:17"},{"nodeType":"YulVariableDeclaration","src":"4002:34:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4029:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4016:12:17"},"nodeType":"YulFunctionCall","src":"4016:20:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4006:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4045:132:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4150:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4158:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:17"},"nodeType":"YulFunctionCall","src":"4146:17:17"},{"name":"length","nodeType":"YulIdentifier","src":"4165:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"4173:3:17"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4054:91:17"},"nodeType":"YulFunctionCall","src":"4054:123:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4045:5:17"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3839:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3847:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3855:5:17","type":""}],"src":"3755:428:17"},{"body":{"nodeType":"YulBlock","src":"4326:605:17","statements":[{"body":{"nodeType":"YulBlock","src":"4372:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4374:77:17"},"nodeType":"YulFunctionCall","src":"4374:79:17"},"nodeType":"YulExpressionStatement","src":"4374:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4347:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4356:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4343:3:17"},"nodeType":"YulFunctionCall","src":"4343:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4368:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4339:3:17"},"nodeType":"YulFunctionCall","src":"4339:32:17"},"nodeType":"YulIf","src":"4336:119:17"},{"nodeType":"YulBlock","src":"4465:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4480:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4494:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4484:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4509:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4544:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4555:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4540:3:17"},"nodeType":"YulFunctionCall","src":"4540:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4564:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4519:20:17"},"nodeType":"YulFunctionCall","src":"4519:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4509:6:17"}]}]},{"nodeType":"YulBlock","src":"4592:332:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4607:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4638:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4649:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4634:3:17"},"nodeType":"YulFunctionCall","src":"4634:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4621:12:17"},"nodeType":"YulFunctionCall","src":"4621:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4611:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4700:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4702:77:17"},"nodeType":"YulFunctionCall","src":"4702:79:17"},"nodeType":"YulExpressionStatement","src":"4702:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4672:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4680:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4669:2:17"},"nodeType":"YulFunctionCall","src":"4669:30:17"},"nodeType":"YulIf","src":"4666:117:17"},{"nodeType":"YulAssignment","src":"4797:117:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4886:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4897:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4882:3:17"},"nodeType":"YulFunctionCall","src":"4882:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4906:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4807:74:17"},"nodeType":"YulFunctionCall","src":"4807:107:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4797:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4288:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4299:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4311:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4319:6:17","type":""}],"src":"4189:742:17"},{"body":{"nodeType":"YulBlock","src":"4982:81:17","statements":[{"nodeType":"YulAssignment","src":"4992:65:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5007:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"5014:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5003:3:17"},"nodeType":"YulFunctionCall","src":"5003:54:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4992:7:17"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4964:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4974:7:17","type":""}],"src":"4937:126:17"},{"body":{"nodeType":"YulBlock","src":"5114:51:17","statements":[{"nodeType":"YulAssignment","src":"5124:35:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5153:5:17"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5135:17:17"},"nodeType":"YulFunctionCall","src":"5135:24:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5124:7:17"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5096:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5106:7:17","type":""}],"src":"5069:96:17"},{"body":{"nodeType":"YulBlock","src":"5214:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"5271:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5280:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5283:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5273:6:17"},"nodeType":"YulFunctionCall","src":"5273:12:17"},"nodeType":"YulExpressionStatement","src":"5273:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5237:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5262:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5244:17:17"},"nodeType":"YulFunctionCall","src":"5244:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5234:2:17"},"nodeType":"YulFunctionCall","src":"5234:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5227:6:17"},"nodeType":"YulFunctionCall","src":"5227:43:17"},"nodeType":"YulIf","src":"5224:63:17"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5207:5:17","type":""}],"src":"5171:122:17"},{"body":{"nodeType":"YulBlock","src":"5351:87:17","statements":[{"nodeType":"YulAssignment","src":"5361:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5383:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5370:12:17"},"nodeType":"YulFunctionCall","src":"5370:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5361:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5426:5:17"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5399:26:17"},"nodeType":"YulFunctionCall","src":"5399:33:17"},"nodeType":"YulExpressionStatement","src":"5399:33:17"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5329:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"5337:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5345:5:17","type":""}],"src":"5299:139:17"},{"body":{"nodeType":"YulBlock","src":"5527:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"5573:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5575:77:17"},"nodeType":"YulFunctionCall","src":"5575:79:17"},"nodeType":"YulExpressionStatement","src":"5575:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5548:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5557:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5544:3:17"},"nodeType":"YulFunctionCall","src":"5544:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5569:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5540:3:17"},"nodeType":"YulFunctionCall","src":"5540:32:17"},"nodeType":"YulIf","src":"5537:119:17"},{"nodeType":"YulBlock","src":"5666:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5681:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5695:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5685:6:17","type":""}]},{"nodeType":"YulAssignment","src":"5710:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5745:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"5756:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5741:3:17"},"nodeType":"YulFunctionCall","src":"5741:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5765:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5720:20:17"},"nodeType":"YulFunctionCall","src":"5720:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5710:6:17"}]}]},{"nodeType":"YulBlock","src":"5793:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5808:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5822:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5812:6:17","type":""}]},{"nodeType":"YulAssignment","src":"5838:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5873:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"5884:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5869:3:17"},"nodeType":"YulFunctionCall","src":"5869:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5893:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5848:20:17"},"nodeType":"YulFunctionCall","src":"5848:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5838:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5489:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5500:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5512:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5520:6:17","type":""}],"src":"5444:474:17"},{"body":{"nodeType":"YulBlock","src":"5968:57:17","statements":[{"nodeType":"YulAssignment","src":"5978:41:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5993:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"6000:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5989:3:17"},"nodeType":"YulFunctionCall","src":"5989:30:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5978:7:17"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5950:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5960:7:17","type":""}],"src":"5924:101:17"},{"body":{"nodeType":"YulBlock","src":"6073:78:17","statements":[{"body":{"nodeType":"YulBlock","src":"6129:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6138:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6141:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6131:6:17"},"nodeType":"YulFunctionCall","src":"6131:12:17"},"nodeType":"YulExpressionStatement","src":"6131:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6096:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6120:5:17"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6103:16:17"},"nodeType":"YulFunctionCall","src":"6103:23:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6093:2:17"},"nodeType":"YulFunctionCall","src":"6093:34:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6086:6:17"},"nodeType":"YulFunctionCall","src":"6086:42:17"},"nodeType":"YulIf","src":"6083:62:17"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6066:5:17","type":""}],"src":"6031:120:17"},{"body":{"nodeType":"YulBlock","src":"6208:86:17","statements":[{"nodeType":"YulAssignment","src":"6218:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6240:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6227:12:17"},"nodeType":"YulFunctionCall","src":"6227:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6218:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6282:5:17"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6256:25:17"},"nodeType":"YulFunctionCall","src":"6256:32:17"},"nodeType":"YulExpressionStatement","src":"6256:32:17"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6186:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"6194:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6202:5:17","type":""}],"src":"6157:137:17"},{"body":{"nodeType":"YulBlock","src":"6365:262:17","statements":[{"body":{"nodeType":"YulBlock","src":"6411:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6413:77:17"},"nodeType":"YulFunctionCall","src":"6413:79:17"},"nodeType":"YulExpressionStatement","src":"6413:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6386:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6395:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6382:3:17"},"nodeType":"YulFunctionCall","src":"6382:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6407:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6378:3:17"},"nodeType":"YulFunctionCall","src":"6378:32:17"},"nodeType":"YulIf","src":"6375:119:17"},{"nodeType":"YulBlock","src":"6504:116:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6519:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6533:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6523:6:17","type":""}]},{"nodeType":"YulAssignment","src":"6548:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6582:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6593:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6578:3:17"},"nodeType":"YulFunctionCall","src":"6578:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6602:7:17"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6558:19:17"},"nodeType":"YulFunctionCall","src":"6558:52:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6548:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6335:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6346:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6358:6:17","type":""}],"src":"6300:327:17"},{"body":{"nodeType":"YulBlock","src":"6698:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6715:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6738:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6720:17:17"},"nodeType":"YulFunctionCall","src":"6720:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6708:6:17"},"nodeType":"YulFunctionCall","src":"6708:37:17"},"nodeType":"YulExpressionStatement","src":"6708:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6686:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6693:3:17","type":""}],"src":"6633:118:17"},{"body":{"nodeType":"YulBlock","src":"6855:124:17","statements":[{"nodeType":"YulAssignment","src":"6865:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6877:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6888:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6873:3:17"},"nodeType":"YulFunctionCall","src":"6873:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6865:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6945:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6958:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6969:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6954:3:17"},"nodeType":"YulFunctionCall","src":"6954:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6901:43:17"},"nodeType":"YulFunctionCall","src":"6901:71:17"},"nodeType":"YulExpressionStatement","src":"6901:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6827:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6839:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6850:4:17","type":""}],"src":"6757:222:17"},{"body":{"nodeType":"YulBlock","src":"7027:48:17","statements":[{"nodeType":"YulAssignment","src":"7037:32:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7062:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7055:6:17"},"nodeType":"YulFunctionCall","src":"7055:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7048:6:17"},"nodeType":"YulFunctionCall","src":"7048:21:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7037:7:17"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7009:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7019:7:17","type":""}],"src":"6985:90:17"},{"body":{"nodeType":"YulBlock","src":"7121:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"7175:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7184:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7187:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7177:6:17"},"nodeType":"YulFunctionCall","src":"7177:12:17"},"nodeType":"YulExpressionStatement","src":"7177:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7144:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7166:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7151:14:17"},"nodeType":"YulFunctionCall","src":"7151:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7141:2:17"},"nodeType":"YulFunctionCall","src":"7141:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7134:6:17"},"nodeType":"YulFunctionCall","src":"7134:40:17"},"nodeType":"YulIf","src":"7131:60:17"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7114:5:17","type":""}],"src":"7081:116:17"},{"body":{"nodeType":"YulBlock","src":"7252:84:17","statements":[{"nodeType":"YulAssignment","src":"7262:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7284:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7271:12:17"},"nodeType":"YulFunctionCall","src":"7271:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7262:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7324:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7300:23:17"},"nodeType":"YulFunctionCall","src":"7300:30:17"},"nodeType":"YulExpressionStatement","src":"7300:30:17"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7230:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"7238:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7246:5:17","type":""}],"src":"7203:133:17"},{"body":{"nodeType":"YulBlock","src":"7439:516:17","statements":[{"body":{"nodeType":"YulBlock","src":"7485:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7487:77:17"},"nodeType":"YulFunctionCall","src":"7487:79:17"},"nodeType":"YulExpressionStatement","src":"7487:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7460:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7469:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7456:3:17"},"nodeType":"YulFunctionCall","src":"7456:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7481:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7452:3:17"},"nodeType":"YulFunctionCall","src":"7452:32:17"},"nodeType":"YulIf","src":"7449:119:17"},{"nodeType":"YulBlock","src":"7578:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7593:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7607:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7597:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7622:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7657:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7668:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7653:3:17"},"nodeType":"YulFunctionCall","src":"7653:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7677:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7632:20:17"},"nodeType":"YulFunctionCall","src":"7632:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7622:6:17"}]}]},{"nodeType":"YulBlock","src":"7705:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7720:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7734:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7724:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7750:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7785:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7796:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7781:3:17"},"nodeType":"YulFunctionCall","src":"7781:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7805:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7760:20:17"},"nodeType":"YulFunctionCall","src":"7760:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7750:6:17"}]}]},{"nodeType":"YulBlock","src":"7833:115:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7848:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7862:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7852:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7878:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7910:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7921:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7906:3:17"},"nodeType":"YulFunctionCall","src":"7906:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7930:7:17"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7888:17:17"},"nodeType":"YulFunctionCall","src":"7888:50:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7878:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7393:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7404:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7416:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7424:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7432:6:17","type":""}],"src":"7342:613:17"},{"body":{"nodeType":"YulBlock","src":"8050:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8067:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8070:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8060:6:17"},"nodeType":"YulFunctionCall","src":"8060:12:17"},"nodeType":"YulExpressionStatement","src":"8060:12:17"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"7961:117:17"},{"body":{"nodeType":"YulBlock","src":"8171:478:17","statements":[{"body":{"nodeType":"YulBlock","src":"8220:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8222:77:17"},"nodeType":"YulFunctionCall","src":"8222:79:17"},"nodeType":"YulExpressionStatement","src":"8222:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8199:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8207:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8195:3:17"},"nodeType":"YulFunctionCall","src":"8195:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"8214:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8191:3:17"},"nodeType":"YulFunctionCall","src":"8191:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8184:6:17"},"nodeType":"YulFunctionCall","src":"8184:35:17"},"nodeType":"YulIf","src":"8181:122:17"},{"nodeType":"YulAssignment","src":"8312:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8335:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8322:12:17"},"nodeType":"YulFunctionCall","src":"8322:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8312:6:17"}]},{"body":{"nodeType":"YulBlock","src":"8385:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"8387:77:17"},"nodeType":"YulFunctionCall","src":"8387:79:17"},"nodeType":"YulExpressionStatement","src":"8387:79:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8357:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8365:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8354:2:17"},"nodeType":"YulFunctionCall","src":"8354:30:17"},"nodeType":"YulIf","src":"8351:117:17"},{"nodeType":"YulAssignment","src":"8477:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8493:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8501:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8489:3:17"},"nodeType":"YulFunctionCall","src":"8489:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8477:8:17"}]},{"body":{"nodeType":"YulBlock","src":"8560:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8562:77:17"},"nodeType":"YulFunctionCall","src":"8562:79:17"},"nodeType":"YulExpressionStatement","src":"8562:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8525:8:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8539:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8547:4:17","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8535:3:17"},"nodeType":"YulFunctionCall","src":"8535:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8521:3:17"},"nodeType":"YulFunctionCall","src":"8521:32:17"},{"name":"end","nodeType":"YulIdentifier","src":"8555:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8518:2:17"},"nodeType":"YulFunctionCall","src":"8518:41:17"},"nodeType":"YulIf","src":"8515:128:17"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8138:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"8146:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"8154:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"8164:6:17","type":""}],"src":"8097:552:17"},{"body":{"nodeType":"YulBlock","src":"8740:442:17","statements":[{"body":{"nodeType":"YulBlock","src":"8786:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8788:77:17"},"nodeType":"YulFunctionCall","src":"8788:79:17"},"nodeType":"YulExpressionStatement","src":"8788:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8761:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8770:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8757:3:17"},"nodeType":"YulFunctionCall","src":"8757:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8782:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8753:3:17"},"nodeType":"YulFunctionCall","src":"8753:32:17"},"nodeType":"YulIf","src":"8750:119:17"},{"nodeType":"YulBlock","src":"8879:296:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8894:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8925:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8936:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8921:3:17"},"nodeType":"YulFunctionCall","src":"8921:17:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8908:12:17"},"nodeType":"YulFunctionCall","src":"8908:31:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8898:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8986:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8988:77:17"},"nodeType":"YulFunctionCall","src":"8988:79:17"},"nodeType":"YulExpressionStatement","src":"8988:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8958:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8966:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8955:2:17"},"nodeType":"YulFunctionCall","src":"8955:30:17"},"nodeType":"YulIf","src":"8952:117:17"},{"nodeType":"YulAssignment","src":"9083:82:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9137:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"9148:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9133:3:17"},"nodeType":"YulFunctionCall","src":"9133:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9157:7:17"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"9101:31:17"},"nodeType":"YulFunctionCall","src":"9101:64:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9083:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"9091:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8702:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8713:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8725:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8733:6:17","type":""}],"src":"8655:527:17"},{"body":{"nodeType":"YulBlock","src":"9254:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"9300:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9302:77:17"},"nodeType":"YulFunctionCall","src":"9302:79:17"},"nodeType":"YulExpressionStatement","src":"9302:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9275:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"9284:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9271:3:17"},"nodeType":"YulFunctionCall","src":"9271:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"9296:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9267:3:17"},"nodeType":"YulFunctionCall","src":"9267:32:17"},"nodeType":"YulIf","src":"9264:119:17"},{"nodeType":"YulBlock","src":"9393:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"9408:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"9422:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9412:6:17","type":""}]},{"nodeType":"YulAssignment","src":"9437:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9472:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"9483:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9468:3:17"},"nodeType":"YulFunctionCall","src":"9468:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9492:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9447:20:17"},"nodeType":"YulFunctionCall","src":"9447:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9437:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9224:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9235:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9247:6:17","type":""}],"src":"9188:329:17"},{"body":{"nodeType":"YulBlock","src":"9551:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9568:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9571:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9561:6:17"},"nodeType":"YulFunctionCall","src":"9561:88:17"},"nodeType":"YulExpressionStatement","src":"9561:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9665:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9668:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9658:6:17"},"nodeType":"YulFunctionCall","src":"9658:15:17"},"nodeType":"YulExpressionStatement","src":"9658:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9689:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9692:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9682:6:17"},"nodeType":"YulFunctionCall","src":"9682:15:17"},"nodeType":"YulExpressionStatement","src":"9682:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9523:180:17"},{"body":{"nodeType":"YulBlock","src":"9805:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9822:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"9827:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9815:6:17"},"nodeType":"YulFunctionCall","src":"9815:19:17"},"nodeType":"YulExpressionStatement","src":"9815:19:17"},{"nodeType":"YulAssignment","src":"9843:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9862:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"9867:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9858:3:17"},"nodeType":"YulFunctionCall","src":"9858:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9843:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9777:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"9782:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9793:11:17","type":""}],"src":"9709:169:17"},{"body":{"nodeType":"YulBlock","src":"9990:66:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10012:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"10020:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10008:3:17"},"nodeType":"YulFunctionCall","src":"10008:14:17"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"10024:24:17","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10001:6:17"},"nodeType":"YulFunctionCall","src":"10001:48:17"},"nodeType":"YulExpressionStatement","src":"10001:48:17"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9982:6:17","type":""}],"src":"9884:172:17"},{"body":{"nodeType":"YulBlock","src":"10208:220:17","statements":[{"nodeType":"YulAssignment","src":"10218:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10284:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"10289:2:17","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10225:58:17"},"nodeType":"YulFunctionCall","src":"10225:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10218:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10390:3:17"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"10301:88:17"},"nodeType":"YulFunctionCall","src":"10301:93:17"},"nodeType":"YulExpressionStatement","src":"10301:93:17"},{"nodeType":"YulAssignment","src":"10403:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10414:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"10419:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10410:3:17"},"nodeType":"YulFunctionCall","src":"10410:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10403:3:17"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10196:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10204:3:17","type":""}],"src":"10062:366:17"},{"body":{"nodeType":"YulBlock","src":"10605:248:17","statements":[{"nodeType":"YulAssignment","src":"10615:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10627:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10638:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10623:3:17"},"nodeType":"YulFunctionCall","src":"10623:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10615:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10662:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10673:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10658:3:17"},"nodeType":"YulFunctionCall","src":"10658:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10681:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10687:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10677:3:17"},"nodeType":"YulFunctionCall","src":"10677:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10651:6:17"},"nodeType":"YulFunctionCall","src":"10651:47:17"},"nodeType":"YulExpressionStatement","src":"10651:47:17"},{"nodeType":"YulAssignment","src":"10707:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10841:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10715:124:17"},"nodeType":"YulFunctionCall","src":"10715:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10707:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10585:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10600:4:17","type":""}],"src":"10434:419:17"},{"body":{"nodeType":"YulBlock","src":"10922:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10939:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10961:5:17"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"10944:16:17"},"nodeType":"YulFunctionCall","src":"10944:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10932:6:17"},"nodeType":"YulFunctionCall","src":"10932:36:17"},"nodeType":"YulExpressionStatement","src":"10932:36:17"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10910:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10917:3:17","type":""}],"src":"10859:115:17"},{"body":{"nodeType":"YulBlock","src":"11076:122:17","statements":[{"nodeType":"YulAssignment","src":"11086:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11098:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11109:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11094:3:17"},"nodeType":"YulFunctionCall","src":"11094:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11086:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11164:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11177:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11188:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11173:3:17"},"nodeType":"YulFunctionCall","src":"11173:17:17"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"11122:41:17"},"nodeType":"YulFunctionCall","src":"11122:69:17"},"nodeType":"YulExpressionStatement","src":"11122:69:17"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11048:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11060:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11071:4:17","type":""}],"src":"10980:218:17"},{"body":{"nodeType":"YulBlock","src":"11269:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11286:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11309:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11291:17:17"},"nodeType":"YulFunctionCall","src":"11291:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11279:6:17"},"nodeType":"YulFunctionCall","src":"11279:37:17"},"nodeType":"YulExpressionStatement","src":"11279:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11257:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11264:3:17","type":""}],"src":"11204:118:17"},{"body":{"nodeType":"YulBlock","src":"11387:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11404:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11424:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11409:14:17"},"nodeType":"YulFunctionCall","src":"11409:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11397:6:17"},"nodeType":"YulFunctionCall","src":"11397:34:17"},"nodeType":"YulExpressionStatement","src":"11397:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11375:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11382:3:17","type":""}],"src":"11328:109:17"},{"body":{"nodeType":"YulBlock","src":"11591:282:17","statements":[{"nodeType":"YulAssignment","src":"11601:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11613:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11624:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11609:3:17"},"nodeType":"YulFunctionCall","src":"11609:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11601:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11681:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11694:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11705:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11690:3:17"},"nodeType":"YulFunctionCall","src":"11690:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11637:43:17"},"nodeType":"YulFunctionCall","src":"11637:71:17"},"nodeType":"YulExpressionStatement","src":"11637:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11762:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11775:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11786:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11771:3:17"},"nodeType":"YulFunctionCall","src":"11771:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11718:43:17"},"nodeType":"YulFunctionCall","src":"11718:72:17"},"nodeType":"YulExpressionStatement","src":"11718:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11838:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11851:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11862:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11847:3:17"},"nodeType":"YulFunctionCall","src":"11847:18:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"11800:37:17"},"nodeType":"YulFunctionCall","src":"11800:66:17"},"nodeType":"YulExpressionStatement","src":"11800:66:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11547:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11559:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11567:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11575:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11586:4:17","type":""}],"src":"11443:430:17"},{"body":{"nodeType":"YulBlock","src":"11944:31:17","statements":[{"nodeType":"YulAssignment","src":"11955:13:17","value":{"name":"len","nodeType":"YulIdentifier","src":"11965:3:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11955:6:17"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11922:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"11929:3:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11937:6:17","type":""}],"src":"11879:96:17"},{"body":{"nodeType":"YulBlock","src":"12009:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12026:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12029:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12019:6:17"},"nodeType":"YulFunctionCall","src":"12019:88:17"},"nodeType":"YulExpressionStatement","src":"12019:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12123:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12126:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12116:6:17"},"nodeType":"YulFunctionCall","src":"12116:15:17"},"nodeType":"YulExpressionStatement","src":"12116:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12147:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12150:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12140:6:17"},"nodeType":"YulFunctionCall","src":"12140:15:17"},"nodeType":"YulExpressionStatement","src":"12140:15:17"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"11981:180:17"},{"body":{"nodeType":"YulBlock","src":"12218:269:17","statements":[{"nodeType":"YulAssignment","src":"12228:22:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12242:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"12248:1:17","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12238:3:17"},"nodeType":"YulFunctionCall","src":"12238:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12228:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"12259:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12289:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"12295:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12285:3:17"},"nodeType":"YulFunctionCall","src":"12285:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12263:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"12336:51:17","statements":[{"nodeType":"YulAssignment","src":"12350:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12364:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12372:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12360:3:17"},"nodeType":"YulFunctionCall","src":"12360:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12350:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12316:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12309:6:17"},"nodeType":"YulFunctionCall","src":"12309:26:17"},"nodeType":"YulIf","src":"12306:81:17"},{"body":{"nodeType":"YulBlock","src":"12439:42:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"12453:16:17"},"nodeType":"YulFunctionCall","src":"12453:18:17"},"nodeType":"YulExpressionStatement","src":"12453:18:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12403:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12426:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12434:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12423:2:17"},"nodeType":"YulFunctionCall","src":"12423:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12400:2:17"},"nodeType":"YulFunctionCall","src":"12400:38:17"},"nodeType":"YulIf","src":"12397:84:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12202:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12211:6:17","type":""}],"src":"12167:320:17"},{"body":{"nodeType":"YulBlock","src":"12546:87:17","statements":[{"nodeType":"YulAssignment","src":"12556:11:17","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12564:3:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12556:4:17"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12584:1:17","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12587:3:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12577:6:17"},"nodeType":"YulFunctionCall","src":"12577:14:17"},"nodeType":"YulExpressionStatement","src":"12577:14:17"},{"nodeType":"YulAssignment","src":"12600:26:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12618:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12621:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12608:9:17"},"nodeType":"YulFunctionCall","src":"12608:18:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12600:4:17"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12533:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12541:4:17","type":""}],"src":"12493:140:17"},{"body":{"nodeType":"YulBlock","src":"12683:49:17","statements":[{"nodeType":"YulAssignment","src":"12693:33:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12711:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"12718:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12707:3:17"},"nodeType":"YulFunctionCall","src":"12707:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"12723:2:17","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12703:3:17"},"nodeType":"YulFunctionCall","src":"12703:23:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12693:6:17"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12666:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12676:6:17","type":""}],"src":"12639:93:17"},{"body":{"nodeType":"YulBlock","src":"12791:54:17","statements":[{"nodeType":"YulAssignment","src":"12801:37:17","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"12826:4:17"},{"name":"value","nodeType":"YulIdentifier","src":"12832:5:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12822:3:17"},"nodeType":"YulFunctionCall","src":"12822:16:17"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"12801:8:17"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"12766:4:17","type":""},{"name":"value","nodeType":"YulTypedName","src":"12772:5:17","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"12782:8:17","type":""}],"src":"12738:107:17"},{"body":{"nodeType":"YulBlock","src":"12927:317:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12937:35:17","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"12958:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"12970:1:17","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12954:3:17"},"nodeType":"YulFunctionCall","src":"12954:18:17"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"12941:9:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12981:109:17","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13012:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13023:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"12993:18:17"},"nodeType":"YulFunctionCall","src":"12993:97:17"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"12985:4:17","type":""}]},{"nodeType":"YulAssignment","src":"13099:51:17","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13130:9:17"},{"name":"toInsert","nodeType":"YulIdentifier","src":"13141:8:17"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13111:18:17"},"nodeType":"YulFunctionCall","src":"13111:39:17"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13099:8:17"}]},{"nodeType":"YulAssignment","src":"13159:30:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13172:5:17"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"13183:4:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13179:3:17"},"nodeType":"YulFunctionCall","src":"13179:9:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13168:3:17"},"nodeType":"YulFunctionCall","src":"13168:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13159:5:17"}]},{"nodeType":"YulAssignment","src":"13198:40:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13211:5:17"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13222:8:17"},{"name":"mask","nodeType":"YulIdentifier","src":"13232:4:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13218:3:17"},"nodeType":"YulFunctionCall","src":"13218:19:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13208:2:17"},"nodeType":"YulFunctionCall","src":"13208:30:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"13198:6:17"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12888:5:17","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"12895:10:17","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"12907:8:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12920:6:17","type":""}],"src":"12851:393:17"},{"body":{"nodeType":"YulBlock","src":"13295:32:17","statements":[{"nodeType":"YulAssignment","src":"13305:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13316:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13305:7:17"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13277:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13287:7:17","type":""}],"src":"13250:77:17"},{"body":{"nodeType":"YulBlock","src":"13365:28:17","statements":[{"nodeType":"YulAssignment","src":"13375:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13382:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13375:3:17"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13351:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13361:3:17","type":""}],"src":"13333:60:17"},{"body":{"nodeType":"YulBlock","src":"13459:82:17","statements":[{"nodeType":"YulAssignment","src":"13469:66:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13527:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13509:17:17"},"nodeType":"YulFunctionCall","src":"13509:24:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"13500:8:17"},"nodeType":"YulFunctionCall","src":"13500:34:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13482:17:17"},"nodeType":"YulFunctionCall","src":"13482:53:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13469:9:17"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13439:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13449:9:17","type":""}],"src":"13399:142:17"},{"body":{"nodeType":"YulBlock","src":"13594:28:17","statements":[{"nodeType":"YulAssignment","src":"13604:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13611:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13604:3:17"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13580:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13590:3:17","type":""}],"src":"13547:75:17"},{"body":{"nodeType":"YulBlock","src":"13704:193:17","statements":[{"nodeType":"YulVariableDeclaration","src":"13714:63:17","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"13769:7:17"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13738:30:17"},"nodeType":"YulFunctionCall","src":"13738:39:17"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"13718:16:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13793:4:17"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13833:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13827:5:17"},"nodeType":"YulFunctionCall","src":"13827:11:17"},{"name":"offset","nodeType":"YulIdentifier","src":"13840:6:17"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"13872:16:17"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"13848:23:17"},"nodeType":"YulFunctionCall","src":"13848:41:17"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"13799:27:17"},"nodeType":"YulFunctionCall","src":"13799:91:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13786:6:17"},"nodeType":"YulFunctionCall","src":"13786:105:17"},"nodeType":"YulExpressionStatement","src":"13786:105:17"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13681:4:17","type":""},{"name":"offset","nodeType":"YulTypedName","src":"13687:6:17","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"13695:7:17","type":""}],"src":"13628:269:17"},{"body":{"nodeType":"YulBlock","src":"13952:24:17","statements":[{"nodeType":"YulAssignment","src":"13962:8:17","value":{"kind":"number","nodeType":"YulLiteral","src":"13969:1:17","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13962:3:17"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13948:3:17","type":""}],"src":"13903:73:17"},{"body":{"nodeType":"YulBlock","src":"14035:136:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14045:46:17","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"14059:30:17"},"nodeType":"YulFunctionCall","src":"14059:32:17"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"14049:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14144:4:17"},{"name":"offset","nodeType":"YulIdentifier","src":"14150:6:17"},{"name":"zero_0","nodeType":"YulIdentifier","src":"14158:6:17"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14100:43:17"},"nodeType":"YulFunctionCall","src":"14100:65:17"},"nodeType":"YulExpressionStatement","src":"14100:65:17"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"14021:4:17","type":""},{"name":"offset","nodeType":"YulTypedName","src":"14027:6:17","type":""}],"src":"13982:189:17"},{"body":{"nodeType":"YulBlock","src":"14227:136:17","statements":[{"body":{"nodeType":"YulBlock","src":"14294:63:17","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14338:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14345:1:17","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"14308:29:17"},"nodeType":"YulFunctionCall","src":"14308:39:17"},"nodeType":"YulExpressionStatement","src":"14308:39:17"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14247:5:17"},{"name":"end","nodeType":"YulIdentifier","src":"14254:3:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14244:2:17"},"nodeType":"YulFunctionCall","src":"14244:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14259:26:17","statements":[{"nodeType":"YulAssignment","src":"14261:22:17","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14274:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14281:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14270:3:17"},"nodeType":"YulFunctionCall","src":"14270:13:17"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"14261:5:17"}]}]},"pre":{"nodeType":"YulBlock","src":"14241:2:17","statements":[]},"src":"14237:120:17"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"14215:5:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"14222:3:17","type":""}],"src":"14177:186:17"},{"body":{"nodeType":"YulBlock","src":"14447:463:17","statements":[{"body":{"nodeType":"YulBlock","src":"14473:430:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14487:53:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14534:5:17"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"14503:30:17"},"nodeType":"YulFunctionCall","src":"14503:37:17"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"14491:8:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14553:63:17","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14576:8:17"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14604:10:17"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14586:17:17"},"nodeType":"YulFunctionCall","src":"14586:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14572:3:17"},"nodeType":"YulFunctionCall","src":"14572:44:17"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"14557:11:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"14773:27:17","statements":[{"nodeType":"YulAssignment","src":"14775:23:17","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"14790:8:17"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14775:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14757:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"14769:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14754:2:17"},"nodeType":"YulFunctionCall","src":"14754:18:17"},"nodeType":"YulIf","src":"14751:49:17"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14842:11:17"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14859:8:17"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14887:3:17"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14869:17:17"},"nodeType":"YulFunctionCall","src":"14869:22:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14855:3:17"},"nodeType":"YulFunctionCall","src":"14855:37:17"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"14813:28:17"},"nodeType":"YulFunctionCall","src":"14813:80:17"},"nodeType":"YulExpressionStatement","src":"14813:80:17"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14464:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14469:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14461:2:17"},"nodeType":"YulFunctionCall","src":"14461:11:17"},"nodeType":"YulIf","src":"14458:445:17"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14423:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"14430:3:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14435:10:17","type":""}],"src":"14369:541:17"},{"body":{"nodeType":"YulBlock","src":"14979:54:17","statements":[{"nodeType":"YulAssignment","src":"14989:37:17","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"15014:4:17"},{"name":"value","nodeType":"YulIdentifier","src":"15020:5:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15010:3:17"},"nodeType":"YulFunctionCall","src":"15010:16:17"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"14989:8:17"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"14954:4:17","type":""},{"name":"value","nodeType":"YulTypedName","src":"14960:5:17","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"14970:8:17","type":""}],"src":"14916:117:17"},{"body":{"nodeType":"YulBlock","src":"15090:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15100:68:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15149:1:17","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"15152:5:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15145:3:17"},"nodeType":"YulFunctionCall","src":"15145:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15164:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15160:3:17"},"nodeType":"YulFunctionCall","src":"15160:6:17"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"15116:28:17"},"nodeType":"YulFunctionCall","src":"15116:51:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15112:3:17"},"nodeType":"YulFunctionCall","src":"15112:56:17"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"15104:4:17","type":""}]},{"nodeType":"YulAssignment","src":"15177:25:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15191:4:17"},{"name":"mask","nodeType":"YulIdentifier","src":"15197:4:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15187:3:17"},"nodeType":"YulFunctionCall","src":"15187:15:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15177:6:17"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15067:4:17","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"15073:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"15083:6:17","type":""}],"src":"15039:169:17"},{"body":{"nodeType":"YulBlock","src":"15294:214:17","statements":[{"nodeType":"YulAssignment","src":"15427:37:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15454:4:17"},{"name":"len","nodeType":"YulIdentifier","src":"15460:3:17"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"15435:18:17"},"nodeType":"YulFunctionCall","src":"15435:29:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15427:4:17"}]},{"nodeType":"YulAssignment","src":"15473:29:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15484:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15494:1:17","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"15497:3:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15490:3:17"},"nodeType":"YulFunctionCall","src":"15490:11:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15481:2:17"},"nodeType":"YulFunctionCall","src":"15481:21:17"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"15473:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15275:4:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"15281:3:17","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"15289:4:17","type":""}],"src":"15213:295:17"},{"body":{"nodeType":"YulBlock","src":"15610:1301:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15621:57:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15669:3:17"},{"name":"len","nodeType":"YulIdentifier","src":"15674:3:17"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"15635:33:17"},"nodeType":"YulFunctionCall","src":"15635:43:17"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15625:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"15763:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15765:16:17"},"nodeType":"YulFunctionCall","src":"15765:18:17"},"nodeType":"YulExpressionStatement","src":"15765:18:17"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15735:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"15743:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15732:2:17"},"nodeType":"YulFunctionCall","src":"15732:30:17"},"nodeType":"YulIf","src":"15729:56:17"},{"nodeType":"YulVariableDeclaration","src":"15795:52:17","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15841:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15835:5:17"},"nodeType":"YulFunctionCall","src":"15835:11:17"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15809:25:17"},"nodeType":"YulFunctionCall","src":"15809:38:17"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"15799:6:17","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15939:4:17"},{"name":"oldLen","nodeType":"YulIdentifier","src":"15945:6:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"15953:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"15894:44:17"},"nodeType":"YulFunctionCall","src":"15894:66:17"},"nodeType":"YulExpressionStatement","src":"15894:66:17"},{"nodeType":"YulVariableDeclaration","src":"15970:18:17","value":{"kind":"number","nodeType":"YulLiteral","src":"15987:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"15974:9:17","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16035:624:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16049:37:17","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16068:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16080:4:17","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16076:3:17"},"nodeType":"YulFunctionCall","src":"16076:9:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16064:3:17"},"nodeType":"YulFunctionCall","src":"16064:22:17"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16053:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16100:50:17","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16145:4:17"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"16114:30:17"},"nodeType":"YulFunctionCall","src":"16114:36:17"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16104:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16163:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16172:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16167:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"16231:170:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16256:6:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16281:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16286:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16277:3:17"},"nodeType":"YulFunctionCall","src":"16277:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16264:12:17"},"nodeType":"YulFunctionCall","src":"16264:33:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16249:6:17"},"nodeType":"YulFunctionCall","src":"16249:49:17"},"nodeType":"YulExpressionStatement","src":"16249:49:17"},{"nodeType":"YulAssignment","src":"16315:24:17","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16329:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16337:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16325:3:17"},"nodeType":"YulFunctionCall","src":"16325:14:17"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16315:6:17"}]},{"nodeType":"YulAssignment","src":"16356:31:17","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16373:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16384:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16369:3:17"},"nodeType":"YulFunctionCall","src":"16369:18:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16356:9:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16197:1:17"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16200:7:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16194:2:17"},"nodeType":"YulFunctionCall","src":"16194:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16209:21:17","statements":[{"nodeType":"YulAssignment","src":"16211:17:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16220:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"16223:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16216:3:17"},"nodeType":"YulFunctionCall","src":"16216:12:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16211:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"16190:3:17","statements":[]},"src":"16186:215:17"},{"body":{"nodeType":"YulBlock","src":"16437:163:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16455:50:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16489:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16494:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16485:3:17"},"nodeType":"YulFunctionCall","src":"16485:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16472:12:17"},"nodeType":"YulFunctionCall","src":"16472:33:17"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16459:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16529:6:17"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16556:9:17"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16571:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16579:4:17","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16567:3:17"},"nodeType":"YulFunctionCall","src":"16567:17:17"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"16537:18:17"},"nodeType":"YulFunctionCall","src":"16537:48:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16522:6:17"},"nodeType":"YulFunctionCall","src":"16522:64:17"},"nodeType":"YulExpressionStatement","src":"16522:64:17"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16420:7:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"16429:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16417:2:17"},"nodeType":"YulFunctionCall","src":"16417:19:17"},"nodeType":"YulIf","src":"16414:186:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16620:4:17"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16634:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16642:1:17","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16630:3:17"},"nodeType":"YulFunctionCall","src":"16630:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"16646:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16626:3:17"},"nodeType":"YulFunctionCall","src":"16626:22:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16613:6:17"},"nodeType":"YulFunctionCall","src":"16613:36:17"},"nodeType":"YulExpressionStatement","src":"16613:36:17"}]},"nodeType":"YulCase","src":"16028:631:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16033:1:17","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16676:229:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16690:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"16703:1:17","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16694:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"16727:74:17","statements":[{"nodeType":"YulAssignment","src":"16745:42:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16771:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16776:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16767:3:17"},"nodeType":"YulFunctionCall","src":"16767:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16754:12:17"},"nodeType":"YulFunctionCall","src":"16754:33:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16745:5:17"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16720:6:17"},"nodeType":"YulIf","src":"16717:84:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16821:4:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16880:5:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"16887:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16827:52:17"},"nodeType":"YulFunctionCall","src":"16827:67:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16814:6:17"},"nodeType":"YulFunctionCall","src":"16814:81:17"},"nodeType":"YulExpressionStatement","src":"16814:81:17"}]},"nodeType":"YulCase","src":"16668:237:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16008:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16016:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16005:2:17"},"nodeType":"YulFunctionCall","src":"16005:14:17"},"nodeType":"YulSwitch","src":"15998:907:17"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15594:4:17","type":""},{"name":"src","nodeType":"YulTypedName","src":"15600:3:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"15605:3:17","type":""}],"src":"15513:1398:17"},{"body":{"nodeType":"YulBlock","src":"17012:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17029:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17034:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17022:6:17"},"nodeType":"YulFunctionCall","src":"17022:19:17"},"nodeType":"YulExpressionStatement","src":"17022:19:17"},{"nodeType":"YulAssignment","src":"17050:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17069:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"17074:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17065:3:17"},"nodeType":"YulFunctionCall","src":"17065:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17050:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16984:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"16989:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17000:11:17","type":""}],"src":"16917:168:17"},{"body":{"nodeType":"YulBlock","src":"17155:82:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17178:3:17"},{"name":"src","nodeType":"YulIdentifier","src":"17183:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17188:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17165:12:17"},"nodeType":"YulFunctionCall","src":"17165:30:17"},"nodeType":"YulExpressionStatement","src":"17165:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17215:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17220:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17211:3:17"},"nodeType":"YulFunctionCall","src":"17211:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"17229:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17204:6:17"},"nodeType":"YulFunctionCall","src":"17204:27:17"},"nodeType":"YulExpressionStatement","src":"17204:27:17"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"17137:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"17142:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"17147:6:17","type":""}],"src":"17091:146:17"},{"body":{"nodeType":"YulBlock","src":"17365:214:17","statements":[{"nodeType":"YulAssignment","src":"17375:77:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17440:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17445:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17382:57:17"},"nodeType":"YulFunctionCall","src":"17382:70:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17375:3:17"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17499:5:17"},{"name":"pos","nodeType":"YulIdentifier","src":"17506:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"17511:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17462:36:17"},"nodeType":"YulFunctionCall","src":"17462:56:17"},"nodeType":"YulExpressionStatement","src":"17462:56:17"},{"nodeType":"YulAssignment","src":"17527:46:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17538:3:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17565:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17543:21:17"},"nodeType":"YulFunctionCall","src":"17543:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17534:3:17"},"nodeType":"YulFunctionCall","src":"17534:39:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17527:3:17"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"17338:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"17345:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17353:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17361:3:17","type":""}],"src":"17265:314:17"},{"body":{"nodeType":"YulBlock","src":"17711:203:17","statements":[{"nodeType":"YulAssignment","src":"17721:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17733:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17744:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17729:3:17"},"nodeType":"YulFunctionCall","src":"17729:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17721:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17768:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17779:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17764:3:17"},"nodeType":"YulFunctionCall","src":"17764:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17787:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17793:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17783:3:17"},"nodeType":"YulFunctionCall","src":"17783:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17757:6:17"},"nodeType":"YulFunctionCall","src":"17757:47:17"},"nodeType":"YulExpressionStatement","src":"17757:47:17"},{"nodeType":"YulAssignment","src":"17813:94:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17885:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"17893:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"17902:4:17"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17821:63:17"},"nodeType":"YulFunctionCall","src":"17821:86:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17813:4:17"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17675:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17687:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17695:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17706:4:17","type":""}],"src":"17585:329:17"},{"body":{"nodeType":"YulBlock","src":"18026:119:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18048:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"18056:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18044:3:17"},"nodeType":"YulFunctionCall","src":"18044:14:17"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18060:34:17","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18037:6:17"},"nodeType":"YulFunctionCall","src":"18037:58:17"},"nodeType":"YulExpressionStatement","src":"18037:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18116:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"18124:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18112:3:17"},"nodeType":"YulFunctionCall","src":"18112:15:17"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18129:8:17","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18105:6:17"},"nodeType":"YulFunctionCall","src":"18105:33:17"},"nodeType":"YulExpressionStatement","src":"18105:33:17"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18018:6:17","type":""}],"src":"17920:225:17"},{"body":{"nodeType":"YulBlock","src":"18297:220:17","statements":[{"nodeType":"YulAssignment","src":"18307:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18373:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"18378:2:17","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18314:58:17"},"nodeType":"YulFunctionCall","src":"18314:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18307:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18479:3:17"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"18390:88:17"},"nodeType":"YulFunctionCall","src":"18390:93:17"},"nodeType":"YulExpressionStatement","src":"18390:93:17"},{"nodeType":"YulAssignment","src":"18492:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"18508:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18499:3:17"},"nodeType":"YulFunctionCall","src":"18499:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18492:3:17"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18285:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18293:3:17","type":""}],"src":"18151:366:17"},{"body":{"nodeType":"YulBlock","src":"18694:248:17","statements":[{"nodeType":"YulAssignment","src":"18704:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18716:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18727:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18712:3:17"},"nodeType":"YulFunctionCall","src":"18712:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18704:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18751:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18762:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18747:3:17"},"nodeType":"YulFunctionCall","src":"18747:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18770:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"18776:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18766:3:17"},"nodeType":"YulFunctionCall","src":"18766:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18740:6:17"},"nodeType":"YulFunctionCall","src":"18740:47:17"},"nodeType":"YulExpressionStatement","src":"18740:47:17"},{"nodeType":"YulAssignment","src":"18796:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18930:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18804:124:17"},"nodeType":"YulFunctionCall","src":"18804:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18796:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18674:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18689:4:17","type":""}],"src":"18523:419:17"},{"body":{"nodeType":"YulBlock","src":"19054:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19076:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19084:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19072:3:17"},"nodeType":"YulFunctionCall","src":"19072:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19088:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19065:6:17"},"nodeType":"YulFunctionCall","src":"19065:58:17"},"nodeType":"YulExpressionStatement","src":"19065:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19046:6:17","type":""}],"src":"18948:182:17"},{"body":{"nodeType":"YulBlock","src":"19282:220:17","statements":[{"nodeType":"YulAssignment","src":"19292:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19358:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"19363:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19299:58:17"},"nodeType":"YulFunctionCall","src":"19299:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19292:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19464:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"19375:88:17"},"nodeType":"YulFunctionCall","src":"19375:93:17"},"nodeType":"YulExpressionStatement","src":"19375:93:17"},{"nodeType":"YulAssignment","src":"19477:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19488:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"19493:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19484:3:17"},"nodeType":"YulFunctionCall","src":"19484:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19477:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19270:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19278:3:17","type":""}],"src":"19136:366:17"},{"body":{"nodeType":"YulBlock","src":"19679:248:17","statements":[{"nodeType":"YulAssignment","src":"19689:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19701:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19712:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19697:3:17"},"nodeType":"YulFunctionCall","src":"19697:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19689:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19736:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19747:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19732:3:17"},"nodeType":"YulFunctionCall","src":"19732:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19755:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"19761:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19751:3:17"},"nodeType":"YulFunctionCall","src":"19751:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19725:6:17"},"nodeType":"YulFunctionCall","src":"19725:47:17"},"nodeType":"YulExpressionStatement","src":"19725:47:17"},{"nodeType":"YulAssignment","src":"19781:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19915:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19789:124:17"},"nodeType":"YulFunctionCall","src":"19789:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19781:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19659:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19674:4:17","type":""}],"src":"19508:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct SharedStructs.Institution\n    function abi_decode_t_struct$_Institution_$4029_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct SharedStructs.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$4029_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct SharedStructs.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$4029_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a14565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610ace565b610285565b005b6100e960048036038101906100e49190610b4e565b61042b565b005b6100f3610496565b6040516101009190610b8a565b60405180910390f35b610123600480360381019061011e9190610bdd565b6104c0565b005b61013f600480360381019061013a9190610c8b565b6105f6565b005b61015b60048036038101906101569190610cd8565b61064d565b005b6101656106d0565b60008151905060005b8181101561026b57609c600085815260200190815260200160002083828151811061019c5761019b610d05565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d05565b5b602002602001015160200151815260200185815250609d600085848151811061022d5761022c610d05565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106d0565b610283600061074e565b565b61028d6106d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610d91565b60405180910390fd5b7f747265617375727900000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7fd8ef77a7d69a6b79f131ecd9aa37060ba0853bbd37cb175ec1abd05738ce27cb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161041f9190610b8a565b60405180910390a15050565b6104336106d0565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fb94068a4bd2571acee6ac79acc9dcdcf10c31425d35f09e88f154ec520e264468160405161048b9190610dc0565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104c86106d0565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90610d91565b60405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036105b65780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516105e993929190610df9565b60405180910390a1505050565b6105fe6106d0565b81816068918261060f929190611051565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef828260405161064192919061116e565b60405180910390a15050565b6106556106d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90611204565b60405180910390fd5b6106cd8161074e565b50565b6106d8610814565b73ffffffffffffffffffffffffffffffffffffffff166106f6610496565b73ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390611270565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61084381610830565b811461084e57600080fd5b50565b6000813590506108608161083a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108b48261086b565b810181811067ffffffffffffffff821117156108d3576108d261087c565b5b80604052505050565b60006108e661081c565b90506108f282826108ab565b919050565b600067ffffffffffffffff8211156109125761091161087c565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006040828403121561094357610942610928565b5b61094d60406108dc565b9050600061095d84828501610851565b600083015250602061097184828501610851565b60208301525092915050565b600061099061098b846108f7565b6108dc565b905080838252602082019050604084028301858111156109b3576109b2610923565b5b835b818110156109dc57806109c8888261092d565b8452602084019350506040810190506109b5565b5050509392505050565b600082601f8301126109fb576109fa610866565b5b8135610a0b84826020860161097d565b91505092915050565b60008060408385031215610a2b57610a2a610826565b5b6000610a3985828601610851565b925050602083013567ffffffffffffffff811115610a5a57610a5961082b565b5b610a66858286016109e6565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9b82610a70565b9050919050565b610aab81610a90565b8114610ab657600080fd5b50565b600081359050610ac881610aa2565b92915050565b60008060408385031215610ae557610ae4610826565b5b6000610af385828601610851565b9250506020610b0485828601610ab9565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b2b81610b0e565b8114610b3657600080fd5b50565b600081359050610b4881610b22565b92915050565b600060208284031215610b6457610b63610826565b5b6000610b7284828501610b39565b91505092915050565b610b8481610a90565b82525050565b6000602082019050610b9f6000830184610b7b565b92915050565b60008115159050919050565b610bba81610ba5565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b600080600060608486031215610bf657610bf5610826565b5b6000610c0486828701610851565b9350506020610c1586828701610ab9565b9250506040610c2686828701610bc8565b9150509250925092565b600080fd5b60008083601f840112610c4b57610c4a610866565b5b8235905067ffffffffffffffff811115610c6857610c67610c30565b5b602083019150836001820283011115610c8457610c83610923565b5b9250929050565b60008060208385031215610ca257610ca1610826565b5b600083013567ffffffffffffffff811115610cc057610cbf61082b565b5b610ccc85828601610c35565b92509250509250929050565b600060208284031215610cee57610ced610826565b5b6000610cfc84828501610ab9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610d7b601683610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b610dba81610b0e565b82525050565b6000602082019050610dd56000830184610db1565b92915050565b610de481610830565b82525050565b610df381610ba5565b82525050565b6000606082019050610e0e6000830186610ddb565b610e1b6020830185610b7b565b610e286040830184610dea565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e8257607f821691505b602082108103610e9557610e94610e3b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610efd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ec0565b610f078683610ec0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f4e610f49610f4484610f1f565b610f29565b610f1f565b9050919050565b6000819050919050565b610f6883610f33565b610f7c610f7482610f55565b848454610ecd565b825550505050565b600090565b610f91610f84565b610f9c818484610f5f565b505050565b5b81811015610fc057610fb5600082610f89565b600181019050610fa2565b5050565b601f82111561100557610fd681610e9b565b610fdf84610eb0565b81016020851015610fee578190505b611002610ffa85610eb0565b830182610fa1565b50505b505050565b600082821c905092915050565b60006110286000198460080261100a565b1980831691505092915050565b60006110418383611017565b9150826002028217905092915050565b61105b8383610e30565b67ffffffffffffffff8111156110745761107361087c565b5b61107e8254610e6a565b611089828285610fc4565b6000601f8311600181146110b857600084156110a6578287013590505b6110b08582611035565b865550611118565b601f1984166110c686610e9b565b60005b828110156110ee578489013582556001820191506020850194506020810190506110c9565b8683101561110b5784890135611107601f891682611017565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b600061114d8385611121565b935061115a838584611132565b6111638361086b565b840190509392505050565b60006020820190508181036000830152611189818486611141565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111ee602683610d34565b91506111f982611192565b604082019050919050565b6000602082019050818103600083015261121d816111e1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061125a602083610d34565b915061126582611224565b602082019050919050565b600060208201905081810360008301526112898161124d565b905091905056fea264697066735822122082dbc8b69f78264eabb9f71ca51f01f910551a57d38f8436e680f46621f14ff664736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xACE JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x42B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH2 0x5F6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9C PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9D PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6D0 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x74E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xD91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x7472656173757279000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xD8EF77A7D69A6B79F131ECD9AA37060BA0853BBD37CB175EC1ABD05738CE27CB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x41F SWAP2 SWAP1 PUSH2 0xB8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x433 PUSH2 0x6D0 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xB94068A4BD2571ACEE6AC79ACC9DCDCF10C31425D35F09E88F154EC520E26446 DUP2 PUSH1 0x40 MLOAD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0xDC0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x537 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x52E SWAP1 PUSH2 0xD91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5B6 JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5E9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x5FE PUSH2 0x6D0 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x60F SWAP3 SWAP2 SWAP1 PUSH2 0x1051 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x641 SWAP3 SWAP2 SWAP1 PUSH2 0x116E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x655 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BB SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CD DUP2 PUSH2 0x74E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6F6 PUSH2 0x496 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x743 SWAP1 PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x843 DUP2 PUSH2 0x830 JUMP JUMPDEST DUP2 EQ PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x860 DUP2 PUSH2 0x83A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8B4 DUP3 PUSH2 0x86B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8D3 JUMPI PUSH2 0x8D2 PUSH2 0x87C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E6 PUSH2 0x81C JUMP JUMPDEST SWAP1 POP PUSH2 0x8F2 DUP3 DUP3 PUSH2 0x8AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x912 JUMPI PUSH2 0x911 PUSH2 0x87C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x928 JUMP JUMPDEST JUMPDEST PUSH2 0x94D PUSH1 0x40 PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x95D DUP5 DUP3 DUP6 ADD PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x971 DUP5 DUP3 DUP6 ADD PUSH2 0x851 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x990 PUSH2 0x98B DUP5 PUSH2 0x8F7 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9B3 JUMPI PUSH2 0x9B2 PUSH2 0x923 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9DC JUMPI DUP1 PUSH2 0x9C8 DUP9 DUP3 PUSH2 0x92D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9B5 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9FB JUMPI PUSH2 0x9FA PUSH2 0x866 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA0B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x97D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA2B JUMPI PUSH2 0xA2A PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA39 DUP6 DUP3 DUP7 ADD PUSH2 0x851 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA5A JUMPI PUSH2 0xA59 PUSH2 0x82B JUMP JUMPDEST JUMPDEST PUSH2 0xA66 DUP6 DUP3 DUP7 ADD PUSH2 0x9E6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9B DUP3 PUSH2 0xA70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAB DUP2 PUSH2 0xA90 JUMP JUMPDEST DUP2 EQ PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAC8 DUP2 PUSH2 0xAA2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAE5 JUMPI PUSH2 0xAE4 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAF3 DUP6 DUP3 DUP7 ADD PUSH2 0x851 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB04 DUP6 DUP3 DUP7 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB2B DUP2 PUSH2 0xB0E JUMP JUMPDEST DUP2 EQ PUSH2 0xB36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB48 DUP2 PUSH2 0xB22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB64 JUMPI PUSH2 0xB63 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB72 DUP5 DUP3 DUP6 ADD PUSH2 0xB39 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB84 DUP2 PUSH2 0xA90 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB9F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBA DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD7 DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBF5 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC04 DUP7 DUP3 DUP8 ADD PUSH2 0x851 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC15 DUP7 DUP3 DUP8 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC26 DUP7 DUP3 DUP8 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC4B JUMPI PUSH2 0xC4A PUSH2 0x866 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC68 JUMPI PUSH2 0xC67 PUSH2 0xC30 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0x923 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCA2 JUMPI PUSH2 0xCA1 PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC0 JUMPI PUSH2 0xCBF PUSH2 0x82B JUMP JUMPDEST JUMPDEST PUSH2 0xCCC DUP6 DUP3 DUP7 ADD PUSH2 0xC35 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCEE JUMPI PUSH2 0xCED PUSH2 0x826 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCFC DUP5 DUP3 DUP6 ADD PUSH2 0xAB9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD7B PUSH1 0x16 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0xD86 DUP3 PUSH2 0xD45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDAA DUP2 PUSH2 0xD6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDBA DUP2 PUSH2 0xB0E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDD5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDE4 DUP2 PUSH2 0x830 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xDF3 DUP2 PUSH2 0xBA5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE0E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0xE1B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0xE28 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDEA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xE82 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xE95 JUMPI PUSH2 0xE94 PUSH2 0xE3B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xEFD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0xF07 DUP7 DUP4 PUSH2 0xEC0 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF4E PUSH2 0xF49 PUSH2 0xF44 DUP5 PUSH2 0xF1F JUMP JUMPDEST PUSH2 0xF29 JUMP JUMPDEST PUSH2 0xF1F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF68 DUP4 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0xF7C PUSH2 0xF74 DUP3 PUSH2 0xF55 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xECD JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF91 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0xF9C DUP2 DUP5 DUP5 PUSH2 0xF5F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFC0 JUMPI PUSH2 0xFB5 PUSH1 0x0 DUP3 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFA2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1005 JUMPI PUSH2 0xFD6 DUP2 PUSH2 0xE9B JUMP JUMPDEST PUSH2 0xFDF DUP5 PUSH2 0xEB0 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xFEE JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1002 PUSH2 0xFFA DUP6 PUSH2 0xEB0 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFA1 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1028 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x100A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1041 DUP4 DUP4 PUSH2 0x1017 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x105B DUP4 DUP4 PUSH2 0xE30 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1074 JUMPI PUSH2 0x1073 PUSH2 0x87C JUMP JUMPDEST JUMPDEST PUSH2 0x107E DUP3 SLOAD PUSH2 0xE6A JUMP JUMPDEST PUSH2 0x1089 DUP3 DUP3 DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10B8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10A6 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10B0 DUP6 DUP3 PUSH2 0x1035 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x1118 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10C6 DUP7 PUSH2 0xE9B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x10EE JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10C9 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x110B JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x1107 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x1017 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114D DUP4 DUP6 PUSH2 0x1121 JUMP JUMPDEST SWAP4 POP PUSH2 0x115A DUP4 DUP6 DUP5 PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x1163 DUP4 PUSH2 0x86B JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1189 DUP2 DUP5 DUP7 PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EE PUSH1 0x26 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0x11F9 DUP3 PUSH2 0x1192 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x121D DUP2 PUSH2 0x11E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125A PUSH1 0x20 DUP4 PUSH2 0xD34 JUMP JUMPDEST SWAP2 POP PUSH2 0x1265 DUP3 PUSH2 0x1224 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1289 DUP2 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0xDB 0xC8 0xB6 SWAP16 PUSH25 0x264EABB9F71CA51F01F910551A57D38F8436E680F46621F14F 0xF6 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"335:3661:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2262:528;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2085:101:0;;;:::i;:::-;;3384:327:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2940:187;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1462:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1750:279:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3833:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2335:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2262:528:14;1355:13:0;:11;:13::i;:::-;2393:14:14::1;2410:12;:19;2393:36;;2444:6;2439:345;2460:6;2456:1;:10;2439:345;;;2484:21;:31;2506:8;2484:31;;;;;;;;;;;2521:12;2534:1;2521:15;;;;;;;;:::i;:::-;;;;;;;;2484:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2603:111;;;;;;;;2659:12;2672:1;2659:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2603:111;;;;2691:8;2603:111;;::::0;2551:27:::1;:49;2579:12;2592:1;2579:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2551:49;;;;;;;;;;;:163;;;;;;;;;;;;;;;;;;;2756:3;;;;;;;2439:345;;;;2382:408;2262:528:::0;;:::o;2085:101:0:-;1355:13;:11;:13::i;:::-;2149:30:::1;2176:1;2149:18;:30::i;:::-;2085:101::o:0;3384:327:14:-;1355:13:0;:11;:13::i;:::-;3500:1:14::1;3483:19;;:5;:19;;::::0;3475:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3543:18;:4;:18:::0;3539:47:::1;;3581:5;3563:15;;:23;;;;;;;;;;;;;;;;;;3539:47;3600:20;:4;:20:::0;3596:52:::1;;3643:5;3622:18;;:26;;;;;;;;;;;;;;;;;;3596:52;3663:41;3688:15;;;;;;;;;;;3663:41;;;;;;:::i;:::-;;;;;;;;3384:327:::0;;:::o;2940:187::-;1355:13:0;:11;:13::i;:::-;3046:19:14::1;3025:18;;:40;;;;;;;;;;;;;;;;;;3080;3100:19;3080:40;;;;;;:::i;:::-;;;;;;;;2940:187:::0;:::o;1462:85:0:-;1508:7;1534:6;;;;;;;;;;;1527:13;;1462:85;:::o;1750:279:14:-;1355:13:0;:11;:13::i;:::-;1874:1:14::1;1857:19;;:5;:19;;::::0;1849:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1917:15;:4;:15:::0;1913:54:::1;;1961:6;1934:17;:24;1952:5;1934:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1913:54;1983:39;2002:4;2008:5;2015:6;1983:39;;;;;;;;:::i;:::-;;;;;;;;1750:279:::0;;;:::o;3833:161::-;1355:13:0;:11;:13::i;:::-;3937:10:14::1;;3923:11;:24;;;;;;;:::i;:::-;;3962:25;3976:10;;3962:25;;;;;;;:::i;:::-;;;;;;;;3833:161:::0;;:::o;2335:198:0:-;1355:13;:11;:13::i;:::-;2443:1:::1;2423:22;;:8;:22;;::::0;2415:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2498:28;2517:8;2498:18;:28::i;:::-;2335:198:::0;:::o;1620:130::-;1694:12;:10;:12::i;:::-;1683:23;;:7;:5;:7::i;:::-;:23;;;1675:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1620:130::o;2687:187::-;2760:16;2779:6;;;;;;;;;;;2760:25;;2804:8;2795:6;;:17;;;;;;;;;;;;;;;;;;2858:8;2827:40;;2848:8;2827:40;;;;;;;;;;;;2750:124;2687:187;:::o;886:96:7:-;939:7;965:10;958:17;;886:96;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2284:578;2362:5;2406:4;2394:9;2389:3;2385:19;2381:30;2378:117;;;2414:79;;:::i;:::-;2378:117;2513:21;2529:4;2513:21;:::i;:::-;2504:30;;2593:1;2633:49;2678:3;2669:6;2658:9;2654:22;2633:49;:::i;:::-;2626:4;2619:5;2615:16;2608:75;2544:150;2753:2;2794:49;2839:3;2830:6;2819:9;2815:22;2794:49;:::i;:::-;2787:4;2780:5;2776:16;2769:75;2704:151;2284:578;;;;:::o;2910:797::-;3035:5;3060:110;3076:93;3162:6;3076:93;:::i;:::-;3060:110;:::i;:::-;3051:119;;3190:5;3219:6;3212:5;3205:21;3253:4;3246:5;3242:16;3235:23;;3306:4;3298:6;3294:17;3286:6;3282:30;3335:3;3327:6;3324:15;3321:122;;;3354:79;;:::i;:::-;3321:122;3469:6;3452:249;3486:6;3481:3;3478:15;3452:249;;;3561:3;3590:66;3652:3;3640:10;3590:66;:::i;:::-;3585:3;3578:79;3686:4;3681:3;3677:14;3670:21;;3528:173;3512:4;3507:3;3503:14;3496:21;;3452:249;;;3456:21;3041:666;;2910:797;;;;;:::o;3755:428::-;3855:5;3904:3;3897:4;3889:6;3885:17;3881:27;3871:122;;3912:79;;:::i;:::-;3871:122;4029:6;4016:20;4054:123;4173:3;4165:6;4158:4;4150:6;4146:17;4054:123;:::i;:::-;4045:132;;3861:322;3755:428;;;;:::o;4189:742::-;4311:6;4319;4368:2;4356:9;4347:7;4343:23;4339:32;4336:119;;;4374:79;;:::i;:::-;4336:119;4494:1;4519:53;4564:7;4555:6;4544:9;4540:22;4519:53;:::i;:::-;4509:63;;4465:117;4649:2;4638:9;4634:18;4621:32;4680:18;4672:6;4669:30;4666:117;;;4702:79;;:::i;:::-;4666:117;4807:107;4906:7;4897:6;4886:9;4882:22;4807:107;:::i;:::-;4797:117;;4592:332;4189:742;;;;;:::o;4937:126::-;4974:7;5014:42;5007:5;5003:54;4992:65;;4937:126;;;:::o;5069:96::-;5106:7;5135:24;5153:5;5135:24;:::i;:::-;5124:35;;5069:96;;;:::o;5171:122::-;5244:24;5262:5;5244:24;:::i;:::-;5237:5;5234:35;5224:63;;5283:1;5280;5273:12;5224:63;5171:122;:::o;5299:139::-;5345:5;5383:6;5370:20;5361:29;;5399:33;5426:5;5399:33;:::i;:::-;5299:139;;;;:::o;5444:474::-;5512:6;5520;5569:2;5557:9;5548:7;5544:23;5540:32;5537:119;;;5575:79;;:::i;:::-;5537:119;5695:1;5720:53;5765:7;5756:6;5745:9;5741:22;5720:53;:::i;:::-;5710:63;;5666:117;5822:2;5848:53;5893:7;5884:6;5873:9;5869:22;5848:53;:::i;:::-;5838:63;;5793:118;5444:474;;;;;:::o;5924:101::-;5960:7;6000:18;5993:5;5989:30;5978:41;;5924:101;;;:::o;6031:120::-;6103:23;6120:5;6103:23;:::i;:::-;6096:5;6093:34;6083:62;;6141:1;6138;6131:12;6083:62;6031:120;:::o;6157:137::-;6202:5;6240:6;6227:20;6218:29;;6256:32;6282:5;6256:32;:::i;:::-;6157:137;;;;:::o;6300:327::-;6358:6;6407:2;6395:9;6386:7;6382:23;6378:32;6375:119;;;6413:79;;:::i;:::-;6375:119;6533:1;6558:52;6602:7;6593:6;6582:9;6578:22;6558:52;:::i;:::-;6548:62;;6504:116;6300:327;;;;:::o;6633:118::-;6720:24;6738:5;6720:24;:::i;:::-;6715:3;6708:37;6633:118;;:::o;6757:222::-;6850:4;6888:2;6877:9;6873:18;6865:26;;6901:71;6969:1;6958:9;6954:17;6945:6;6901:71;:::i;:::-;6757:222;;;;:::o;6985:90::-;7019:7;7062:5;7055:13;7048:21;7037:32;;6985:90;;;:::o;7081:116::-;7151:21;7166:5;7151:21;:::i;:::-;7144:5;7141:32;7131:60;;7187:1;7184;7177:12;7131:60;7081:116;:::o;7203:133::-;7246:5;7284:6;7271:20;7262:29;;7300:30;7324:5;7300:30;:::i;:::-;7203:133;;;;:::o;7342:613::-;7416:6;7424;7432;7481:2;7469:9;7460:7;7456:23;7452:32;7449:119;;;7487:79;;:::i;:::-;7449:119;7607:1;7632:53;7677:7;7668:6;7657:9;7653:22;7632:53;:::i;:::-;7622:63;;7578:117;7734:2;7760:53;7805:7;7796:6;7785:9;7781:22;7760:53;:::i;:::-;7750:63;;7705:118;7862:2;7888:50;7930:7;7921:6;7910:9;7906:22;7888:50;:::i;:::-;7878:60;;7833:115;7342:613;;;;;:::o;7961:117::-;8070:1;8067;8060:12;8097:552;8154:8;8164:6;8214:3;8207:4;8199:6;8195:17;8191:27;8181:122;;8222:79;;:::i;:::-;8181:122;8335:6;8322:20;8312:30;;8365:18;8357:6;8354:30;8351:117;;;8387:79;;:::i;:::-;8351:117;8501:4;8493:6;8489:17;8477:29;;8555:3;8547:4;8539:6;8535:17;8525:8;8521:32;8518:41;8515:128;;;8562:79;;:::i;:::-;8515:128;8097:552;;;;;:::o;8655:527::-;8725:6;8733;8782:2;8770:9;8761:7;8757:23;8753:32;8750:119;;;8788:79;;:::i;:::-;8750:119;8936:1;8925:9;8921:17;8908:31;8966:18;8958:6;8955:30;8952:117;;;8988:79;;:::i;:::-;8952:117;9101:64;9157:7;9148:6;9137:9;9133:22;9101:64;:::i;:::-;9083:82;;;;8879:296;8655:527;;;;;:::o;9188:329::-;9247:6;9296:2;9284:9;9275:7;9271:23;9267:32;9264:119;;;9302:79;;:::i;:::-;9264:119;9422:1;9447:53;9492:7;9483:6;9472:9;9468:22;9447:53;:::i;:::-;9437:63;;9393:117;9188:329;;;;:::o;9523:180::-;9571:77;9568:1;9561:88;9668:4;9665:1;9658:15;9692:4;9689:1;9682:15;9709:169;9793:11;9827:6;9822:3;9815:19;9867:4;9862:3;9858:14;9843:29;;9709:169;;;;:::o;9884:172::-;10024:24;10020:1;10012:6;10008:14;10001:48;9884:172;:::o;10062:366::-;10204:3;10225:67;10289:2;10284:3;10225:67;:::i;:::-;10218:74;;10301:93;10390:3;10301:93;:::i;:::-;10419:2;10414:3;10410:12;10403:19;;10062:366;;;:::o;10434:419::-;10600:4;10638:2;10627:9;10623:18;10615:26;;10687:9;10681:4;10677:20;10673:1;10662:9;10658:17;10651:47;10715:131;10841:4;10715:131;:::i;:::-;10707:139;;10434:419;;;:::o;10859:115::-;10944:23;10961:5;10944:23;:::i;:::-;10939:3;10932:36;10859:115;;:::o;10980:218::-;11071:4;11109:2;11098:9;11094:18;11086:26;;11122:69;11188:1;11177:9;11173:17;11164:6;11122:69;:::i;:::-;10980:218;;;;:::o;11204:118::-;11291:24;11309:5;11291:24;:::i;:::-;11286:3;11279:37;11204:118;;:::o;11328:109::-;11409:21;11424:5;11409:21;:::i;:::-;11404:3;11397:34;11328:109;;:::o;11443:430::-;11586:4;11624:2;11613:9;11609:18;11601:26;;11637:71;11705:1;11694:9;11690:17;11681:6;11637:71;:::i;:::-;11718:72;11786:2;11775:9;11771:18;11762:6;11718:72;:::i;:::-;11800:66;11862:2;11851:9;11847:18;11838:6;11800:66;:::i;:::-;11443:430;;;;;;:::o;11879:96::-;11937:6;11965:3;11955:13;;11879:96;;;;:::o;11981:180::-;12029:77;12026:1;12019:88;12126:4;12123:1;12116:15;12150:4;12147:1;12140:15;12167:320;12211:6;12248:1;12242:4;12238:12;12228:22;;12295:1;12289:4;12285:12;12316:18;12306:81;;12372:4;12364:6;12360:17;12350:27;;12306:81;12434:2;12426:6;12423:14;12403:18;12400:38;12397:84;;12453:18;;:::i;:::-;12397:84;12218:269;12167:320;;;:::o;12493:140::-;12541:4;12564:3;12556:11;;12587:3;12584:1;12577:14;12621:4;12618:1;12608:18;12600:26;;12493:140;;;:::o;12639:93::-;12676:6;12723:2;12718;12711:5;12707:14;12703:23;12693:33;;12639:93;;;:::o;12738:107::-;12782:8;12832:5;12826:4;12822:16;12801:37;;12738:107;;;;:::o;12851:393::-;12920:6;12970:1;12958:10;12954:18;12993:97;13023:66;13012:9;12993:97;:::i;:::-;13111:39;13141:8;13130:9;13111:39;:::i;:::-;13099:51;;13183:4;13179:9;13172:5;13168:21;13159:30;;13232:4;13222:8;13218:19;13211:5;13208:30;13198:40;;12927:317;;12851:393;;;;;:::o;13250:77::-;13287:7;13316:5;13305:16;;13250:77;;;:::o;13333:60::-;13361:3;13382:5;13375:12;;13333:60;;;:::o;13399:142::-;13449:9;13482:53;13500:34;13509:24;13527:5;13509:24;:::i;:::-;13500:34;:::i;:::-;13482:53;:::i;:::-;13469:66;;13399:142;;;:::o;13547:75::-;13590:3;13611:5;13604:12;;13547:75;;;:::o;13628:269::-;13738:39;13769:7;13738:39;:::i;:::-;13799:91;13848:41;13872:16;13848:41;:::i;:::-;13840:6;13833:4;13827:11;13799:91;:::i;:::-;13793:4;13786:105;13704:193;13628:269;;;:::o;13903:73::-;13948:3;13903:73;:::o;13982:189::-;14059:32;;:::i;:::-;14100:65;14158:6;14150;14144:4;14100:65;:::i;:::-;14035:136;13982:189;;:::o;14177:186::-;14237:120;14254:3;14247:5;14244:14;14237:120;;;14308:39;14345:1;14338:5;14308:39;:::i;:::-;14281:1;14274:5;14270:13;14261:22;;14237:120;;;14177:186;;:::o;14369:541::-;14469:2;14464:3;14461:11;14458:445;;;14503:37;14534:5;14503:37;:::i;:::-;14586:29;14604:10;14586:29;:::i;:::-;14576:8;14572:44;14769:2;14757:10;14754:18;14751:49;;;14790:8;14775:23;;14751:49;14813:80;14869:22;14887:3;14869:22;:::i;:::-;14859:8;14855:37;14842:11;14813:80;:::i;:::-;14473:430;;14458:445;14369:541;;;:::o;14916:117::-;14970:8;15020:5;15014:4;15010:16;14989:37;;14916:117;;;;:::o;15039:169::-;15083:6;15116:51;15164:1;15160:6;15152:5;15149:1;15145:13;15116:51;:::i;:::-;15112:56;15197:4;15191;15187:15;15177:25;;15090:118;15039:169;;;;:::o;15213:295::-;15289:4;15435:29;15460:3;15454:4;15435:29;:::i;:::-;15427:37;;15497:3;15494:1;15490:11;15484:4;15481:21;15473:29;;15213:295;;;;:::o;15513:1398::-;15635:43;15674:3;15669;15635:43;:::i;:::-;15743:18;15735:6;15732:30;15729:56;;;15765:18;;:::i;:::-;15729:56;15809:38;15841:4;15835:11;15809:38;:::i;:::-;15894:66;15953:6;15945;15939:4;15894:66;:::i;:::-;15987:1;16016:2;16008:6;16005:14;16033:1;16028:631;;;;16703:1;16720:6;16717:84;;;16776:9;16771:3;16767:19;16754:33;16745:42;;16717:84;16827:67;16887:6;16880:5;16827:67;:::i;:::-;16821:4;16814:81;16676:229;15998:907;;16028:631;16080:4;16076:9;16068:6;16064:22;16114:36;16145:4;16114:36;:::i;:::-;16172:1;16186:215;16200:7;16197:1;16194:14;16186:215;;;16286:9;16281:3;16277:19;16264:33;16256:6;16249:49;16337:1;16329:6;16325:14;16315:24;;16384:2;16373:9;16369:18;16356:31;;16223:4;16220:1;16216:12;16211:17;;16186:215;;;16429:6;16420:7;16417:19;16414:186;;;16494:9;16489:3;16485:19;16472:33;16537:48;16579:4;16571:6;16567:17;16556:9;16537:48;:::i;:::-;16529:6;16522:64;16437:163;16414:186;16646:1;16642;16634:6;16630:14;16626:22;16620:4;16613:36;16035:624;;;15998:907;;15610:1301;;;15513:1398;;;:::o;16917:168::-;17000:11;17034:6;17029:3;17022:19;17074:4;17069:3;17065:14;17050:29;;16917:168;;;;:::o;17091:146::-;17188:6;17183:3;17178;17165:30;17229:1;17220:6;17215:3;17211:16;17204:27;17091:146;;;:::o;17265:314::-;17361:3;17382:70;17445:6;17440:3;17382:70;:::i;:::-;17375:77;;17462:56;17511:6;17506:3;17499:5;17462:56;:::i;:::-;17543:29;17565:6;17543:29;:::i;:::-;17538:3;17534:39;17527:46;;17265:314;;;;;:::o;17585:329::-;17706:4;17744:2;17733:9;17729:18;17721:26;;17793:9;17787:4;17783:20;17779:1;17768:9;17764:17;17757:47;17821:86;17902:4;17893:6;17885;17821:86;:::i;:::-;17813:94;;17585:329;;;;;:::o;17920:225::-;18060:34;18056:1;18048:6;18044:14;18037:58;18129:8;18124:2;18116:6;18112:15;18105:33;17920:225;:::o;18151:366::-;18293:3;18314:67;18378:2;18373:3;18314:67;:::i;:::-;18307:74;;18390:93;18479:3;18390:93;:::i;:::-;18508:2;18503:3;18499:12;18492:19;;18151:366;;;:::o;18523:419::-;18689:4;18727:2;18716:9;18712:18;18704:26;;18776:9;18770:4;18766:20;18762:1;18751:9;18747:17;18740:47;18804:131;18930:4;18804:131;:::i;:::-;18796:139;;18523:419;;;:::o;18948:182::-;19088:34;19084:1;19076:6;19072:14;19065:58;18948:182;:::o;19136:366::-;19278:3;19299:67;19363:2;19358:3;19299:67;:::i;:::-;19292:74;;19375:93;19464:3;19375:93;:::i;:::-;19493:2;19488:3;19484:12;19477:19;;19136:366;;;:::o;19508:419::-;19674:4;19712:2;19701:9;19697:18;19689:26;;19761:9;19755:4;19751:20;19747:1;19736:9;19732:17;19725:47;19789:131;19915:4;19789:131;:::i;:::-;19781:139;;19508:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"961200","executionCost":"1001","totalCost":"962201"},"external":{"owner()":"2522","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30810","updateProtocolAddresses(bytes32,address)":"infinite","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setSupportedInstitutions(bytes32,(bytes32,bytes32)[])\":{\"details\":\"Sets the supported institutions for a specific currency.\",\"params\":{\"currency\":\"The currency for which the institutions are being set.\",\"institutions\":\"The array of institutions to be set.\"}},\"settingManagerBool(bytes32,address,bool)\":{\"details\":\"Sets the boolean value for a specific setting.\",\"params\":{\"status\":\"The boolean value to be set. Requirements: - The value must not be a zero address.\",\"value\":\"The address or value associated with the setting.\",\"what\":\"The setting to be updated.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateProtocolAddresses(bytes32,address)\":{\"details\":\"Updates the protocol addresses.\",\"params\":{\"value\":\"The new address to be set. Requirements: - The value must not be a zero address.\",\"what\":\"The address type to be updated (treasury or aggregator).\"}},\"updateProtocolAggregator(bytes)\":{\"details\":\"Updates the protocol aggregator.\",\"params\":{\"aggregator\":\"The new aggregator to be set.\"}},\"updateProtocolFees(uint64)\":{\"details\":\"Updates the protocol fees percentage.\",\"params\":{\"_protocolFeePercent\":\"The new protocol fees percentage to be set.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * @title PaycrestSettingManager\\n * @dev This contract manages the settings and configurations for the Paycrest protocol.\\n */\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {SharedStructs} from \\\"./libraries/SharedStructs.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent;\\n    address internal treasuryAddress;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n\\n    mapping(bytes32 => SharedStructs.Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => SharedStructs.InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event ProtocolFeesUpdated(uint64 protocolFee);\\n    event ProtocolAddressesUpdated(address treasuryAddress);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address treasuryAddress);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n\\n    /**\\n     * @dev Sets the boolean value for a specific setting.\\n     * @param what The setting to be updated.\\n     * @param value The address or value associated with the setting.\\n     * @param status The boolean value to be set.\\n     * Requirements:\\n     * - The value must not be a zero address.\\n     */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    /**\\n     * @dev Sets the supported institutions for a specific currency.\\n     * @param currency The currency for which the institutions are being set.\\n     * @param institutions The array of institutions to be set.\\n     */\\n    function setSupportedInstitutions(bytes32 currency, SharedStructs.Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = SharedStructs.InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the protocol fees percentage.\\n     * @param _protocolFeePercent The new protocol fees percentage to be set.\\n     */\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit ProtocolFeesUpdated(_protocolFeePercent);\\n    }\\n\\n    /**\\n     * @dev Updates the protocol addresses.\\n     * @param what The address type to be updated (treasury or aggregator).\\n     * @param value The new address to be set.\\n     * Requirements:\\n     * - The value must not be a zero address.\\n     */\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"treasury\\\") treasuryAddress = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n        emit ProtocolAddressesUpdated(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Updates the protocol aggregator.\\n     * @param aggregator The new aggregator to be set.\\n     */\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n}\\n\",\"keccak256\":\"0x8a6728234f0629f9d377071d6e3a319a2740c98fe8e89d2c7bb7f4656ae63e45\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nlibrary SharedStructs {\\n    /**\\n     * @dev Struct representing an institution.\\n     * @param code The code of the institution.\\n     * @param name The name of the institution.\\n     */\\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n\\n    /**\\n     * @dev Struct representing an institution by code.\\n     * @param name The name of the institution.\\n     * @param currency The currency of the institution.\\n     */\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n}\",\"keccak256\":\"0x6c50c51961ec2a2740e0f3cbfc2bdb7b80a5c728dec92ebb98d84893ac8adb5a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":139,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":142,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1299,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":11,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":131,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3608,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3610,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3612,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"treasuryAddress","offset":8,"slot":"102","type":"t_address"},{"astId":3614,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3616,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3620,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3624,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3630,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"156","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)4029_storage)dyn_storage)"},{"astId":3635,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)4034_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)4029_storage)dyn_storage":{"base":"t_struct(Institution)4029_storage","encoding":"dynamic_array","label":"struct SharedStructs.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)4029_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct SharedStructs.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)4029_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)4034_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct SharedStructs.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)4034_storage"},"t_struct(Institution)4029_storage":{"encoding":"inplace","label":"struct SharedStructs.Institution","members":[{"astId":4026,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4028,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)4034_storage":{"encoding":"inplace","label":"struct SharedStructs.InstitutionByCode","members":[{"astId":4031,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":4033,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IPaycrest.sol":{"IPaycrest":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolFee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"OrderRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"OrderSettled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SenderFeeTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_code","type":"bytes32"}],"name":"getSupportedInstitutionByCode","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct SharedStructs.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct SharedStructs.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the Paycrest contract.","events":{"OrderCreated(address,uint256,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when a deposit is made.","params":{"amount":"The amount of the deposit.","institutionCode":"The code of the institution.","label":"The label of the deposit.","messageHash":"The hash of the message.","orderId":"The ID of the order.","rate":"The rate at which the deposit is made.","token":"The address of the deposited token."}},"OrderRefunded(uint256,bytes32,bytes32)":{"details":"Emitted when an aggregator refunds a transaction.","params":{"fee":"The fee deducted from the refund amount.","label":"The label of the transaction.","orderId":"The ID of the order."}},"OrderSettled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when an aggregator settles a transaction.","params":{"label":"The label of the transaction.","liquidityProvider":"The address of the liquidity provider.","orderId":"The ID of the order.","settlePercent":"The percentage at which the transaction is settled.","splitOrderId":"The ID of the split order."}},"SenderFeeTransferred(address,uint256)":{"details":"Emitted when the sender's fee is transferred.","params":{"amount":"The amount of the fee transferred.","sender":"The address of the sender."}}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"Requirements: - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call. - `_token` must be an acceptable token. See {isTokenSupported}. - `amount` must be greater than minimum. - `_refundable` refundable address must not be zero address.","params":{"_amount":"The amount in the decimal of `_token` to be locked.","_institutionCode":"The institution code of the sender.","_label":"The reference of the sender.","_rate":"The rate at which the sender intends to sell `_amount` of `_token`.","_refundAddress":"The address that will receive `_amount` in `_token` when there is a need to refund.","_senderFee":"The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.","_senderFeeRecipient":"The address that will receive `_senderFee` in `_token` when there is a need to refund.","_token":"The address of the token.","messageHash":"The hash of the message."},"returns":{"_orderId":"The ID of the order."}},"getAggregator()":{"returns":{"_0":"return The aggregator's public key."}},"getFeeDetails()":{"returns":{"max_bps":"The maximum basis points.","protocolReward":"The protocol reward amount."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"The ID of the order."},"returns":{"_0":"return The order details."}},"getSupportedInstitutionByCode(bytes32)":{"params":{"_code":"The institution code."},"returns":{"_0":"return The institution details."}},"getSupportedInstitutions(bytes32)":{"params":{"_currency":"The currency code."},"returns":{"_0":"return An array of institutions."}},"isTokenSupported(address)":{"params":{"_token":"The address of the token to check."},"returns":{"_0":"Whether the token is supported."}},"refund(uint256,bytes32,bytes32)":{"details":"Requirements: - Only aggregators can call this function. - `_orderId` must be less than total IDs. - `_orderId` must be an open ID. - `isFulfilled` must be false.","params":{"_fee":"The amount to be deducted from the amount to be refunded.","_label":"The reference of the sender.","_orderId":"The ID of the transaction."},"returns":{"_0":"Whether the refund is successful."}},"settle(bytes32,bytes32,bytes32,address,uint64)":{"details":"Requirements: - Only aggregators can call this function. - `_orderId` must be less than total IDs. - `_orderId` must be an open ID. - `_primaryValidator` must have stake on the Paycrest staking platform. - `_secondaryValidators` must have stake on the Paycrest staking platform. - `amount` must be greater than minimum. - `_refundable` refundable address must not be zero address.","params":{"_label":"The reference of the sender.","_liquidityProvider":"The address of the liquidity provider.","_orderId":"The ID of the transaction.","_settlePercent":"The rate at which the transaction is settled."},"returns":{"_0":"_orderId The ID of the order.","_1":"_liquidityProvider The address of the liquidity provider."}}},"title":"IPaycrest","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionByCode(bytes32)":"c2280103","getSupportedInstitutions(bytes32)":"02621338","isTokenSupported(address)":"75151b63","refund(uint256,bytes32,bytes32)":"d28a8d32","settle(bytes32,bytes32,bytes32,address,uint64)":"9015dced"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionByCode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct SharedStructs.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the Paycrest contract.\",\"events\":{\"OrderCreated(address,uint256,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when a deposit is made.\",\"params\":{\"amount\":\"The amount of the deposit.\",\"institutionCode\":\"The code of the institution.\",\"label\":\"The label of the deposit.\",\"messageHash\":\"The hash of the message.\",\"orderId\":\"The ID of the order.\",\"rate\":\"The rate at which the deposit is made.\",\"token\":\"The address of the deposited token.\"}},\"OrderRefunded(uint256,bytes32,bytes32)\":{\"details\":\"Emitted when an aggregator refunds a transaction.\",\"params\":{\"fee\":\"The fee deducted from the refund amount.\",\"label\":\"The label of the transaction.\",\"orderId\":\"The ID of the order.\"}},\"OrderSettled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when an aggregator settles a transaction.\",\"params\":{\"label\":\"The label of the transaction.\",\"liquidityProvider\":\"The address of the liquidity provider.\",\"orderId\":\"The ID of the order.\",\"settlePercent\":\"The percentage at which the transaction is settled.\",\"splitOrderId\":\"The ID of the split order.\"}},\"SenderFeeTransferred(address,uint256)\":{\"details\":\"Emitted when the sender's fee is transferred.\",\"params\":{\"amount\":\"The amount of the fee transferred.\",\"sender\":\"The address of the sender.\"}}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"Requirements: - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call. - `_token` must be an acceptable token. See {isTokenSupported}. - `amount` must be greater than minimum. - `_refundable` refundable address must not be zero address.\",\"params\":{\"_amount\":\"The amount in the decimal of `_token` to be locked.\",\"_institutionCode\":\"The institution code of the sender.\",\"_label\":\"The reference of the sender.\",\"_rate\":\"The rate at which the sender intends to sell `_amount` of `_token`.\",\"_refundAddress\":\"The address that will receive `_amount` in `_token` when there is a need to refund.\",\"_senderFee\":\"The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.\",\"_senderFeeRecipient\":\"The address that will receive `_senderFee` in `_token` when there is a need to refund.\",\"_token\":\"The address of the token.\",\"messageHash\":\"The hash of the message.\"},\"returns\":{\"_orderId\":\"The ID of the order.\"}},\"getAggregator()\":{\"returns\":{\"_0\":\"return The aggregator's public key.\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"The maximum basis points.\",\"protocolReward\":\"The protocol reward amount.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"return The order details.\"}},\"getSupportedInstitutionByCode(bytes32)\":{\"params\":{\"_code\":\"The institution code.\"},\"returns\":{\"_0\":\"return The institution details.\"}},\"getSupportedInstitutions(bytes32)\":{\"params\":{\"_currency\":\"The currency code.\"},\"returns\":{\"_0\":\"return An array of institutions.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"The address of the token to check.\"},\"returns\":{\"_0\":\"Whether the token is supported.\"}},\"refund(uint256,bytes32,bytes32)\":{\"details\":\"Requirements: - Only aggregators can call this function. - `_orderId` must be less than total IDs. - `_orderId` must be an open ID. - `isFulfilled` must be false.\",\"params\":{\"_fee\":\"The amount to be deducted from the amount to be refunded.\",\"_label\":\"The reference of the sender.\",\"_orderId\":\"The ID of the transaction.\"},\"returns\":{\"_0\":\"Whether the refund is successful.\"}},\"settle(bytes32,bytes32,bytes32,address,uint64)\":{\"details\":\"Requirements: - Only aggregators can call this function. - `_orderId` must be less than total IDs. - `_orderId` must be an open ID. - `_primaryValidator` must have stake on the Paycrest staking platform. - `_secondaryValidators` must have stake on the Paycrest staking platform. - `amount` must be greater than minimum. - `_refundable` refundable address must not be zero address.\",\"params\":{\"_label\":\"The reference of the sender.\",\"_liquidityProvider\":\"The address of the liquidity provider.\",\"_orderId\":\"The ID of the transaction.\",\"_settlePercent\":\"The rate at which the transaction is settled.\"},\"returns\":{\"_0\":\"_orderId The ID of the order.\",\"_1\":\"_liquidityProvider The address of the liquidity provider.\"}}},\"title\":\"IPaycrest\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"Locks the sender's amount of token into Paycrest.\"},\"getAggregator()\":{\"notice\":\"Gets the aggregator's public key.\"},\"getFeeDetails()\":{\"notice\":\"Gets the fee details of Paycrest.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"Gets the details of an order.\"},\"getSupportedInstitutionByCode(bytes32)\":{\"notice\":\"Gets the details of a supported institution by code.\"},\"getSupportedInstitutions(bytes32)\":{\"notice\":\"Gets the details of supported institutions by currency.\"},\"isTokenSupported(address)\":{\"notice\":\"Checks if a token is supported by Paycrest.\"},\"refund(uint256,bytes32,bytes32)\":{\"notice\":\"Refunds to the specified refundable address.\"},\"settle(bytes32,bytes32,bytes32,address,uint64)\":{\"notice\":\"Settles a transaction and distributes rewards accordingly.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IPaycrest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {SharedStructs} from \\\"../libraries/SharedStructs.sol\\\";\\n\\n/**\\n * @title IPaycrest\\n * @dev Interface for the Paycrest contract.\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /**\\n     * @dev Emitted when a deposit is made.\\n     * @param token The address of the deposited token.\\n     * @param amount The amount of the deposit.\\n     * @param orderId The ID of the order.\\n     * @param rate The rate at which the deposit is made.\\n     * @param institutionCode The code of the institution.\\n     * @param label The label of the deposit.\\n     * @param messageHash The hash of the message.\\n     */\\n    event OrderCreated(address indexed token, uint256 indexed amount, uint256 protocolFee, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n\\n    /**\\n     * @dev Emitted when an aggregator settles a transaction.\\n     * @param splitOrderId The ID of the split order.\\n     * @param orderId The ID of the order.\\n     * @param label The label of the transaction.\\n     * @param liquidityProvider The address of the liquidity provider.\\n     * @param settlePercent The percentage at which the transaction is settled.\\n     */\\n    event OrderSettled(bytes32 splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n\\n    /**\\n     * @dev Emitted when an aggregator refunds a transaction.\\n     * @param fee The fee deducted from the refund amount.\\n     * @param orderId The ID of the order.\\n     * @param label The label of the transaction.\\n     */\\n    event OrderRefunded(uint256 fee, bytes32 indexed orderId, bytes32 label);\\n\\n    /**\\n     * @dev Emitted when the sender's fee is transferred.\\n     * @param sender The address of the sender.\\n     * @param amount The amount of the fee transferred.\\n     */\\n    event SenderFeeTransferred(address indexed sender, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    /**\\n     * @dev Struct representing transaction metadata.\\n     * @param identifier The identifier of the transaction.\\n     * @param institution The institution of the transaction.\\n     * @param name The name of the transaction.\\n     * @param currency The currency of the transaction.\\n     * @param liquidityProviderID The ID of the liquidity provider.\\n     */\\n    struct TransactionMetadata {\\n        bytes8 identifier;\\n        bytes8 institution;\\n        bytes8 name;\\n        bytes8 currency;\\n        uint256 liquidityProviderID;\\n    }\\n\\n    /**\\n     * @dev Struct representing an order.\\n     * @param seller The address of the seller.\\n     * @param token The address of the token.\\n     * @param senderFeeRecipient The address of the sender fee recipient.\\n     * @param senderFee The fee to be paid to the sender fee recipient.\\n     * @param protocolFee The protocol fee to be paid.\\n     * @param rate The rate at which the order is made.\\n     * @param isFulfilled Whether the order is fulfilled.\\n     * @param refundAddress The address to which the refund is made.\\n     * @param currentBPS The current basis points.\\n     * @param amount The amount of the order.\\n     */\\n    struct Order {\\n        address seller;\\n        address token;\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint256 protocolFee;\\n        uint96 rate;\\n        bool isFulfilled;\\n        address refundAddress;\\n        uint96 currentBPS;\\n        uint256 amount;\\n    }\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /**\\n     * @notice Locks the sender's amount of token into Paycrest.\\n     * @dev Requirements:\\n     * - `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n     * - `_token` must be an acceptable token. See {isTokenSupported}.\\n     * - `amount` must be greater than minimum.\\n     * - `_refundable` refundable address must not be zero address.\\n     * @param _token The address of the token.\\n     * @param _amount The amount in the decimal of `_token` to be locked.\\n     * @param _institutionCode The institution code of the sender.\\n     * @param _label The reference of the sender.\\n     * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\\n     * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token` when there is a need to refund.\\n     * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient` when there is a need to refund.\\n     * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\\n     * @param messageHash The hash of the message.\\n     * @return _orderId The ID of the order.\\n     */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    ) external returns(bytes32 _orderId);\\n\\n    /**\\n     * @notice Settles a transaction and distributes rewards accordingly.\\n     * @dev Requirements:\\n     * - Only aggregators can call this function.\\n     * - `_orderId` must be less than total IDs.\\n     * - `_orderId` must be an open ID.\\n     * - `_primaryValidator` must have stake on the Paycrest staking platform.\\n     * - `_secondaryValidators` must have stake on the Paycrest staking platform.\\n     * - `amount` must be greater than minimum.\\n     * - `_refundable` refundable address must not be zero address.\\n     * @param _orderId The ID of the transaction.\\n     * @param _label The reference of the sender.\\n     * @param _liquidityProvider The address of the liquidity provider.\\n     * @param _settlePercent The rate at which the transaction is settled.\\n     * @return _orderId The ID of the order.\\n     * @return _liquidityProvider The address of the liquidity provider.\\n     */\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address _liquidityProvider, uint64 _settlePercent) external returns(bytes32, address);\\n\\n    /**\\n     * @notice Refunds to the specified refundable address.\\n     * @dev Requirements:\\n     * - Only aggregators can call this function.\\n     * - `_orderId` must be less than total IDs.\\n     * - `_orderId` must be an open ID.\\n     * - `isFulfilled` must be false.\\n     * @param _fee The amount to be deducted from the amount to be refunded.\\n     * @param _orderId The ID of the transaction.\\n     * @param _label The reference of the sender.\\n     * @return Whether the refund is successful.\\n     */\\n    function refund(uint256 _fee, bytes32 _orderId, bytes32 _label) external returns(bool);\\n\\n    /**\\n     * @notice Checks if a token is supported by Paycrest.\\n     * @param _token The address of the token to check.\\n     * @return Whether the token is supported.\\n     */\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /**\\n     * @notice Gets the details of an order.\\n     * @param _orderId The ID of the order.\\n     * @return return The order details.\\n     */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /**\\n     * @notice Gets the fee details of Paycrest.\\n     * @return protocolReward The protocol reward amount.\\n     * @return max_bps The maximum basis points.\\n     */\\n    function getFeeDetails() external view returns(uint64 protocolReward, uint256 max_bps);\\n\\n    /**\\n     * @notice Gets the aggregator's public key.\\n     * @return return The aggregator's public key.\\n     */\\n    function getAggregator() external view returns(bytes memory);\\n\\n    /**\\n     * @notice Gets the details of a supported institution by code.\\n     * @param _code The institution code.\\n     * @return return The institution details.\\n     */\\n    function getSupportedInstitutionByCode(bytes32 _code) external view returns(SharedStructs.InstitutionByCode memory);\\n\\n    /**\\n     * @notice Gets the details of supported institutions by currency.\\n     * @param _currency The currency code.\\n     * @return return An array of institutions.\\n     */ \\n    function getSupportedInstitutions(bytes32 _currency) external view returns(SharedStructs.Institution[] memory);\\n}\\n\",\"keccak256\":\"0x4f6aae003115dcd30abb0dfe742c53bd8fd740714ed3af8d6824aabf8d7692a6\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nlibrary SharedStructs {\\n    /**\\n     * @dev Struct representing an institution.\\n     * @param code The code of the institution.\\n     * @param name The name of the institution.\\n     */\\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n\\n    /**\\n     * @dev Struct representing an institution by code.\\n     * @param name The name of the institution.\\n     * @param currency The currency of the institution.\\n     */\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n}\",\"keccak256\":\"0x6c50c51961ec2a2740e0f3cbfc2bdb7b80a5c728dec92ebb98d84893ac8adb5a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"notice":"Locks the sender's amount of token into Paycrest."},"getAggregator()":{"notice":"Gets the aggregator's public key."},"getFeeDetails()":{"notice":"Gets the fee details of Paycrest."},"getOrderInfo(bytes32)":{"notice":"Gets the details of an order."},"getSupportedInstitutionByCode(bytes32)":{"notice":"Gets the details of a supported institution by code."},"getSupportedInstitutions(bytes32)":{"notice":"Gets the details of supported institutions by currency."},"isTokenSupported(address)":{"notice":"Checks if a token is supported by Paycrest."},"refund(uint256,bytes32,bytes32)":{"notice":"Refunds to the specified refundable address."},"settle(bytes32,bytes32,bytes32,address,uint64)":{"notice":"Settles a transaction and distributes rewards accordingly."}},"version":1}}},"contracts/libraries/SharedStructs.sol":{"SharedStructs":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122018c796264cd6f686e5056fd2234e702189b8345766e6fd8b962c4406475a9a8664736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0xC7 SWAP7 0x26 0x4C 0xD6 0xF6 DUP7 0xE5 SDIV PUSH16 0xD2234E702189B8345766E6FD8B962C44 MOD SELFBALANCE GAS SWAP11 DUP7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"65:522:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122018c796264cd6f686e5056fd2234e702189b8345766e6fd8b962c4406475a9a8664736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR 0xC7 SWAP7 0x26 0x4C 0xD6 0xF6 DUP7 0xE5 SDIV PUSH16 0xD2234E702189B8345766E6FD8B962C44 MOD SELFBALANCE GAS SWAP11 DUP7 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"65:522:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SharedStructs.sol\":\"SharedStructs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nlibrary SharedStructs {\\n    /**\\n     * @dev Struct representing an institution.\\n     * @param code The code of the institution.\\n     * @param name The name of the institution.\\n     */\\n    struct Institution {\\n        bytes32 code;\\n        bytes32 name;\\n    }\\n\\n    /**\\n     * @dev Struct representing an institution by code.\\n     * @param name The name of the institution.\\n     * @param currency The currency of the institution.\\n     */\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n}\",\"keccak256\":\"0x6c50c51961ec2a2740e0f3cbfc2bdb7b80a5c728dec92ebb98d84893ac8adb5a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}