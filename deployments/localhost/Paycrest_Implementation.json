{
  "address": "0x2476aBF8B523625f548cFAA446324fe61eeD69FC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInstitutionCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        }
      ],
      "name": "InvalidParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAggregator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderFulfilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ThrowZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ThrowZeroValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnableToProcessRewards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unsuported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "institutionCode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "messageHash",
          "type": "string"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "protocolFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "primaryValidator",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "secondaryValidator",
          "type": "uint64"
        }
      ],
      "name": "PaycrestFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SettingManagerBool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes8",
          "name": "value",
          "type": "bytes8"
        },
        {
          "indexed": false,
          "internalType": "bytes8",
          "name": "status",
          "type": "bytes8"
        }
      ],
      "name": "SettingManagerForInstitution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "settlePercent",
          "type": "uint96"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSenderFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_institutionCode",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "_rate",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "_senderFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_senderFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "messageHash",
          "type": "string"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDetails",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "getOrderInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "senderFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "senderFee",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "rate",
              "type": "uint96"
            },
            {
              "internalType": "bool",
              "name": "isFulfilled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "currentBPS",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaycrest.Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        }
      ],
      "name": "getSupportedInstitutionName",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "currency",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PaycrestSettingManager.InstitutionByCode",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "name": "getSupportedInstitutions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PaycrestSettingManager.Institution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getWhitelistedStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isTokenSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        }
      ],
      "name": "refund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PaycrestSettingManager.Institution[]",
          "name": "institutions",
          "type": "tuple[]"
        }
      ],
      "name": "setSupportedInstitutions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "settingManagerBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_primaryValidator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_secondaryValidators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_settlePercent",
          "type": "uint96"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "updateFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_protocolFeePercent",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_primaryValidatorPercent",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_secondaryValidatorPercent",
          "type": "uint64"
        }
      ],
      "name": "updateProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x479498a2012986ace5e395c5fb90caa1d15579223dc1107fb43d4de602c12c5b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2476aBF8B523625f548cFAA446324fe61eeD69FC",
    "transactionIndex": 0,
    "gasUsed": "3132969",
    "logsBloom": "0x
    "blockHash": "0x05db989ce9e810f8bbe36f278459392d552a13bb333318a2bca5dfd043fb5ddd",
    "transactionHash": "0x479498a2012986ace5e395c5fb90caa1d15579223dc1107fb43d4de602c12c5b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 46186105,
        "transactionHash": "0x479498a2012986ace5e395c5fb90caa1d15579223dc1107fb43d4de602c12c5b",
        "address": "0x2476aBF8B523625f548cFAA446324fe61eeD69FC",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x05db989ce9e810f8bbe36f278459392d552a13bb333318a2bca5dfd043fb5ddd"
      }
    ],
    "blockNumber": 46186105,
    "cumulativeGasUsed": "3132969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d09daaf96b15f1467dac43a2aa05c56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"primaryValidator\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"secondaryValidator\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_primaryValidator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_secondaryValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_primaryValidatorPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_secondaryValidatorPercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(bytes32,uint256,uint256,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Refunded(bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"Settled(bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getLiquidityAggregator()\":{\"details\":\"See {getLiquidityAggregator-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"getWhitelistedStatus(address)\":{\"details\":\"See {getWhitelistedStatus-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,address,address[],address,uint96)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"Revert when input amount is zero\"}],\"InvalidParameter(bytes32)\":[{\"notice\":\"Revert when zero address is passed in\"}],\"InvalidSigner()\":[{\"notice\":\"Revert with invalid signer\"}],\"OnlyAggregator()\":[{\"notice\":\"Revert when caller is not an aggregator\"}],\"OrderFulfilled()\":[{\"notice\":\"Revert when trx has been fulfilled\"}],\"ThrowZeroAddress()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroValue()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"TokenNotSupported()\":[{\"notice\":\"Revert when invalid token is provided\"}],\"UnableToProcessRewards()\":[{\"notice\":\"Revert when rewards are not been distributed.\"}],\"Unsuported()\":[{\"notice\":\"Revert when input amount is zero\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrestStake} from \\\"./interface/IPaycrestStake.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n        uint256 primaryValidatorReward;\\n        uint256 secondaryValidatorsReward;\\n    }\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _usdc) external initializer {    \\n        _isTokenSupported[_usdc] = true;    \\n        __Ownable_init();\\n    }\\n    // constructor(address _usdc) {\\n    //     _isTokenSupported[_usdc] = true;\\n    // }\\n\\n    modifier onlyAggregator {\\n        if(msg.sender != _liquidityAggregator) revert OnlyAggregator();\\n        _;\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    )  external returns(bytes32 orderId) {\\n        // sender must be a whitelisted address\\n        // if(!_isWhitelisted[msg.sender]) revert NotWhitelisted();\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\\n        // first transfer token from msg.sender\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint96(MAX_BPS),\\n            amount: _amount\\n        });\\n        // emit deposit event\\n        emit Deposit(orderId, _amount, _rate, _institutionCode, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\\n        if(!_isTokenSupported[_token]) revert TokenNotSupported();\\n        if(_amount == 0) revert AmountIsZero();\\n        if(_refundAddress == address(0)) revert ThrowZeroAddress();\\n        if(_senderFeeRecipient == address(0)) revert ThrowZeroAddress();\\n        if(supportedInstitutionsByCode[_institutionCode].name == bytes32(0)) revert InvalidInstitutionCode();\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _orderId, \\n        address _primaryValidator, \\n        address[] calldata _secondaryValidators, \\n        address _liquidityProvider, \\n        uint96 _settlePercent\\n        )  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n        // substract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n        // if transaction amount is zero\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n        }\\n\\n        // load the fees and transfer associated protocol fees to protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent);\\n        uint256 _fee = order[_orderId].senderFee;\\n        if (_fee > 0) {\\n            // transfer sender fee\\n            transferSenderFee(_orderId);\\n        }\\n        // transfer protocol fee\\n        IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\\n        // // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n        IERC20(token).transfer(address(PaycrestStakingContract), (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward));\\n        // // distribute rewards\\n        bool status = IPaycrestStake(PaycrestStakingContract).rewardValidators(\\n            _orderId,\\n            token,\\n            _primaryValidator, \\n            _secondaryValidators, \\n            _feeParams.primaryValidatorReward, \\n            _feeParams.secondaryValidatorsReward\\n        );\\n        if(!status) revert UnableToProcessRewards();\\n        // emit event\\n        emit Settled(_orderId, _liquidityProvider, _settlePercent);\\n        return true;\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(bytes32 _orderId)  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\\n        // reser state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n        // transfer to seller \\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\\n        // emit\\n        emit Refunded(_orderId);\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n        // get primary validators fees primaryValidatorsReward\\n        _feeParams.primaryValidatorReward = (_feeParams.protocolFee * primaryValidatorFeePercent) / MAX_BPS;\\n        // get primary validators fees secondaryValidatorsReward\\n        _feeParams.secondaryValidatorsReward = (_feeParams.protocolFee * secondaryValidatorFeePercent) / MAX_BPS;\\n        // update new protocol fee\\n        _feeParams.protocolFee = _feeParams.protocolFee - (_feeParams.primaryValidatorReward + _feeParams.secondaryValidatorsReward);\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint64, \\n        uint64,\\n        uint256\\n    ) {\\n        return(protocolFeePercent, primaryValidatorFeePercent, secondaryValidatorFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getLiquidityAggregator-IPaycrest}. */\\n    function getLiquidityAggregator() external view returns(address) {\\n        return _liquidityAggregator;\\n    }\\n\\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\\n    function getWhitelistedStatus(address sender) external view returns(bool) {\\n        return _isWhitelisted[sender];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3ef0716a97fe662c5392f1c9b3a1d485d0b77f0df33190ab85733fbedf467506\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS = 100_000;\\n    uint64 internal protocolFeePercent = 5000; // 5%\\n    uint64 internal primaryValidatorFeePercent = 500; // 0.5%\\n    uint64 internal secondaryValidatorFeePercent = 500; // 0.5%\\n    address internal feeRecipient;\\n    address internal PaycrestStakingContract;\\n    address internal _liquidityAggregator;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroAddress();\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroValue();\\n    /// @notice Revert when zero address is passed in\\n    error InvalidParameter(bytes32 what);\\n    /// @notice Revert when invalid token is provided\\n    error TokenNotSupported();\\n    /// @notice Revert when input amount is zero\\n    error AmountIsZero();\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\\n    event PaycrestFees(uint64 protocolFee, uint64 primaryValidator, uint64 secondaryValidator);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n        else revert InvalidParameter(what);\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent, uint64 _primaryValidatorPercent, uint64 _secondaryValidatorPercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        primaryValidatorFeePercent = _primaryValidatorPercent;\\n        secondaryValidatorFeePercent = _secondaryValidatorPercent;\\n        emit PaycrestFees(_protocolFeePercent, _primaryValidatorPercent, _secondaryValidatorPercent);\\n    }\\n\\n    function updateFeeRecipient(bytes32 what, address value) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _liquidityAggregator = value;\\n        else if (what == \\\"stake\\\") PaycrestStakingContract = value;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x994730755637e5a55163a87738b7197715d471e7edcd2776cda604bbf83b2ab8\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(bytes32 indexed orderId, uint256 indexed amount, uint256 indexed rate, bytes32 institutionCode, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                CUSTOM ERRORS\\n    ################################################################## */\\n    /// @notice Revert when caller is not an aggregator\\n    error OnlyAggregator();\\n    /// @notice Revert with invalid signer\\n    error InvalidSigner();\\n    /// @notice Revert when input amount is zero\\n    error Unsuported();\\n    /// @notice Revert when trx has been fulfilled\\n    error OrderFulfilled();\\n    /// @notice Revert when rewards are not been distributed.\\n    error UnableToProcessRewards();\\n    error InvalidInstitutionCode();\\n    error NotWhitelisted();\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _primaryValidator address primary validator.\\n    /// @param _secondaryValidators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _orderId, address _primaryValidator, address[] calldata _secondaryValidators, address _liquidityProvider, uint96 _settlePercent)  external returns(bool);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return primaryValidatorReward amount that will be given to primary validator in percentage from `protocolReward`\\n    /// @return secondaryValidatorReward amount that will be shared between secondary validator in percentage from `protocolReward`\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint64 primaryValidatorReward, \\n        uint64 secondaryValidatorReward,\\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `liquidityAggregator`.\\n    function getLiquidityAggregator() external view returns(address);\\n\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x6ff831e0fbc139276a793dcf7bfa3c6dc664a661dfacd555a7b22fa4b58fc7e0\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrestStake.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\n/**\\n * @author Chef Photons, Vaultka Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrestStake {\\n    \\n    function rewardValidators(bytes32 orderId, address token, address primaryValidator, address[] memory secondaryValidators, uint256 primaryValidatorsReward, uint256 secondaryValidatorsReward) external returns(bool);\\n    \\n}\\n\",\"keccak256\":\"0x7f2fb3af09d1a6236c7ada47fcac021358876c675dc4b27e3f99a2c17542db0e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052620186a0606555611388606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101f4606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200009957600080fd5b50620000aa620000b060201b60201c565b6200025a565b600060019054906101000a900460ff161562000103576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fa90620001fd565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001745760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff6040516200016b91906200023d565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b6000620001e560278362000176565b9150620001f28262000187565b604082019050919050565b600060208201905081810360008301526200021881620001d6565b9050919050565b600060ff82169050919050565b62000237816200021f565b82525050565b60006020820190506200025460008301846200022c565b92915050565b613680806200026a6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806387490d86116100a2578063c4d66de811610071578063c4d66de8146102e2578063d12ff20a146102fe578063d8e8de341461032e578063e5b32cdf1461035e578063f2fde38b1461038e57610116565b806387490d86146102575780638da5cb5b1461028757806399e3c0b4146102a5578063b810c636146102c157610116565b8063715018a6116100e9578063715018a6146101a15780637249fbb6146101ab57806375151b63146101db578063764bc3551461020b578063768c6ec01461022757610116565b8063026213381461011b5780632ebc53561461014b57806332200882146101695780633d8f8fb214610185575b600080fd5b610135600480360381019061013091906124f0565b6103aa565b604051610142919061260a565b60405180910390f35b6101536104e8565b604051610160919061266d565b60405180910390f35b610183600480360381019061017e9190612836565b610512565b005b61019f600480360381019061019a91906128be565b610626565b005b6101a96107d8565b005b6101c560048036038101906101c091906124f0565b6107ec565b6040516101d29190612919565b60405180910390f35b6101f560048036038101906101f09190612934565b610a7c565b6040516102029190612919565b60405180910390f35b610225600480360381019061022091906129a1565b610ad2565b005b610241600480360381019061023c91906124f0565b610b95565b60405161024e9190612b09565b60405180910390f35b610271600480360381019061026c91906124f0565b610dc6565b60405161027e9190612b54565b60405180910390f35b61028f610e07565b60405161029c919061266d565b60405180910390f35b6102bf60048036038101906102ba9190612b9b565b610e31565b005b6102c961101e565b6040516102d99493929190612c0c565b60405180910390f35b6102fc60048036038101906102f79190612934565b61107a565b005b61031860048036038101906103139190612d04565b611211565b6040516103259190612de9565b60405180910390f35b61034860048036038101906103439190612934565b611647565b6040516103559190612919565b60405180910390f35b61037860048036038101906103739190612e5a565b61169d565b6040516103859190612919565b60405180910390f35b6103a860048036038101906103a39190612934565b611c01565b005b60606000606c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610427578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906103e1565b50505050905060008151905060008167ffffffffffffffff81111561044f5761044e61269e565b5b60405190808252806020026020018201604052801561048857816020015b61047561237c565b81526020019060019003908161046d5790505b50905060005b828110156104dc578381815181106104a9576104a8612ef4565b5b60200260200101518282815181106104c4576104c3612ef4565b5b6020026020010181905250808060010191505061048e565b50809350505050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051a611c84565b60008151905060005b8181101561062057606c600085815260200190815260200160002083828151811061055157610550612ef4565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105b6576105b5612ef4565b5b602002602001015160200151815260200185815250606d60008584815181106105e2576105e1612ef4565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610523565b50505050565b61062e611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610694576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036106fd5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361076a5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d4565b7f7374616b6500000000000000000000000000000000000000000000000000000082036107d35780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b6107e0611c84565b6107ea6000611d02565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610875576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000838152602001908152602001600020600401600c9054906101000a900460ff16156108d0576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606e6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606e600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606e600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606e6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610a02929190612f23565b6020604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612f61565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610ada611c84565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758838383604051610b8893929190612f8e565b60405180910390a1505050565b610b9d61239c565b606e6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b610dce61245e565b606d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e39611c84565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e9f576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303610f1e5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c69737400000000000000000000000000000000000000000000008303610fa15780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fde565b826040517f48bae5b8000000000000000000000000000000000000000000000000000000008152600401610fd59190612de9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161101193929190612fc5565b60405180910390a1505050565b600080600080606660009054906101000a900467ffffffffffffffff16606660089054906101000a900467ffffffffffffffff16606660109054906101000a900467ffffffffffffffff16606554935093509350935090919293565b60008060019054906101000a900460ff161590508080156110ab5750600160008054906101000a900460ff1660ff16105b806110d857506110ba30611dc8565b1580156110d75750600160008054906101000a900460ff1660ff16145b5b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e9061307f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611154576001600060016101000a81548160ff0219169083151502179055505b6001606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111b4611deb565b801561120d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161120491906130f1565b60405180910390a15b5050565b60006112208a8a86898c611e44565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161125d9392919061310c565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612f61565b50606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906112f190613172565b919050555033606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001611348929190612f23565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606e600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050866bffffffffffffffffffffffff1689827fbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e8b8787604051611632939291906131f6565b60405180910390a49998505050505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611726576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000888152602001908152602001600020600401600c9054906101000a900460ff1615611781576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606e600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082606e60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166117f99190613228565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606e60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361189b576001606e60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006118a78985612026565b90506000606e60008b815260200190815260200160002060030154905060008111156118d7576118d68a6121bf565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b8152600401611938929190612f23565b6020604051808303816000875af1158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8784602001516040518363ffffffff1660e01b81526004016119bb929190612f23565b6020604051808303816000875af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684606001518560400151611a529190613268565b6040518363ffffffff1660e01b8152600401611a6f929190612f23565b6020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190612f61565b506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a223c368c868d8d8d89604001518a606001516040518863ffffffff1660e01b8152600401611b249796959493929190613350565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612f61565b905080611ba0576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168b7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e3388604051611be791906133c9565b60405180910390a360019450505050509695505050505050565b611c09611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613456565b60405180910390fd5b611c8181611d02565b50565b611c8c612313565b73ffffffffffffffffffffffffffffffffffffffff16611caa610e07565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf7906134c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3190613554565b60405180910390fd5b611e4261231b565b565b606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ec7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008403611f01576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f67576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fcd576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b606d6000838152602001908152602001600020600001540361201f576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61202e61247e565b6000606e6000858152602001908152602001600020600601549050606e6000858152602001908152602001600020600301548161206b9190613574565b9050606554836bffffffffffffffffffffffff168261208a91906135a8565b6120949190613619565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff1683602001516120d091906135a8565b6120da9190613619565b826000018181525050816000015182602001516120f79190613574565b826020018181525050606554606660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161213391906135a8565b61213d9190613619565b826040018181525050606554606660109054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161217991906135a8565b6121839190613619565b826060018181525050816060015182604001516121a09190613268565b82600001516121af9190613574565b8260000181815250505092915050565b6000606e600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606e6000848152602001908152602001600020600301549050606e600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612286929190612f23565b6020604051808303816000875af11580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190612f61565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b600033905090565b600060019054906101000a900460ff1661236a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236190613554565b60405180910390fd5b61237a612375612313565b611d02565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124cd816124ba565b81146124d857600080fd5b50565b6000813590506124ea816124c4565b92915050565b600060208284031215612506576125056124b0565b5b6000612514848285016124db565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612552816124ba565b82525050565b60408201600082015161256e6000850182612549565b5060208201516125816020850182612549565b50505050565b60006125938383612558565b60408301905092915050565b6000602082019050919050565b60006125b78261251d565b6125c18185612528565b93506125cc83612539565b8060005b838110156125fd5781516125e48882612587565b97506125ef8361259f565b9250506001810190506125d0565b5085935050505092915050565b6000602082019050818103600083015261262481846125ac565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126578261262c565b9050919050565b6126678161264c565b82525050565b6000602082019050612682600083018461265e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126d68261268d565b810181811067ffffffffffffffff821117156126f5576126f461269e565b5b80604052505050565b60006127086124a6565b905061271482826126cd565b919050565b600067ffffffffffffffff8211156127345761273361269e565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127655761276461274a565b5b61276f60406126fe565b9050600061277f848285016124db565b6000830152506020612793848285016124db565b60208301525092915050565b60006127b26127ad84612719565b6126fe565b905080838252602082019050604084028301858111156127d5576127d4612745565b5b835b818110156127fe57806127ea888261274f565b8452602084019350506040810190506127d7565b5050509392505050565b600082601f83011261281d5761281c612688565b5b813561282d84826020860161279f565b91505092915050565b6000806040838503121561284d5761284c6124b0565b5b600061285b858286016124db565b925050602083013567ffffffffffffffff81111561287c5761287b6124b5565b5b61288885828601612808565b9150509250929050565b61289b8161264c565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080604083850312156128d5576128d46124b0565b5b60006128e3858286016124db565b92505060206128f4858286016128a9565b9150509250929050565b60008115159050919050565b612913816128fe565b82525050565b600060208201905061292e600083018461290a565b92915050565b60006020828403121561294a576129496124b0565b5b6000612958848285016128a9565b91505092915050565b600067ffffffffffffffff82169050919050565b61297e81612961565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000806000606084860312156129ba576129b96124b0565b5b60006129c88682870161298c565b93505060206129d98682870161298c565b92505060406129ea8682870161298c565b9150509250925092565b6129fd8161264c565b82525050565b6000819050919050565b612a1681612a03565b82525050565b60006bffffffffffffffffffffffff82169050919050565b612a3d81612a1c565b82525050565b612a4c816128fe565b82525050565b61012082016000820151612a6960008501826129f4565b506020820151612a7c60208501826129f4565b506040820151612a8f60408501826129f4565b506060820151612aa26060850182612a0d565b506080820151612ab56080850182612a34565b5060a0820151612ac860a0850182612a43565b5060c0820151612adb60c08501826129f4565b5060e0820151612aee60e0850182612a34565b50610100820151612b03610100850182612a0d565b50505050565b600061012082019050612b1f6000830184612a52565b92915050565b604082016000820151612b3b6000850182612549565b506020820151612b4e6020850182612549565b50505050565b6000604082019050612b696000830184612b25565b92915050565b612b78816128fe565b8114612b8357600080fd5b50565b600081359050612b9581612b6f565b92915050565b600080600060608486031215612bb457612bb36124b0565b5b6000612bc2868287016124db565b9350506020612bd3868287016128a9565b9250506040612be486828701612b86565b9150509250925092565b612bf781612961565b82525050565b612c0681612a03565b82525050565b6000608082019050612c216000830187612bee565b612c2e6020830186612bee565b612c3b6040830185612bee565b612c486060830184612bfd565b95945050505050565b612c5a81612a03565b8114612c6557600080fd5b50565b600081359050612c7781612c51565b92915050565b612c8681612a1c565b8114612c9157600080fd5b50565b600081359050612ca381612c7d565b92915050565b600080fd5b60008083601f840112612cc457612cc3612688565b5b8235905067ffffffffffffffff811115612ce157612ce0612ca9565b5b602083019150836001820283011115612cfd57612cfc612745565b5b9250929050565b60008060008060008060008060006101008a8c031215612d2757612d266124b0565b5b6000612d358c828d016128a9565b9950506020612d468c828d01612c68565b9850506040612d578c828d016124db565b9750506060612d688c828d01612c94565b9650506080612d798c828d016128a9565b95505060a0612d8a8c828d01612c68565b94505060c0612d9b8c828d016128a9565b93505060e08a013567ffffffffffffffff811115612dbc57612dbb6124b5565b5b612dc88c828d01612cae565b92509250509295985092959850929598565b612de3816124ba565b82525050565b6000602082019050612dfe6000830184612dda565b92915050565b60008083601f840112612e1a57612e19612688565b5b8235905067ffffffffffffffff811115612e3757612e36612ca9565b5b602083019150836020820283011115612e5357612e52612745565b5b9250929050565b60008060008060008060a08789031215612e7757612e766124b0565b5b6000612e8589828a016124db565b9650506020612e9689828a016128a9565b955050604087013567ffffffffffffffff811115612eb757612eb66124b5565b5b612ec389828a01612e04565b94509450506060612ed689828a016128a9565b9250506080612ee789828a01612c94565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f38600083018561265e565b612f456020830184612bfd565b9392505050565b600081519050612f5b81612b6f565b92915050565b600060208284031215612f7757612f766124b0565b5b6000612f8584828501612f4c565b91505092915050565b6000606082019050612fa36000830186612bee565b612fb06020830185612bee565b612fbd6040830184612bee565b949350505050565b6000606082019050612fda6000830186612dda565b612fe7602083018561265e565b612ff4604083018461290a565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613069602e83612ffc565b91506130748261300d565b604082019050919050565b600060208201905081810360008301526130988161305c565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006130db6130d66130d18461309f565b6130b6565b6130a9565b9050919050565b6130eb816130c0565b82525050565b600060208201905061310660008301846130e2565b92915050565b6000606082019050613121600083018661265e565b61312e602083018561265e565b61313b6040830184612bfd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317d82612a03565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131af576131ae613143565b5b600182019050919050565b82818337600083830152505050565b60006131d58385612ffc565b93506131e28385846131ba565b6131eb8361268d565b840190509392505050565b600060408201905061320b6000830186612dda565b818103602083015261321e8184866131c9565b9050949350505050565b600061323382612a1c565b915061323e83612a1c565b925082820390506bffffffffffffffffffffffff81111561326257613261613143565b5b92915050565b600061327382612a03565b915061327e83612a03565b925082820190508082111561329657613295613143565b5b92915050565b600082825260208201905092915050565b6000819050919050565b60006132c383836129f4565b60208301905092915050565b60006132de60208401846128a9565b905092915050565b6000602082019050919050565b60006132ff838561329c565b935061330a826132ad565b8060005b858110156133435761332082846132cf565b61332a88826132b7565b9750613335836132e6565b92505060018101905061330e565b5085925050509392505050565b600060c082019050613365600083018a612dda565b613372602083018961265e565b61337f604083018861265e565b81810360608301526133928186886132f3565b90506133a16080830185612bfd565b6133ae60a0830184612bfd565b98975050505050505050565b6133c381612a1c565b82525050565b60006020820190506133de60008301846133ba565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613440602683612ffc565b915061344b826133e4565b604082019050919050565b6000602082019050818103600083015261346f81613433565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134ac602083612ffc565b91506134b782613476565b602082019050919050565b600060208201905081810360008301526134db8161349f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061353e602b83612ffc565b9150613549826134e2565b604082019050919050565b6000602082019050818103600083015261356d81613531565b9050919050565b600061357f82612a03565b915061358a83612a03565b92508282039050818111156135a2576135a1613143565b5b92915050565b60006135b382612a03565b91506135be83612a03565b92508282026135cc81612a03565b915082820484148315176135e3576135e2613143565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061362482612a03565b915061362f83612a03565b92508261363f5761363e6135ea565b5b82820490509291505056fea2646970667358221220eb281f34df75f66f2570f9bbcf563667441feeae59272e3e7ff94f6441a9d99464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806387490d86116100a2578063c4d66de811610071578063c4d66de8146102e2578063d12ff20a146102fe578063d8e8de341461032e578063e5b32cdf1461035e578063f2fde38b1461038e57610116565b806387490d86146102575780638da5cb5b1461028757806399e3c0b4146102a5578063b810c636146102c157610116565b8063715018a6116100e9578063715018a6146101a15780637249fbb6146101ab57806375151b63146101db578063764bc3551461020b578063768c6ec01461022757610116565b8063026213381461011b5780632ebc53561461014b57806332200882146101695780633d8f8fb214610185575b600080fd5b610135600480360381019061013091906124f0565b6103aa565b604051610142919061260a565b60405180910390f35b6101536104e8565b604051610160919061266d565b60405180910390f35b610183600480360381019061017e9190612836565b610512565b005b61019f600480360381019061019a91906128be565b610626565b005b6101a96107d8565b005b6101c560048036038101906101c091906124f0565b6107ec565b6040516101d29190612919565b60405180910390f35b6101f560048036038101906101f09190612934565b610a7c565b6040516102029190612919565b60405180910390f35b610225600480360381019061022091906129a1565b610ad2565b005b610241600480360381019061023c91906124f0565b610b95565b60405161024e9190612b09565b60405180910390f35b610271600480360381019061026c91906124f0565b610dc6565b60405161027e9190612b54565b60405180910390f35b61028f610e07565b60405161029c919061266d565b60405180910390f35b6102bf60048036038101906102ba9190612b9b565b610e31565b005b6102c961101e565b6040516102d99493929190612c0c565b60405180910390f35b6102fc60048036038101906102f79190612934565b61107a565b005b61031860048036038101906103139190612d04565b611211565b6040516103259190612de9565b60405180910390f35b61034860048036038101906103439190612934565b611647565b6040516103559190612919565b60405180910390f35b61037860048036038101906103739190612e5a565b61169d565b6040516103859190612919565b60405180910390f35b6103a860048036038101906103a39190612934565b611c01565b005b60606000606c6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610427578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906103e1565b50505050905060008151905060008167ffffffffffffffff81111561044f5761044e61269e565b5b60405190808252806020026020018201604052801561048857816020015b61047561237c565b81526020019060019003908161046d5790505b50905060005b828110156104dc578381815181106104a9576104a8612ef4565b5b60200260200101518282815181106104c4576104c3612ef4565b5b6020026020010181905250808060010191505061048e565b50809350505050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051a611c84565b60008151905060005b8181101561062057606c600085815260200190815260200160002083828151811061055157610550612ef4565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105b6576105b5612ef4565b5b602002602001015160200151815260200185815250606d60008584815181106105e2576105e1612ef4565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610523565b50505050565b61062e611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610694576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036106fd5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361076a5780606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107d4565b7f7374616b6500000000000000000000000000000000000000000000000000000082036107d35780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5050565b6107e0611c84565b6107ea6000611d02565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610875576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000838152602001908152602001600020600401600c9054906101000a900460ff16156108d0576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001606e6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606e600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606e600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606e6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610a02929190612f23565b6020604051808303816000875af1158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612f61565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610ada611c84565b82606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080606660106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fced6b79f1325154aec329e6ff932857cb4f91fa8eb4c6791ce5b460f47995758838383604051610b8893929190612f8e565b60405180910390a1505050565b610b9d61239c565b606e6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b610dce61245e565b606d6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e39611c84565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e9f576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e0000000000000000000000000000000000000000000000000000008303610f1e5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c69737400000000000000000000000000000000000000000000008303610fa15780606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610fde565b826040517f48bae5b8000000000000000000000000000000000000000000000000000000008152600401610fd59190612de9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161101193929190612fc5565b60405180910390a1505050565b600080600080606660009054906101000a900467ffffffffffffffff16606660089054906101000a900467ffffffffffffffff16606660109054906101000a900467ffffffffffffffff16606554935093509350935090919293565b60008060019054906101000a900460ff161590508080156110ab5750600160008054906101000a900460ff1660ff16105b806110d857506110ba30611dc8565b1580156110d75750600160008054906101000a900460ff1660ff16145b5b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e9061307f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611154576001600060016101000a81548160ff0219169083151502179055505b6001606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111b4611deb565b801561120d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161120491906130f1565b60405180910390a15b5050565b60006112208a8a86898c611e44565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b815260040161125d9392919061310c565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190612f61565b50606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906112f190613172565b919050555033606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001611348929190612f23565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606e600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050866bffffffffffffffffffffffff1689827fbcd03c92e4cfe8dc461872f6cd67c811155fa7d92c918619e82e6b6b44733e7e8b8787604051611632939291906131f6565b60405180910390a49998505050505050505050565b6000606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611726576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606e6000888152602001908152602001600020600401600c9054906101000a900460ff1615611781576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606e600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082606e60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166117f99190613228565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606e60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361189b576001606e60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006118a78985612026565b90506000606e60008b815260200190815260200160002060030154905060008111156118d7576118d68a6121bf565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b8152600401611938929190612f23565b6020604051808303816000875af1158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197b9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8784602001516040518363ffffffff1660e01b81526004016119bb929190612f23565b6020604051808303816000875af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f61565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684606001518560400151611a529190613268565b6040518363ffffffff1660e01b8152600401611a6f929190612f23565b6020604051808303816000875af1158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190612f61565b506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a223c368c868d8d8d89604001518a606001516040518863ffffffff1660e01b8152600401611b249796959493929190613350565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612f61565b905080611ba0576040517fbcb00c1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168b7fce38752ac5ed47dd3cff11297a4261a0c644be6ca65dc3fc7ae1c3a97c209e3388604051611be791906133c9565b60405180910390a360019450505050509695505050505050565b611c09611c84565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613456565b60405180910390fd5b611c8181611d02565b50565b611c8c612313565b73ffffffffffffffffffffffffffffffffffffffff16611caa610e07565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf7906134c2565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3190613554565b60405180910390fd5b611e4261231b565b565b606a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ec7576040517f3dd1b30500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008403611f01576040517f43ad20fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f67576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fcd576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000801b606d6000838152602001908152602001600020600001540361201f576040517f38f5fc3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61202e61247e565b6000606e6000858152602001908152602001600020600601549050606e6000858152602001908152602001600020600301548161206b9190613574565b9050606554836bffffffffffffffffffffffff168261208a91906135a8565b6120949190613619565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff1683602001516120d091906135a8565b6120da9190613619565b826000018181525050816000015182602001516120f79190613574565b826020018181525050606554606660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161213391906135a8565b61213d9190613619565b826040018181525050606554606660109054906101000a900467ffffffffffffffff1667ffffffffffffffff16836000015161217991906135a8565b6121839190613619565b826060018181525050816060015182604001516121a09190613268565b82600001516121af9190613574565b8260000181815250505092915050565b6000606e600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606e6000848152602001908152602001600020600301549050606e600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612286929190612f23565b6020604051808303816000875af11580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190612f61565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b600033905090565b600060019054906101000a900460ff1661236a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236190613554565b60405180910390fd5b61237a612375612313565b611d02565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124cd816124ba565b81146124d857600080fd5b50565b6000813590506124ea816124c4565b92915050565b600060208284031215612506576125056124b0565b5b6000612514848285016124db565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612552816124ba565b82525050565b60408201600082015161256e6000850182612549565b5060208201516125816020850182612549565b50505050565b60006125938383612558565b60408301905092915050565b6000602082019050919050565b60006125b78261251d565b6125c18185612528565b93506125cc83612539565b8060005b838110156125fd5781516125e48882612587565b97506125ef8361259f565b9250506001810190506125d0565b5085935050505092915050565b6000602082019050818103600083015261262481846125ac565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126578261262c565b9050919050565b6126678161264c565b82525050565b6000602082019050612682600083018461265e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126d68261268d565b810181811067ffffffffffffffff821117156126f5576126f461269e565b5b80604052505050565b60006127086124a6565b905061271482826126cd565b919050565b600067ffffffffffffffff8211156127345761273361269e565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127655761276461274a565b5b61276f60406126fe565b9050600061277f848285016124db565b6000830152506020612793848285016124db565b60208301525092915050565b60006127b26127ad84612719565b6126fe565b905080838252602082019050604084028301858111156127d5576127d4612745565b5b835b818110156127fe57806127ea888261274f565b8452602084019350506040810190506127d7565b5050509392505050565b600082601f83011261281d5761281c612688565b5b813561282d84826020860161279f565b91505092915050565b6000806040838503121561284d5761284c6124b0565b5b600061285b858286016124db565b925050602083013567ffffffffffffffff81111561287c5761287b6124b5565b5b61288885828601612808565b9150509250929050565b61289b8161264c565b81146128a657600080fd5b50565b6000813590506128b881612892565b92915050565b600080604083850312156128d5576128d46124b0565b5b60006128e3858286016124db565b92505060206128f4858286016128a9565b9150509250929050565b60008115159050919050565b612913816128fe565b82525050565b600060208201905061292e600083018461290a565b92915050565b60006020828403121561294a576129496124b0565b5b6000612958848285016128a9565b91505092915050565b600067ffffffffffffffff82169050919050565b61297e81612961565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000806000606084860312156129ba576129b96124b0565b5b60006129c88682870161298c565b93505060206129d98682870161298c565b92505060406129ea8682870161298c565b9150509250925092565b6129fd8161264c565b82525050565b6000819050919050565b612a1681612a03565b82525050565b60006bffffffffffffffffffffffff82169050919050565b612a3d81612a1c565b82525050565b612a4c816128fe565b82525050565b61012082016000820151612a6960008501826129f4565b506020820151612a7c60208501826129f4565b506040820151612a8f60408501826129f4565b506060820151612aa26060850182612a0d565b506080820151612ab56080850182612a34565b5060a0820151612ac860a0850182612a43565b5060c0820151612adb60c08501826129f4565b5060e0820151612aee60e0850182612a34565b50610100820151612b03610100850182612a0d565b50505050565b600061012082019050612b1f6000830184612a52565b92915050565b604082016000820151612b3b6000850182612549565b506020820151612b4e6020850182612549565b50505050565b6000604082019050612b696000830184612b25565b92915050565b612b78816128fe565b8114612b8357600080fd5b50565b600081359050612b9581612b6f565b92915050565b600080600060608486031215612bb457612bb36124b0565b5b6000612bc2868287016124db565b9350506020612bd3868287016128a9565b9250506040612be486828701612b86565b9150509250925092565b612bf781612961565b82525050565b612c0681612a03565b82525050565b6000608082019050612c216000830187612bee565b612c2e6020830186612bee565b612c3b6040830185612bee565b612c486060830184612bfd565b95945050505050565b612c5a81612a03565b8114612c6557600080fd5b50565b600081359050612c7781612c51565b92915050565b612c8681612a1c565b8114612c9157600080fd5b50565b600081359050612ca381612c7d565b92915050565b600080fd5b60008083601f840112612cc457612cc3612688565b5b8235905067ffffffffffffffff811115612ce157612ce0612ca9565b5b602083019150836001820283011115612cfd57612cfc612745565b5b9250929050565b60008060008060008060008060006101008a8c031215612d2757612d266124b0565b5b6000612d358c828d016128a9565b9950506020612d468c828d01612c68565b9850506040612d578c828d016124db565b9750506060612d688c828d01612c94565b9650506080612d798c828d016128a9565b95505060a0612d8a8c828d01612c68565b94505060c0612d9b8c828d016128a9565b93505060e08a013567ffffffffffffffff811115612dbc57612dbb6124b5565b5b612dc88c828d01612cae565b92509250509295985092959850929598565b612de3816124ba565b82525050565b6000602082019050612dfe6000830184612dda565b92915050565b60008083601f840112612e1a57612e19612688565b5b8235905067ffffffffffffffff811115612e3757612e36612ca9565b5b602083019150836020820283011115612e5357612e52612745565b5b9250929050565b60008060008060008060a08789031215612e7757612e766124b0565b5b6000612e8589828a016124db565b9650506020612e9689828a016128a9565b955050604087013567ffffffffffffffff811115612eb757612eb66124b5565b5b612ec389828a01612e04565b94509450506060612ed689828a016128a9565b9250506080612ee789828a01612c94565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f38600083018561265e565b612f456020830184612bfd565b9392505050565b600081519050612f5b81612b6f565b92915050565b600060208284031215612f7757612f766124b0565b5b6000612f8584828501612f4c565b91505092915050565b6000606082019050612fa36000830186612bee565b612fb06020830185612bee565b612fbd6040830184612bee565b949350505050565b6000606082019050612fda6000830186612dda565b612fe7602083018561265e565b612ff4604083018461290a565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613069602e83612ffc565b91506130748261300d565b604082019050919050565b600060208201905081810360008301526130988161305c565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006130db6130d66130d18461309f565b6130b6565b6130a9565b9050919050565b6130eb816130c0565b82525050565b600060208201905061310660008301846130e2565b92915050565b6000606082019050613121600083018661265e565b61312e602083018561265e565b61313b6040830184612bfd565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317d82612a03565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131af576131ae613143565b5b600182019050919050565b82818337600083830152505050565b60006131d58385612ffc565b93506131e28385846131ba565b6131eb8361268d565b840190509392505050565b600060408201905061320b6000830186612dda565b818103602083015261321e8184866131c9565b9050949350505050565b600061323382612a1c565b915061323e83612a1c565b925082820390506bffffffffffffffffffffffff81111561326257613261613143565b5b92915050565b600061327382612a03565b915061327e83612a03565b925082820190508082111561329657613295613143565b5b92915050565b600082825260208201905092915050565b6000819050919050565b60006132c383836129f4565b60208301905092915050565b60006132de60208401846128a9565b905092915050565b6000602082019050919050565b60006132ff838561329c565b935061330a826132ad565b8060005b858110156133435761332082846132cf565b61332a88826132b7565b9750613335836132e6565b92505060018101905061330e565b5085925050509392505050565b600060c082019050613365600083018a612dda565b613372602083018961265e565b61337f604083018861265e565b81810360608301526133928186886132f3565b90506133a16080830185612bfd565b6133ae60a0830184612bfd565b98975050505050505050565b6133c381612a1c565b82525050565b60006020820190506133de60008301846133ba565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613440602683612ffc565b915061344b826133e4565b604082019050919050565b6000602082019050818103600083015261346f81613433565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134ac602083612ffc565b91506134b782613476565b602082019050919050565b600060208201905081810360008301526134db8161349f565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061353e602b83612ffc565b9150613549826134e2565b604082019050919050565b6000602082019050818103600083015261356d81613531565b9050919050565b600061357f82612a03565b915061358a83612a03565b92508282039050818111156135a2576135a1613143565b5b92915050565b60006135b382612a03565b91506135be83612a03565b92508282026135cc81612a03565b915082820484148315176135e3576135e2613143565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061362482612a03565b915061362f83612a03565b92508261363f5761363e6135ea565b5b82820490509291505056fea2646970667358221220eb281f34df75f66f2570f9bbcf563667441feeae59272e3e7ff94f6441a9d99464736f6c63430008120033",
  "devdoc": {
    "events": {
      "Deposit(bytes32,uint256,uint256,bytes32,string)": {
        "details": "Emitted when deposit is made."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Refunded(bytes32)": {
        "details": "Emitted when aggregator refund transaction."
      },
      "Settled(bytes32,address,uint96)": {
        "details": "Emitted when aggregator settle transaction."
      },
      "TransferSenderFee(address,uint256)": {
        "details": "Emitted when sender get therir rewards."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)": {
        "details": "See {createOrder-IPaycrest}. "
      },
      "getFeeDetails()": {
        "details": "See {getFeeDetails-IPaycrest}. "
      },
      "getLiquidityAggregator()": {
        "details": "See {getLiquidityAggregator-IPaycrest}. "
      },
      "getOrderInfo(bytes32)": {
        "details": "See {getOrderInfo-IPaycrest}. "
      },
      "getSupportedInstitutionName(bytes32)": {
        "details": "See {getSupportedInstitutionName-IPaycrest}. "
      },
      "getWhitelistedStatus(address)": {
        "details": "See {getWhitelistedStatus-IPaycrest}. "
      },
      "isTokenSupported(address)": {
        "details": "See {isTokenSupported-IPaycrest}. "
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "refund(bytes32)": {
        "details": "See {refund-IPaycrest}. "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "settle(bytes32,address,address[],address,uint96)": {
        "details": "See {settle-IPaycrest}. "
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AmountIsZero()": [
        {
          "notice": "Revert when input amount is zero"
        }
      ],
      "InvalidParameter(bytes32)": [
        {
          "notice": "Revert when zero address is passed in"
        }
      ],
      "InvalidSigner()": [
        {
          "notice": "Revert with invalid signer"
        }
      ],
      "OnlyAggregator()": [
        {
          "notice": "Revert when caller is not an aggregator"
        }
      ],
      "OrderFulfilled()": [
        {
          "notice": "Revert when trx has been fulfilled"
        }
      ],
      "ThrowZeroAddress()": [
        {
          "notice": "Revert when zero address is passed in"
        }
      ],
      "ThrowZeroValue()": [
        {
          "notice": "Revert when zero address is passed in"
        }
      ],
      "TokenNotSupported()": [
        {
          "notice": "Revert when invalid token is provided"
        }
      ],
      "UnableToProcessRewards()": [
        {
          "notice": "Revert when rewards are not been distributed."
        }
      ],
      "Unsuported()": [
        {
          "notice": "Revert when input amount is zero"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1245,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4251,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "MAX_BPS",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 4254,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "102",
        "type": "t_uint64"
      },
      {
        "astId": 4257,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "primaryValidatorFeePercent",
        "offset": 8,
        "slot": "102",
        "type": "t_uint64"
      },
      {
        "astId": 4260,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "secondaryValidatorFeePercent",
        "offset": 16,
        "slot": "102",
        "type": "t_uint64"
      },
      {
        "astId": 4262,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 4264,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "PaycrestStakingContract",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4266,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_liquidityAggregator",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 4270,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_isTokenSupported",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4274,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_isWhitelisted",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4280,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "supportedInstitutions",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)"
      },
      {
        "astId": 4285,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "supportedInstitutionsByCode",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)"
      },
      {
        "astId": 3560,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "order",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_bytes32,t_struct(Order)5007_storage)"
      },
      {
        "astId": 3564,
        "contract": "contracts/Paycrest.sol:Paycrest",
        "label": "_nonce",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Institution)4243_storage)dyn_storage": {
        "base": "t_struct(Institution)4243_storage",
        "encoding": "dynamic_array",
        "label": "struct PaycrestSettingManager.Institution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Institution)4243_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaycrestSettingManager.Institution[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Institution)4243_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(InstitutionByCode)4248_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)",
        "numberOfBytes": "32",
        "value": "t_struct(InstitutionByCode)4248_storage"
      },
      "t_mapping(t_bytes32,t_struct(Order)5007_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IPaycrest.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)5007_storage"
      },
      "t_struct(Institution)4243_storage": {
        "encoding": "inplace",
        "label": "struct PaycrestSettingManager.Institution",
        "members": [
          {
            "astId": 4240,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "code",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4242,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(InstitutionByCode)4248_storage": {
        "encoding": "inplace",
        "label": "struct PaycrestSettingManager.InstitutionByCode",
        "members": [
          {
            "astId": 4245,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4247,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Order)5007_storage": {
        "encoding": "inplace",
        "label": "struct IPaycrest.Order",
        "members": [
          {
            "astId": 4990,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4992,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4994,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "senderFeeRecipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4996,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "senderFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4998,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "rate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint96"
          },
          {
            "astId": 5000,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "isFulfilled",
            "offset": 12,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5002,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "refundAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5004,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "currentBPS",
            "offset": 20,
            "slot": "5",
            "type": "t_uint96"
          },
          {
            "astId": 5006,
            "contract": "contracts/Paycrest.sol:Paycrest",
            "label": "amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}